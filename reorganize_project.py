#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É old/
"""

import os
import shutil
import sys
from pathlib import Path

def reorganize_project():
    """–†–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path.cwd()
    old_dir = project_root / "old"
    
    print("üîß –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
    print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É old/ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    old_dir.mkdir(exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {old_dir}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–Ω–æ–≤—ã–µ)
    keep_files = {
        # –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–¥–∞—á–∏ 3
        "api/platform_endpoints.py",
        "dashboard/system_dashboard.html",
        "monitoring/system_monitor.py", 
        "tests/test_full_system.py",
        "main.py",
        "requirements.txt",
        ".env.example",
        "railway.toml",
        "README.md",
        "Dockerfile",
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π database service –∏–∑ –∑–∞–¥–∞—á–∏ 2
        "core/database/enhanced_unified_service.py",
        
        # Git –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        ".git",
        ".gitignore",
        ".env",
        
        # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
        "reorganize_project.py"
    }
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories_to_create = [
        "api",
        "dashboard", 
        "monitoring",
        "tests",
        "core",
        "core/database"
    ]
    
    for dir_name in directories_to_create:
        dir_path = project_root / dir_name
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
    def should_keep(path_str):
        for keep_pattern in keep_files:
            if path_str == keep_pattern or path_str.startswith(keep_pattern + "/"):
                return True
        return False
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    moved_count = 0
    
    for item in project_root.iterdir():
        if item.name == "old":
            continue
            
        relative_path = item.relative_to(project_root)
        
        if not should_keep(str(relative_path)):
            try:
                destination = old_dir / item.name
                
                if item.is_file():
                    shutil.move(str(item), str(destination))
                    print(f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {item.name} -> old/")
                    moved_count += 1
                elif item.is_dir():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    has_keep_files = False
                    for root, dirs, files in os.walk(item):
                        for file in files:
                            file_path = Path(root) / file
                            rel_path = file_path.relative_to(project_root)
                            if should_keep(str(rel_path)):
                                has_keep_files = True
                                break
                        if has_keep_files:
                            break
                    
                    if not has_keep_files:
                        shutil.move(str(item), str(destination))
                        print(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {item.name} -> old/")
                        moved_count += 1
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {item.name}: {e}")
    
    print(f"\n‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫—É old/")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    expected_files = [
        "main.py",
        "requirements.txt", 
        "README.md",
        "api/platform_endpoints.py",
        "dashboard/system_dashboard.html",
        "monitoring/system_monitor.py",
        "tests/test_full_system.py",
        "core/database/enhanced_unified_service.py"
    ]
    
    missing_files = []
    
    for file_path in expected_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_files)} —Ñ–∞–π–ª–æ–≤:")
        for file in missing_files:
            print(f"   - {file}")
        print("\n–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–¥–∞—á–∏ 3.")
    else:
        print(f"\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    gitignore_path = project_root / ".gitignore"
    if not gitignore_path.exists():
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Environment variables
.env
.venv
env/
venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
logs/

# Database
*.db
*.sqlite3

# OS
.DS_Store
Thumbs.db

# Old files
old/
"""
        with open(gitignore_path, 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω .gitignore")
    
    print(f"\nüöÄ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: {old_dir}")
    print(f"üîß –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py")

if __name__ == "__main__":
    try:
        reorganize_project()
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
