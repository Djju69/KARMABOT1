#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os

def test_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "multiplatform/main_api.py",
        "multiplatform/database/fault_tolerant_service.py",
        "multiplatform/database/platform_adapters.py",
        "multiplatform/database/enhanced_unified_service.py",
        "multiplatform/api/platform_endpoints.py",
        "multiplatform/dashboard/system_dashboard.html",
        "multiplatform/monitoring/system_monitor.py",
        "multiplatform/tests/test_fault_tolerance.py",
        "multiplatform/tests/test_platform_adapters.py",
        "multiplatform/tests/test_full_system.py",
        "requirements_multiplatform.txt"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã!")
        return True

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ multiplatform
        sys.path.insert(0, 'multiplatform')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
        from database.fault_tolerant_service import fault_tolerant_db
        print("‚úÖ fault_tolerant_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from database.platform_adapters import TelegramAdapter
        print("‚úÖ platform_adapters –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from database.enhanced_unified_service import enhanced_unified_db
        print("‚úÖ enhanced_unified_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from api.platform_endpoints import main_router
        print("‚úÖ platform_endpoints –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from monitoring.system_monitor import SystemMonitor
        print("‚úÖ system_monitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_basic_functionality():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        sys.path.insert(0, 'multiplatform')
        
        from database.fault_tolerant_service import fault_tolerant_db
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        status = fault_tolerant_db.get_system_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['mode']}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = fault_tolerant_db.create_user_with_fallback(
            123456789, 
            {'username': 'test'}, 
            'telegram'
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = fault_tolerant_db.get_user_with_fallback(123456789, 'telegram')
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if user_info else '–û—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_main_bot_intact():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ main_v2.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω
        if os.path.exists("main_v2.py"):
            print("‚úÖ main_v2.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–æ–π)
            size = os.path.getsize("main_v2.py")
            if size > 100000:  # –ë–æ–ª—å—à–µ 100KB
                print(f"‚úÖ main_v2.py —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç (–Ω–µ –∏–∑–º–µ–Ω–µ–Ω)")
            else:
                print(f"‚ö†Ô∏è main_v2.py —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–µ–Ω)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ core/ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç
            if os.path.exists("core/"):
                print("‚úÖ core/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚ùå core/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            return True
        else:
            print("‚ùå main_v2.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_structure),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
        ("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç", test_main_bot_intact)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. cd multiplatform")
        print("2. python main_api.py")
        print("3. –û—Ç–∫—Ä—ã—Ç—å http://localhost:8001/docs")
        print("4. –û—Ç–∫—Ä—ã—Ç—å http://localhost:8001/dashboard/")
    else:
        print(f"\n‚ö†Ô∏è {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
