"""
–¢–µ—Å—Ç—ã –¥–ª—è –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤
"""
import pytest
from unittest.mock import Mock, AsyncMock, patch
from aiogram.types import Message, CallbackQuery, User
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from core.services.live_dashboard import LiveDashboardService, DashboardMetric, DashboardData
from core.handlers.live_dashboard_router import (
    moderation_dashboard_handler,
    notifications_dashboard_handler,
    system_dashboard_handler,
    refresh_dashboard_callback,
    dashboard_menu_callback
)


class TestLiveDashboardService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.service = LiveDashboardService()
    
    @pytest.mark.asyncio
    async def test_get_moderation_dashboard(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        with patch('core.services.live_dashboard.db_v2') as mock_db:
            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∫–∏
            mock_db.get_cards_count.side_effect = [100, 15, 50, 10, 25]  # total, pending, approved, rejected, published
            mock_db.get_cards_count.return_value = 5  # –¥–ª—è since –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            
            dashboard = await self.service.get_moderation_dashboard()
            
            assert isinstance(dashboard, DashboardData)
            assert dashboard.title == "üìä –î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            assert len(dashboard.metrics) == 5
            assert dashboard.auto_refresh_seconds == 60
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metric_names = [metric.name for metric in dashboard.metrics]
            assert "üìù –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" in metric_names
            assert "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" in metric_names
            assert "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ" in metric_names
            assert "üéâ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" in metric_names
            assert "üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫" in metric_names
    
    @pytest.mark.asyncio
    async def test_get_notifications_dashboard(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        with patch('core.services.live_dashboard.db_v2') as mock_db:
            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∫–∏
            mock_db.get_notifications_count.side_effect = [500, 25]  # total, unread
            mock_db.get_sms_queue_count.return_value = 10
            mock_db.get_sms_failed_count.return_value = 2
            mock_db.get_sms_sent_count.return_value = 100
            
            dashboard = await self.service.get_notifications_dashboard()
            
            assert isinstance(dashboard, DashboardData)
            assert dashboard.title == "üîî –î–∞—à–±–æ—Ä–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            assert len(dashboard.metrics) == 5
            assert dashboard.auto_refresh_seconds == 30
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metric_names = [metric.name for metric in dashboard.metrics]
            assert "üîî –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" in metric_names
            assert "üì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ" in metric_names
            assert "üì± SMS –≤ –æ—á–µ—Ä–µ–¥–∏" in metric_names
            assert "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ SMS" in metric_names
            assert "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS" in metric_names
    
    @pytest.mark.asyncio
    async def test_get_system_dashboard(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with patch('core.services.live_dashboard.psutil') as mock_psutil:
            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∫–∏
            mock_psutil.virtual_memory.return_value.percent = 65.5
            mock_psutil.disk_usage.return_value.percent = 45.2
            
            with patch.object(self.service, '_check_database_status', return_value=True):
                with patch.object(self.service, '_check_redis_status', return_value=True):
                    with patch.object(self.service, '_check_odoo_status', return_value=False):
                        with patch.object(self.service, '_get_active_connections', return_value=45):
                            dashboard = await self.service.get_system_dashboard()
            
            assert isinstance(dashboard, DashboardData)
            assert dashboard.title == "‚öôÔ∏è –î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã"
            assert len(dashboard.metrics) == 6
            assert dashboard.auto_refresh_seconds == 120
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metric_names = [metric.name for metric in dashboard.metrics]
            assert "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" in metric_names
            assert "üî¥ Redis" in metric_names
            assert "üåê Odoo" in metric_names
            assert "üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" in metric_names
            assert "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" in metric_names
            assert "üíø –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞" in metric_names
    
    @pytest.mark.asyncio
    async def test_check_database_status_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ë–î"""
        with patch('core.services.live_dashboard.db_v2') as mock_db:
            mock_db.get_cards_count.return_value = 100
            
            result = await self.service._check_database_status()
            assert result is True
    
    @pytest.mark.asyncio
    async def test_check_database_status_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ë–î"""
        with patch('core.services.live_dashboard.db_v2') as mock_db:
            mock_db.get_cards_count.side_effect = Exception("DB Error")
            
            result = await self.service._check_database_status()
            assert result is False
    
    @pytest.mark.asyncio
    async def test_check_redis_status_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Redis"""
        with patch('os.getenv', return_value='redis://localhost:6379'):
            with patch('aioredis.from_url') as mock_redis:
                mock_client = AsyncMock()
                mock_client.ping = AsyncMock()
                mock_client.close = AsyncMock()
                mock_redis.return_value = mock_client
                
                result = await self.service._check_redis_status()
                assert result is True
    
    @pytest.mark.asyncio
    async def test_check_redis_status_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Redis"""
        with patch('os.getenv', return_value=None):
            result = await self.service._check_redis_status()
            assert result is False
    
    @pytest.mark.asyncio
    async def test_check_odoo_status_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Odoo"""
        with patch('core.services.live_dashboard.odoo_api') as mock_odoo:
            mock_odoo.is_configured = True
            mock_odoo.get_partner_count = AsyncMock(return_value=50)
            
            result = await self.service._check_odoo_status()
            assert result is True
    
    @pytest.mark.asyncio
    async def test_check_odoo_status_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Odoo"""
        with patch('core.services.live_dashboard.odoo_api') as mock_odoo:
            mock_odoo.is_configured = False
            
            result = await self.service._check_odoo_status()
            assert result is False
    
    def test_format_dashboard_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥
        metrics = [
            DashboardMetric(
                name="üìù –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                value=15,
                change=5,
                status="warning",
                last_updated=datetime.now(),
                description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            ),
            DashboardMetric(
                name="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                value=50,
                change=0,
                status="good",
                last_updated=datetime.now(),
                description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
            )
        ]
        
        dashboard = DashboardData(
            title="üìä –î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            metrics=metrics,
            last_updated=datetime.now(),
            auto_refresh_seconds=60
        )
        
        message = self.service.format_dashboard_message(dashboard)
        
        assert "üìä –î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" in message
        assert "üìù –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: 15 (+5)" in message
        assert "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: 50" in message
        assert "–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" in message
        assert "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫" in message
    
    @pytest.mark.asyncio
    async def test_start_auto_refresh(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        callback_func = AsyncMock()
        
        with patch.object(self.service, 'get_moderation_dashboard') as mock_get:
            mock_get.return_value = DashboardData(
                title="Test",
                metrics=[],
                last_updated=datetime.now(),
                auto_refresh_seconds=1
            )
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self.service.start_auto_refresh("moderation", callback_func, 123456)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
            assert "moderation" in self.service.refresh_tasks
            
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self.service.stop_auto_refresh("moderation")
            assert "moderation" not in self.service.refresh_tasks
    
    @pytest.mark.asyncio
    async def test_stop_auto_refresh(self):
        """–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
        task = asyncio.create_task(asyncio.sleep(3600))
        self.service.refresh_tasks["test"] = task
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await self.service.stop_auto_refresh("test")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
        assert "test" not in self.service.refresh_tasks
        assert task.cancelled()


class TestLiveDashboardRouter:
    """–¢–µ—Å—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.user_id = 123456789
        self.admin_user = User(
            id=self.user_id,
            is_bot=False,
            first_name="Admin",
            username="admin"
        )
        self.message = Mock(spec=Message)
        self.message.from_user = self.admin_user
        self.message.answer = AsyncMock()
        
        self.callback = Mock(spec=CallbackQuery)
        self.callback.from_user = self.admin_user
        self.callback.message = self.message
        self.callback.answer = AsyncMock()
        
        self.state = Mock(spec=FSMContext)
        self.state.set_state = AsyncMock()
        self.state.clear = AsyncMock()
    
    @pytest.mark.asyncio
    async def test_moderation_dashboard_handler_admin_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        with patch('core.handlers.live_dashboard_router.get_user_role', return_value='admin'):
            with patch('core.handlers.live_dashboard_router.live_dashboard') as mock_dashboard:
                mock_dashboard.get_moderation_dashboard = AsyncMock(return_value=DashboardData(
                    title="Test",
                    metrics=[],
                    last_updated=datetime.now(),
                    auto_refresh_seconds=60
                ))
                mock_dashboard.format_dashboard_message.return_value = "Test dashboard message"
                
                await moderation_dashboard_handler(self.message, self.state)
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.message.answer.assert_called_once()
                call_args = self.message.answer.call_args
                assert "Test dashboard message" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_moderation_dashboard_handler_user_access_denied(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('core.handlers.live_dashboard_router.get_user_role', return_value='user'):
            await moderation_dashboard_handler(self.message, self.state)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            self.message.answer.assert_called_once()
            call_args = self.message.answer.call_args
            assert "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in call_args[0][0]
            assert "—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_notifications_dashboard_handler_admin_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        with patch('core.handlers.live_dashboard_router.get_user_role', return_value='admin'):
            with patch('core.handlers.live_dashboard_router.live_dashboard') as mock_dashboard:
                mock_dashboard.get_notifications_dashboard = AsyncMock(return_value=DashboardData(
                    title="Test",
                    metrics=[],
                    last_updated=datetime.now(),
                    auto_refresh_seconds=30
                ))
                mock_dashboard.format_dashboard_message.return_value = "Test notifications message"
                
                await notifications_dashboard_handler(self.message, self.state)
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.message.answer.assert_called_once()
                call_args = self.message.answer.call_args
                assert "Test notifications message" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_system_dashboard_handler_admin_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É —Å–∏—Å—Ç–µ–º—ã"""
        with patch('core.handlers.live_dashboard_router.get_user_role', return_value='admin'):
            with patch('core.handlers.live_dashboard_router.live_dashboard') as mock_dashboard:
                mock_dashboard.get_system_dashboard = AsyncMock(return_value=DashboardData(
                    title="Test",
                    metrics=[],
                    last_updated=datetime.now(),
                    auto_refresh_seconds=120
                ))
                mock_dashboard.format_dashboard_message.return_value = "Test system message"
                
                await system_dashboard_handler(self.message, self.state)
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.message.answer.assert_called_once()
                call_args = self.message.answer.call_args
                assert "Test system message" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_refresh_dashboard_callback(self):
        """–¢–µ—Å—Ç callback'–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        self.callback.data = "dashboard_refresh_moderation"
        
        with patch('core.handlers.live_dashboard_router.live_dashboard') as mock_dashboard:
            mock_dashboard.get_moderation_dashboard = AsyncMock(return_value=DashboardData(
                title="Test",
                metrics=[],
                last_updated=datetime.now(),
                auto_refresh_seconds=60
            ))
            mock_dashboard.format_dashboard_message.return_value = "Updated dashboard message"
            
            await refresh_dashboard_callback(self.callback, self.state)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            assert self.message.edit_text.call_count == 2  # –ó–∞–≥—Ä—É–∑–∫–∞ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            call_args = self.message.edit_text.call_args
            assert "Updated dashboard message" in call_args[0][0]
            
            self.callback.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_dashboard_menu_callback(self):
        """–¢–µ—Å—Ç callback'–∞ –º–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–æ–≤"""
        await dashboard_menu_callback(self.callback, self.state)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        self.message.edit_text.assert_called_once()
        call_args = self.message.edit_text.call_args
        assert "–ñ–∏–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã" in call_args[0][0]
        assert "–ú–æ–¥–µ—Ä–∞—Ü–∏—è" in call_args[0][0]
        assert "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" in call_args[0][0]
        assert "–°–∏—Å—Ç–µ–º–∞" in call_args[0][0]
        
        self.callback.answer.assert_called_once()


class TestLiveDashboardUtilityFunctions:
    """–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    
    @pytest.mark.asyncio
    async def test_get_moderation_dashboard_utility(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        from core.services.live_dashboard import get_moderation_dashboard
        
        with patch('core.services.live_dashboard.live_dashboard') as mock_dashboard:
            mock_dashboard.get_moderation_dashboard = AsyncMock(return_value={"test": "result"})
            
            result = await get_moderation_dashboard()
            assert result == {"test": "result"}
            mock_dashboard.get_moderation_dashboard.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_notifications_dashboard_utility(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from core.services.live_dashboard import get_notifications_dashboard
        
        with patch('core.services.live_dashboard.live_dashboard') as mock_dashboard:
            mock_dashboard.get_notifications_dashboard = AsyncMock(return_value={"test": "result"})
            
            result = await get_notifications_dashboard()
            assert result == {"test": "result"}
            mock_dashboard.get_notifications_dashboard.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_system_dashboard_utility(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        from core.services.live_dashboard import get_system_dashboard
        
        with patch('core.services.live_dashboard.live_dashboard') as mock_dashboard:
            mock_dashboard.get_system_dashboard = AsyncMock(return_value={"test": "result"})
            
            result = await get_system_dashboard()
            assert result == {"test": "result"}
            mock_dashboard.get_system_dashboard.assert_called_once()
    
    def test_format_dashboard_utility(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        from core.services.live_dashboard import format_dashboard
        
        dashboard = DashboardData(
            title="Test Dashboard",
            metrics=[],
            last_updated=datetime.now(),
            auto_refresh_seconds=60
        )
        
        with patch('core.services.live_dashboard.live_dashboard') as mock_dashboard:
            mock_dashboard.format_dashboard_message.return_value = "Formatted message"
            
            result = format_dashboard(dashboard)
            assert result == "Formatted message"
            mock_dashboard.format_dashboard_message.assert_called_once_with(dashboard)


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
