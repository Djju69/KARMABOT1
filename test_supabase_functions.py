#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫/–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
"""
import os
import asyncio
import logging
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database.db_v2 import db_v2
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        cards_count = db_v2.get_cards_count()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {cards_count}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        partners_count = db_v2.get_partners_count()
        logger.info(f"‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {partners_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_partner_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
    
    try:
        from core.database.db_v2 import db_v2
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        test_user_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        test_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ä—Ç–Ω–µ—Ä"
        
        partner = db_v2.get_or_create_partner(test_user_id, test_name)
        logger.info(f"‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω: ID={partner.id}, Name={partner.display_name}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {e}")
        return False

async def test_card_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
    
    try:
        from core.database.db_v2 import db_v2
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        test_user_id = 999999999
        test_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ä—Ç–Ω–µ—Ä"
        partner = db_v2.get_or_create_partner(test_user_id, test_name)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        from core.database.db_v2 import Card
        
        card = Card(
            id=None,
            partner_id=partner.id,
            category_id=1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            title='–¢–µ—Å—Ç–æ–≤–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è',
            address='–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
            contact='+7999999999',
            status='pending'
        )
        
        card_id = db_v2.create_card(card)
        logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={card_id}, Title={card.title}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return False

async def test_feature_flags():
    """–¢–µ—Å—Ç —Ñ–∏—á–∞-—Ñ–ª–∞–≥–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏—á–∞-—Ñ–ª–∞–≥–∏...")
    
    try:
        from core.settings import settings
        
        logger.info(f"‚úÖ Partner FSM: {settings.features.partner_fsm}")
        logger.info(f"‚úÖ Moderation: {settings.features.moderation}")
        logger.info(f"‚úÖ New Menu: {settings.features.new_menu}")
        logger.info(f"‚úÖ WebApp URL: {settings.features.webapp_url}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏—á–∞-—Ñ–ª–∞–≥–æ–≤: {e}")
        return False

async def test_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        from core.handlers.partner import start_add_card
        from core.handlers.profile import on_become_partner
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        from core.keyboards.reply_v2 import get_partner_keyboard
        from core.keyboards.reply_v2 import get_user_cabinet_keyboard
        
        logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase –∏ —Ñ—É–Ω–∫—Ü–∏–π...")
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–§–∏—á–∞-—Ñ–ª–∞–≥–∏", test_feature_flags),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", test_handlers),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞", test_partner_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏", test_card_creation),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–ï–°–¢: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = await test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.warning("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main())
