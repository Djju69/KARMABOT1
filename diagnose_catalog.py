#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–¢–ê–õ–û–ì–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""
import os
import sys
import psycopg2

def diagnose_catalog():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–¢–ê–õ–û–ì–ê")
    print("=" * 60)
    
    try:
        database_url = os.getenv('DATABASE_URL', '')
        if not database_url.startswith('postgresql://'):
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è PostgreSQL")
            return False
            
        conn = psycopg2.connect(database_url)
        cur = conn.cursor()
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
        print("\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print("-" * 50)
        
        cur.execute("""
            SELECT 
                c.slug,
                c.name,
                COUNT(cards.id) as total_cards,
                COUNT(CASE WHEN cards.status = 'published' THEN 1 END) as published_cards
            FROM categories_v2 c
            LEFT JOIN cards_v2 cards ON c.id = cards.category_id
            GROUP BY c.id, c.slug, c.name
            ORDER BY published_cards DESC;
        """)
        
        categories = cur.fetchall()
        
        print(f"{'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–í—Å–µ–≥–æ':<8} {'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ':<12} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 50)
        
        empty_categories = []
        working_categories = []
        
        for slug, name, total, published in categories:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if published > 0 else "‚ùå –ü–£–°–¢–ê–Ø"
            print(f"{slug:<15} {total:<8} {published:<12} {status}")
            
            if published == 0:
                empty_categories.append(slug)
            else:
                working_categories.append(slug)
        
        print(f"\nüìà –ò–¢–û–ì–û: {len(working_categories)} —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö, {len(empty_categories)} –ø—É—Å—Ç—ã—Ö")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 2: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 2: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print("-" * 50)
        
        cur.execute("""
            SELECT 
                c.slug as category_slug,
                cards.sub_slug,
                COUNT(*) as cards_count
            FROM cards_v2 cards
            JOIN categories_v2 c ON cards.category_id = c.id
            WHERE cards.status = 'published'
            GROUP BY c.slug, cards.sub_slug
            ORDER BY c.slug, cards.sub_slug;
        """)
        
        subcategories = cur.fetchall()
        
        if subcategories:
            print(f"{'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–ö–∞—Ä—Ç–æ—á–µ–∫'}")
            print("-" * 50)
            for cat_slug, sub_slug, count in subcategories:
                print(f"{cat_slug:<15} {sub_slug:<15} {count}")
        else:
            print("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –û –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø–•")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        print("\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 3: –ü–∞—Ä—Ç–Ω–µ—Ä—ã")
        print("-" * 50)
        
        cur.execute("SELECT COUNT(*) FROM partners_v2")
        partners_count = cur.fetchone()[0]
        print(f"–í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {partners_count}")
        
        cur.execute("SELECT COUNT(*) FROM partners_v2 WHERE display_name LIKE '%Sample%'")
        sample_partners = cur.fetchone()[0]
        print(f"–¢–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {sample_partners}")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        print("\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 4: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        print("-" * 50)
        
        cur.execute("SELECT COUNT(*) FROM card_photos")
        photos_count = cur.fetchone()[0]
        print(f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}")
        
        cur.execute("""
            SELECT COUNT(DISTINCT card_id) 
            FROM card_photos cp
            JOIN cards_v2 c ON cp.card_id = c.id
            WHERE c.status = 'published'
        """)
        cards_with_photos = cur.fetchone()[0]
        print(f"–ö–∞—Ä—Ç–æ—á–µ–∫ —Å —Ñ–æ—Ç–æ: {cards_with_photos}")
        
        conn.close()
        
        # –í–´–í–û–î–´
        print("\nüéØ –í–´–í–û–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("=" * 60)
        
        if len(empty_categories) > 0:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: {len(empty_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç—ã–µ:")
            for cat in empty_categories:
                print(f"   - {cat}")
            print("\nüîß –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–æ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        else:
            print("‚úÖ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏")
        
        if len(working_categories) > 0:
            print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {len(working_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
            for cat in working_categories:
                print(f"   - {cat}")
        
        return len(empty_categories) == 0
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
        return False

if __name__ == "__main__":
    success = diagnose_catalog()
    if success:
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ö–∞—Ç–∞–ª–æ–≥ –≤ –ø–æ—Ä—è–¥–∫–µ")
    else:
        print("\nüö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
