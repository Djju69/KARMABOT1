from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api.platform_endpoints import main_router
from core.database.enhanced_unified_service import enhanced_unified_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="üõ°Ô∏è Fault-Tolerant Multi-Platform System",
    description="""
    –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –º–Ω–æ–≥–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - ü§ñ Telegram Bot
    - üåê Website
    - üì± Mobile Apps (iOS/Android)
    - üñ•Ô∏è Desktop Apps (Windows/Mac/Linux)
    - üîó Partner API
    
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É PostgreSQL (Railway) –∏ Supabase,
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """,
    version="1.0.0",
    contact={
        "name": "System Administrator",
        "email": "admin@example.com"
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# CORS middleware –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"üìù {request.method} {request.url}")
    response = await call_next(request)
    logger.info(f"üì§ {request.method} {request.url} - {response.status_code}")
    return response

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ API
app.include_router(main_router, prefix="/v1")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è dashboard
dashboard_path = Path(__file__).parent / "dashboard"
if dashboard_path.exists():
    app.mount("/static", StaticFiles(directory=dashboard_path), name="static")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è dashboard
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π dashboard"""
    dashboard_file = Path(__file__).parent / "dashboard" / "system_dashboard.html"
    
    if dashboard_file.exists():
        with open(dashboard_file, 'r', encoding='utf-8') as f:
            return HTMLResponse(content=f.read())
    else:
        return HTMLResponse(content="""
        <html>
            <body>
                <h1>Dashboard not found</h1>
                <p>Please ensure dashboard/system_dashboard.html exists</p>
            </body>
        </html>
        """)

# –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ Starting Fault-Tolerant Multi-Platform System")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    try:
        enhanced_unified_db.init_databases()
        logger.info("‚úÖ Database initialization completed")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    health_status = enhanced_unified_db.health_check()
    logger.info(f"üè• System health: {health_status['mode']}")
    
    logger.info("üåü System ready to handle multi-platform requests")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë Shutting down Fault-Tolerant Multi-Platform System")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    try:
        sync_result = enhanced_unified_db.force_system_sync()
        logger.info(f"üì• Final sync completed: {sync_result}")
    except Exception as e:
        logger.error(f"‚ùå Final sync failed: {e}")
    
    logger.info("‚úÖ System shutdown completed")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "service": "üõ°Ô∏è Fault-Tolerant Multi-Platform System",
        "version": "1.0.0",
        "status": "operational",
        "description": "–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö",
        "platforms": {
            "telegram": "Telegram Bot integration",
            "website": "Web platform support",
            "mobile": "iOS and Android apps",
            "desktop": "Windows, Mac, Linux applications",
            "api": "Partner API access"
        },
        "features": [
            "üîÑ Automatic failover between databases",
            "üíæ Local caching for offline operations",
            "üîó Cross-platform account linking",
            "üìä Real-time monitoring and alerts",
            "üõ°Ô∏è Fault-tolerant architecture"
        ],
        "endpoints": {
            "api_docs": "/docs",
            "dashboard": "/dashboard",
            "health": "/v1/admin/health",
            "platforms": "/v1/platforms"
        },
        "current_time": enhanced_unified_db.get_current_timestamp()
    }

@app.get("/status")
async def quick_status():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health = enhanced_unified_db.health_check()
        return {
            "status": "ok" if health['health']['overall'] else "degraded",
            "mode": health['mode'],
            "databases": {
                "postgresql": "‚úÖ" if health['health']['postgresql']['status'] else "‚ùå",
                "supabase": "‚úÖ" if health['health']['supabase']['status'] else "‚ùå"
            },
            "uptime": f"{health['uptime']['overall']}%",
            "timestamp": health['timestamp']
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "timestamp": enhanced_unified_db.get_current_timestamp()
        }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return {
        "error": "Not Found",
        "message": f"Path {request.url.path} not found",
        "available_endpoints": {
            "api": "/v1/",
            "docs": "/docs",
            "dashboard": "/dashboard",
            "status": "/status"
        }
    }

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    logger.error(f"Internal server error: {exc}")
    return {
        "error": "Internal Server Error",
        "message": "An unexpected error occurred",
        "timestamp": enhanced_unified_db.get_current_timestamp()
    }

if __name__ == "__main__":
    import uvicorn
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    config = {
        "host": "0.0.0.0",
        "port": int(os.getenv("PORT", 8000)),
        "log_level": "info",
        "reload": os.getenv("ENVIRONMENT", "production") == "development"
    }
    
    logger.info(f"üöÄ Starting server on {config['host']}:{config['port']}")
    uvicorn.run("main:app", **config)
