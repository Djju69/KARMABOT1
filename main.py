import asyncio   
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandStart
from aiogram.client.bot import DefaultBotProperties

from core.settings import settings
from core.utils.commands import set_commands
from core.filters.iscontact import IsTrueContact
from core.utils.locales import translations

from core.database.db import db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
if not db.get_categories():
    db.add_category("üçú –†–µ—Å—Ç–æ—Ä–∞–Ω—ã")
    db.add_place(
        name="Moc Quan",
        category="üçú –†–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        address="–ù—è—á–∞–Ω–≥, —É–ª. –ú–æ—Ä—Å–∫–∞—è, 123",
        discount="10%",
        link="https://example.com",
        qr_code="https://example.com/qr.png"
    )

from core.handlers.basic import (
    get_start, get_photo, get_hello, get_inline, feedback_user,
    hiw_user, main_menu, user_regional_rest,
    get_location, get_video, get_file, language_callback, main_menu_callback
)
from core.handlers.callback import (
    rests_by_district_handler, rest_near_me_handler,
    rests_by_kitchen_handler, location_handler, router as callback_router
)
from core.handlers.contact import get_true_contact, get_fake_contact
from core.windows.qr import generate_qrcode, qr_code_check
from core.windows.restorans import (
    restoran_2_10_1_0, restoran_2_10_1_1, qr_code_postman
)
from core.handlers.category_handlers import (
    show_categories, show_nearest, handle_location, category_selected
)

from core.keyboards.reply import get_return_to_main_menu
from core.windows.main_menu import main_menu_text

# –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤)
localized_texts = {
    'back_to_main': {translations[lang]['back_to_main'] for lang in translations},
    'categories_button': {translations[lang]['choose_category'] for lang in translations},
    'show_nearest': {translations[lang]['show_nearest'] for lang in translations},
    'choose_language': {translations[lang]['choose_language'] for lang in translations},
}

async def start_bot(bot: Bot):
    await set_commands(bot)
    await bot.send_message(settings.bots.admin_id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def stop_bot(bot: Bot):
    await bot.send_message(settings.bots.admin_id, "‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def start():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
    )

    default_properties = DefaultBotProperties(parse_mode='HTML')
    bot = Bot(token=settings.bots.bot_token, default=default_properties)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.include_router(callback_router)

    # –°—Ç–∞—Ä—Ç, —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
    dp.message.register(get_start, CommandStart())
    dp.message.register(get_start, F.text.in_(localized_texts['choose_language']))
    dp.callback_query.register(language_callback, F.data.startswith("lang_"))

    # –ü–æ–º–æ—â—å, –æ—Ç–∑—ã–≤—ã, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message.register(hiw_user, Command(commands='help'))
    dp.message.register(hiw_user, F.text.in_(localized_texts['choose_language']))
    dp.message.register(feedback_user, Command(commands='feedback'))
    dp.message.register(main_menu, Command(commands='main_menu'))
    dp.message.register(main_menu, F.text.in_(localized_texts['back_to_main']))

    # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã - –ø—Ä–∏–º–µ—Ä—ã
    dp.message.register(restoran_2_10_1_0, F.text == 'H·∫£i s·∫£n M·ªôc qu√°n Nha Trangü¶û')
    dp.callback_query.register(restoran_2_10_1_0, F.data == 'restoran_2_10_1_0')
    dp.message.register(restoran_2_10_1_1, F.text == '–¢–µ—Å—Ç —Ä–µ—Å—Ç')
    dp.callback_query.register(restoran_2_10_1_1, F.data == 'restoran_2_10_1_1')

    # QR-–∫–æ–¥ –ø–æ—Å—Ç–º–∞–Ω
    dp.message.register(qr_code_postman, F.text == '–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å')
    dp.callback_query.register(qr_code_postman, F.data == 'callback_data')

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞—Ü–∏—è
    dp.message.register(show_categories, F.text.in_(localized_texts['categories_button']))
    dp.message.register(show_nearest, F.text.in_(localized_texts['show_nearest']))
    dp.message.register(handle_location, F.content_type == ContentType.LOCATION)
    dp.message.register(category_selected, F.text.regexp(r'^.+\s.+$'))

    # –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤, –±–ª–∏–∂–∞–π—à–∏–µ, –∫—É—Ö–Ω—è
    dp.message.register(user_regional_rest, F.text == '–í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–ºüåÜ')
    dp.callback_query.register(rest_near_me_handler, F.data == 'rest_near_me')
    dp.callback_query.register(rests_by_district_handler, F.data == 'rests_by_district')
    dp.callback_query.register(rests_by_kitchen_handler, F.data == 'rests_by_kitchen')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(
        main_menu_callback,
        F.data.in_({"show_categories", "rests_by_district", "rest_near_me", "change_language", "back_to_main"})
    )

    # –†–∞–∑–Ω–æ–µ
    dp.message.register(get_hello, F.text.lower().startswith('–ø—Ä–∏–≤–µ—Ç'))
    dp.message.register(get_photo, F.content_type == ContentType.PHOTO)
    dp.message.register(get_true_contact, F.content_type == ContentType.CONTACT, IsTrueContact())
    dp.message.register(get_fake_contact, F.content_type == ContentType.CONTACT)
    dp.message.register(get_location, F.content_type == ContentType.LOCATION)
    dp.message.register(get_video, F.content_type == ContentType.VIDEO)
    dp.message.register(get_file, F.content_type == ContentType.ANIMATION)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    dp.message.register(main_menu, F.text.in_(localized_texts['back_to_main']))

    # –°—Ç–∞—Ä—Ç–∞–ø –∏ —à—É—Ç–¥–∞—É–Ω
    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(start())
