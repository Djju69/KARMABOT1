name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python - <<'PY'
from pathlib import Path
for name in ('requirements.txt','requirements-dev.txt'):
    p = Path(name)
    if not p.exists():
        continue
    data = p.read_bytes()
    normalized = data.replace(b'\x00', b'').replace(b'\r\n', b'\n').replace(b'\r', b'\n')
    if normalized != data:
        p.write_bytes(normalized)
        print(f'Normalized {name}')
    else:
        print(f'{name} already normalized')
PY
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        TESTING: "1"
      run: |
        pytest tests/unit/ -v --cov=core --cov-report=xml --cov-report=term

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        TESTING: "1"
      run: |
        pytest tests/integration/ -v --cov=core --cov-append --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: actions/checkout@v4
      run: |
        echo "Security scanning would run here"
        # pip install safety
        # safety check

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        STAGING_ENV: 'staging'
      run: |
        echo "Deploying to staging environment..."
        # npx railway up --service bot --environment staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        PRODUCTION_ENV: 'production'
      run: |
        echo "Deploying to production environment..."
        # npx railway up --service bot --environment production
