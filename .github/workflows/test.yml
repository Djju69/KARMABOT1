name: Test and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with: 
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Normalize requirements files (strip NUL bytes and CRLF)
        for f in requirements*.txt; do
          [ -f "$f" ] || continue
          perl -pe 's/\r\n?/\n/g; s/\x00//g' -i -- "$f"
          echo "Normalized $f"
        done
        pip install -r requirements.txt -r requirements-dev.txt
        
    - name: Run unit tests
      env:
        DATABASE_URL: sqlite:///:memory:
        TESTING: "1"
      run: |
        pytest tests/unit -v --cov=core --cov-report=xml
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        TESTING: "1"
      run: |
        pytest tests/integration -v --cov=core --cov-append --cov-report=xml
        
    - name: Run loyalty service tests
      env:
        DATABASE_URL: sqlite:///:memory:
        TESTING: "1"
      run: |
        pytest tests/test_loyalty_points.py -v --cov=core.services.loyalty --cov-append --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        # Normalize requirements to strip NUL/CRLF before install
        for f in requirements*.txt; do
          [ -f "$f" ] || continue
          perl -pe 's/\r\n?/\n/g; s/\x00//g' -i -- "$f"
          echo "Normalized $f"
        done
        pip install -r requirements.txt
        
    - name: Deploy to production
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        echo "Deployment would happen here"
        # Add your deployment commands here
