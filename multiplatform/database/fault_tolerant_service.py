"""
–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
–ë–ï–ó –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ - —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
"""
import asyncio
import logging
import json
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class SystemMode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    NORMAL = "normal"           # –í—Å–µ –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç
    DEGRADED = "degraded"       # –û–¥–Ω–∞ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    EMERGENCY = "emergency"     # –í—Å–µ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Ç–æ–ª—å–∫–æ –∫–µ—à

@dataclass
class Operation:
    """–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
    id: str
    operation_type: str
    data: Dict[str, Any]
    timestamp: datetime
    retry_count: int = 0
    max_retries: int = 3

class DatabaseHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.health_status = {
            'postgresql': {'status': 'unknown', 'last_check': None, 'response_time': None},
            'supabase': {'status': 'unknown', 'last_check': None, 'response_time': None}
        }
        self.overall_health = True
    
    async def check_postgresql_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è PostgreSQL"""
        try:
            start_time = datetime.now()
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            response_time = (datetime.now() - start_time).total_seconds()
            
            self.health_status['postgresql'] = {
                'status': 'healthy',
                'last_check': datetime.now().isoformat(),
                'response_time': response_time
            }
            return {'status': 'healthy', 'response_time': response_time}
        except Exception as e:
            logger.error(f"PostgreSQL health check failed: {e}")
            self.health_status['postgresql'] = {
                'status': 'unhealthy',
                'last_check': datetime.now().isoformat(),
                'error': str(e)
            }
            return {'status': 'unhealthy', 'error': str(e)}
    
    async def check_supabase_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Supabase"""
        try:
            start_time = datetime.now()
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Supabase
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            response_time = (datetime.now() - start_time).total_seconds()
            
            self.health_status['supabase'] = {
                'status': 'healthy',
                'last_check': datetime.now().isoformat(),
                'response_time': response_time
            }
            return {'status': 'healthy', 'response_time': response_time}
        except Exception as e:
            logger.error(f"Supabase health check failed: {e}")
            self.health_status['supabase'] = {
                'status': 'unhealthy',
                'last_check': datetime.now().isoformat(),
                'error': str(e)
            }
            return {'status': 'unhealthy', 'error': str(e)}
    
    async def check_all_databases(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        postgresql_status = await self.check_postgresql_health()
        supabase_status = await self.check_supabase_health()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        healthy_count = sum([
            1 for status in [postgresql_status, supabase_status] 
            if status.get('status') == 'healthy'
        ])
        
        self.overall_health = healthy_count > 0
        
        return {
            'overall': self.overall_health,
            'postgresql': postgresql_status,
            'supabase': supabase_status,
            'healthy_databases': healthy_count,
            'total_databases': 2
        }

class OperationQueue:
    """–û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self):
        self.queue: List[Operation] = []
        self.max_queue_size = 1000
        self.processing = False
    
    def add_operation(self, operation_type: str, data: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        if len(self.queue) >= self.max_queue_size:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.queue = self.queue[-500:]
            logger.warning("Queue size limit reached, removing old operations")
        
        operation_id = str(uuid.uuid4())
        operation = Operation(
            id=operation_id,
            operation_type=operation_type,
            data=data,
            timestamp=datetime.now()
        )
        
        self.queue.append(operation)
        logger.info(f"Added operation {operation_type} to queue: {operation_id}")
        return operation_id
    
    def get_pending_operations(self) -> List[Operation]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return [op for op in self.queue if op.retry_count < op.max_retries]
    
    def mark_operation_completed(self, operation_id: str):
        """–û—Ç–º–µ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        self.queue = [op for op in self.queue if op.id != operation_id]
        logger.info(f"Operation {operation_id} marked as completed")
    
    def mark_operation_failed(self, operation_id: str):
        """–û—Ç–º–µ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–π"""
        for op in self.queue:
            if op.id == operation_id:
                op.retry_count += 1
                logger.warning(f"Operation {operation_id} failed, retry count: {op.retry_count}")
                break

class LocalCache:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –≤ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.cache: Dict[str, Any] = {}
        self.max_cache_size = 10000
        self.cache_stats = {
            'hits': 0,
            'misses': 0,
            'sets': 0,
            'deletes': 0
        }
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞"""
        if key in self.cache:
            self.cache_stats['hits'] += 1
            return self.cache[key]
        else:
            self.cache_stats['misses'] += 1
            return None
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–µ—à"""
        if len(self.cache) >= self.max_cache_size:
            # –£–¥–∞–ª—è–µ–º 20% —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            keys_to_remove = list(self.cache.keys())[:self.max_cache_size // 5]
            for key_to_remove in keys_to_remove:
                del self.cache[key_to_remove]
            logger.warning("Cache size limit reached, removing old entries")
        
        self.cache[key] = {
            'value': value,
            'timestamp': datetime.now().isoformat(),
            'ttl': ttl
        }
        self.cache_stats['sets'] += 1
    
    def delete(self, key: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞"""
        if key in self.cache:
            del self.cache[key]
            self.cache_stats['deletes'] += 1
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞"""
        self.cache.clear()
        logger.info("Local cache cleared")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
        total_requests = self.cache_stats['hits'] + self.cache_stats['misses']
        hit_rate = (self.cache_stats['hits'] / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'total_items': len(self.cache),
            'max_size': self.max_cache_size,
            'hit_rate': round(hit_rate, 2),
            'stats': self.cache_stats
        }

class FaultTolerantService:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.health_monitor = DatabaseHealthMonitor()
        self.operation_queue = OperationQueue()
        self.local_cache = LocalCache()
        self.system_mode = SystemMode.NORMAL
        self.operation_stats = {
            'total_operations': 0,
            'successful_operations': 0,
            'failed_operations': 0,
            'queued_operations': 0
        }
        self.start_time = datetime.now()
        self._start_recovery_processor()
        logger.info("üõ°Ô∏è FaultTolerantService initialized successfully")
    
    def _start_recovery_processor(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        async def recovery_processor():
            while True:
                try:
                    await self._process_pending_operations()
                    await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                except Exception as e:
                    logger.error(f"Recovery processor error: {e}")
                    await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(recovery_processor())
    
    async def _process_pending_operations(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        pending_ops = self.operation_queue.get_pending_operations()
        if not pending_ops:
            return
        
        logger.info(f"Processing {len(pending_ops)} pending operations")
        
        for operation in pending_ops:
            try:
                await self._execute_operation(operation)
                self.operation_queue.mark_operation_completed(operation.id)
                self.operation_stats['successful_operations'] += 1
            except Exception as e:
                logger.error(f"Failed to execute operation {operation.id}: {e}")
                self.operation_queue.mark_operation_failed(operation.id)
                self.operation_stats['failed_operations'] += 1
    
    async def _execute_operation(self, operation: Operation):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        logger.info(f"Executing operation {operation.operation_type}: {operation.id}")
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    
    async def create_user_with_fallback(self, user_id: str, user_data: Dict[str, Any], platform: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        self.operation_stats['total_operations'] += 1
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"Creating user {user_id} on platform {platform}")
            
            # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache_key = f"user:{platform}:{user_id}"
            self.local_cache.set(cache_key, user_data)
            
            self.operation_stats['successful_operations'] += 1
            return True
            
        except Exception as e:
            logger.error(f"Failed to create user {user_id}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            self.operation_queue.add_operation("create_user", {
                'user_id': user_id,
                'user_data': user_data,
                'platform': platform
            })
            self.operation_stats['queued_operations'] += 1
            
            return False
    
    async def get_user_with_fallback(self, user_id: str, platform: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"user:{platform}:{user_id}"
            cached_user = self.local_cache.get(cache_key)
            if cached_user:
                return cached_user['value']
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –ë–î
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return None
            
        except Exception as e:
            logger.error(f"Failed to get user {user_id}: {e}")
            return None
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        health_status = asyncio.run(self.health_monitor.check_all_databases())
        
        return {
            'mode': self.system_mode.value,
            'health': health_status,
            'cache': self.local_cache.get_stats(),
            'queue': {
                'total_operations': len(self.operation_queue.queue),
                'pending_operations': len(self.operation_queue.get_pending_operations())
            },
            'stats': self.operation_stats,
            'uptime': str(datetime.now() - self.start_time),
            'timestamp': datetime.now().isoformat()
        }
    
    async def force_sync_all_pending(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        pending_ops = self.operation_queue.get_pending_operations()
        processed = 0
        failed = 0
        
        for operation in pending_ops:
            try:
                await self._execute_operation(operation)
                self.operation_queue.mark_operation_completed(operation.id)
                processed += 1
            except Exception as e:
                logger.error(f"Failed to sync operation {operation.id}: {e}")
                self.operation_queue.mark_operation_failed(operation.id)
                failed += 1
        
        return {
            'processed': processed,
            'failed': failed,
            'total': len(pending_ops)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
fault_tolerant_db = FaultTolerantService()
