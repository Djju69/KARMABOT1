"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
FastAPI —Å–µ—Ä–≤–µ—Ä —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""
import os
import asyncio
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

from api.platform_endpoints import main_router
from database.enhanced_unified_service import enhanced_unified_db
from monitoring.system_monitor import SystemMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞
system_monitor = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global system_monitor
    
    # Startup
    logger.info("üöÄ Starting Multi-Platform System...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        enhanced_unified_db.init_databases()
        logger.info("‚úÖ Enhanced unified database initialized")
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
        system_monitor = SystemMonitor()
        monitoring_task = asyncio.create_task(system_monitor.run_monitoring_loop())
        logger.info("üîç System monitoring started")
        
        logger.info("‚úÖ Multi-Platform System started successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start Multi-Platform System: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Multi-Platform System...")
    
    if system_monitor:
        logger.info("üîç System monitoring stopped")
    
    logger.info("‚úÖ Multi-Platform System shutdown complete")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="üõ°Ô∏è Fault-Tolerant Multi-Platform System",
    description="""
    –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –º–Ω–æ–≥–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - ü§ñ Telegram Bot
    - üåê Website
    - üì± Mobile Apps (iOS/Android)
    - üñ•Ô∏è Desktop Apps (Windows/Mac/Linux)
    - üîó Partner API
    
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É PostgreSQL (Railway) –∏ Supabase,
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """,
    version="1.0.0",
    contact={
        "name": "System Administrator",
        "email": "admin@example.com"
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    },
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return JSONResponse(
        status_code=422,
        content={
            "error": "Validation Error",
            "message": "Invalid request data",
            "details": exc.errors(),
            "timestamp": "2025-01-01T00:00:00Z"
        }
    )

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(main_router, prefix="/v1")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
app.mount("/dashboard", StaticFiles(directory="dashboard"), name="dashboard")

# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "message": "üõ°Ô∏è Fault-Tolerant Multi-Platform System",
        "version": "1.0.0",
        "status": "operational",
        "platforms": ["telegram", "website", "mobile", "desktop", "api"],
        "features": [
            "fault-tolerance",
            "cross-platform-sync", 
            "monitoring",
            "admin-dashboard",
            "real-time-alerts"
        ],
        "endpoints": {
            "api_docs": "/docs",
            "dashboard": "/dashboard/system_dashboard.html",
            "health": "/v1/health",
            "admin_status": "/v1/admin/status"
        },
        "timestamp": "2025-01-01T00:00:00Z"
    }

# Endpoint –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
@app.get("/dashboard/", response_class=HTMLResponse)
async def dashboard():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html>
    <head>
        <title>System Dashboard</title>
        <meta http-equiv="refresh" content="0; url=/dashboard/system_dashboard.html">
    </head>
    <body>
        <p>Redirecting to dashboard...</p>
        <script>window.location.href = '/dashboard/system_dashboard.html';</script>
    </body>
    </html>
    """)

# Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from database.fault_tolerant_service import fault_tolerant_db
        system_status = fault_tolerant_db.get_system_status()
        
        return {
            "status": "healthy" if system_status['health']['overall'] else "degraded",
            "mode": system_status['mode'],
            "timestamp": system_status['timestamp'],
            "components": {
                "postgresql": system_status['health']['postgresql']['status'],
                "supabase": system_status['health']['supabase']['status'],
                "cache": system_status['cache']['total_items'] > 0,
                "queue": system_status['queue']['total_operations']
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": "2025-01-01T00:00:00Z"
        }

# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/monitoring/status")
async def monitoring_status():
    """–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global system_monitor
    
    if not system_monitor:
        return {"status": "monitoring_not_initialized"}
    
    return system_monitor.get_monitoring_status()

# Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
@app.post("/admin/sync")
async def force_sync():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        from database.fault_tolerant_service import fault_tolerant_db
        result = fault_tolerant_db.force_sync_all_pending()
        
        return {
            "status": "success",
            "message": "Sync operation completed",
            "result": result,
            "timestamp": "2025-01-01T00:00:00Z"
        }
    except Exception as e:
        logger.error(f"Force sync failed: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": "2025-01-01T00:00:00Z"
        }

if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ - –ü–û–†–¢ 8001
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8001"))  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ—Ä—Ç 8001
    reload = os.getenv("RELOAD", "false").lower() == "true"
    
    logger.info(f"üåê Starting server on {host}:{port}")
    logger.info(f"üìö API Documentation: http://{host}:{port}/docs")
    logger.info(f"üìä Dashboard: http://{host}:{port}/dashboard/")
    logger.info(f"üîç Health Check: http://{host}:{port}/health")
    
    uvicorn.run(
        "main_api:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )
