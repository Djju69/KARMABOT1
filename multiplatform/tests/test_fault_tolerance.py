"""
–¢–µ—Å—Ç—ã –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.fault_tolerant_service import fault_tolerant_db

class TestFaultTolerance:
    """–¢–µ—Å—Ç—ã –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.test_user_id = 999999999
        self.test_user_data = {
            'username': 'test_user',
            'first_name': 'Test User'
        }
        print("üîß Setting up test environment...")
    
    def test_system_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        assert fault_tolerant_db is not None
        status = fault_tolerant_db.get_system_status()
        assert 'health' in status
        assert 'mode' in status
        print(f"‚úÖ System initialized with mode: {status['mode']}")
    
    def test_health_monitoring(self):
        """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î"""
        health_status = fault_tolerant_db.health_monitor.get_health_status()
        assert 'postgresql' in health_status
        assert 'supabase' in health_status
        assert 'overall' in health_status
        print(f"‚úÖ Health monitoring: PostgreSQL={health_status['postgresql']['status']}, Supabase={health_status['supabase']['status']}")
    
    def test_user_creation_with_fallback(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        success = fault_tolerant_db.create_user_with_fallback(
            self.test_user_id,
            self.test_user_data,
            'telegram'
        )
        assert success
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        user_info = fault_tolerant_db.get_user_with_fallback(self.test_user_id, 'telegram')
        assert user_info is not None
        print(f"‚úÖ User created with fallback: {self.test_user_id}")
    
    def test_order_creation_with_fallback(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fault_tolerant_db.create_user_with_fallback(self.test_user_id + 1, self.test_user_data, 'telegram')
        
        order_data = {
            'items': [{'name': 'Test Product', 'price': 100.0}],
            'total_amount': 100.0,
            'currency': 'USD'
        }
        
        order_id = fault_tolerant_db.create_order_with_fallback(self.test_user_id + 1, order_data, 'telegram')
        assert order_id is not None
        print(f"‚úÖ Order created with fallback: {order_id}")
    
    def test_loyalty_info_with_fallback(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        loyalty_info = fault_tolerant_db.get_loyalty_with_fallback(self.test_user_id, 'telegram')
        assert loyalty_info is not None
        assert 'current_points' in loyalty_info
        assert 'source' in loyalty_info
        print(f"‚úÖ Loyalty info retrieved: {loyalty_info['current_points']} points")
    
    def test_operation_queue(self):
        """–¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        queue_stats = fault_tolerant_db.operation_queue.get_queue_stats()
        assert 'total_operations' in queue_stats
        print(f"‚úÖ Operation queue: {queue_stats['total_operations']} operations")
    
    def test_local_cache(self):
        """–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞"""
        cache = fault_tolerant_db.local_cache
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        cache.set("test_key", {"test": "data"}, ttl=60)
        cached_data = cache.get("test_key")
        assert cached_data is not None
        assert cached_data['test'] == "data"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        cache.set_user_data("test_user", "telegram", {"points": 100})
        user_cache = cache.get_user_data("test_user", "telegram")
        assert user_cache is not None
        assert user_cache['points'] == 100
        
        print("‚úÖ Local cache works")
    
    def test_system_mode_detection(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        status = fault_tolerant_db.get_system_status()
        mode = status['mode']
        assert mode in ['FULL_OPERATIONAL', 'MAIN_DB_ONLY', 'LOYALTY_ONLY', 'CACHE_ONLY']
        print(f"‚úÖ System mode detected: {mode}")
    
    def test_uptime_statistics(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ uptime"""
        uptime_stats = fault_tolerant_db.health_monitor.get_uptime_stats()
        assert 'postgresql' in uptime_stats
        assert 'supabase' in uptime_stats
        assert 'overall' in uptime_stats
        print(f"‚úÖ Uptime stats: PostgreSQL={uptime_stats['postgresql']}%, Supabase={uptime_stats['supabase']}%")

if __name__ == "__main__":
    test = TestFaultTolerance()
    print("üöÄ Starting fault tolerance tests...\n")
    
    try:
        test.test_system_initialization()
        test.test_health_monitoring()
        test.test_user_creation_with_fallback()
        test.test_order_creation_with_fallback()
        test.test_loyalty_info_with_fallback()
        test.test_operation_queue()
        test.test_local_cache()
        test.test_system_mode_detection()
        test.test_uptime_statistics()
        
        print("\nüéâ All fault tolerance tests passed!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
