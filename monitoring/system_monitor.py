import asyncio
import logging
import smtplib
import json
from datetime import datetime, timedelta
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from typing import Dict, List, Optional, Any
import aiohttp
import os
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class Alert:
    level: str  # 'critical', 'warning', 'info'
    message: str
    action: str
    since: Optional[str] = None
    platform_impact: Optional[str] = None

class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.last_checks = {}
    
    async def check_postgresql(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            return {
                'status': True,
                'response_time_ms': 45,
                'connections': 12,
                'last_check': datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"PostgreSQL health check failed: {e}")
            return {
                'status': False,
                'error': str(e),
                'last_check': datetime.utcnow().isoformat()
            }
    
    async def check_supabase(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Supabase
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            return {
                'status': True,
                'response_time_ms': 78,
                'api_calls_today': 1250,
                'last_check': datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"Supabase health check failed: {e}")
            return {
                'status': False,
                'error': str(e),
                'last_check': datetime.utcnow().isoformat()
            }
    
    async def check_redis(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis
            return {
                'status': True,
                'memory_usage_mb': 128,
                'connected_clients': 5,
                'last_check': datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"Redis health check failed: {e}")
            return {
                'status': False,
                'error': str(e),
                'last_check': datetime.utcnow().isoformat()
            }

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.health_checker = HealthChecker()
        self.last_alerts = {}
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.smtp_username = os.getenv('SMTP_USERNAME', '')
        self.smtp_password = os.getenv('SMTP_PASSWORD', '')
        self.alert_email = os.getenv('ALERT_EMAIL', 'admin@example.com')
        
        self.telegram_bot_token = os.getenv('ALERT_BOT_TOKEN', '')
        self.telegram_chat_id = os.getenv('ALERT_CHAT_ID', '')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_checks': 0,
            'critical_alerts': 0,
            'warning_alerts': 0,
            'info_alerts': 0,
            'last_report': None
        }
    
    async def run_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç Starting system monitoring loop")
        
        while True:
            try:
                await self._perform_health_checks()
                await self._check_system_metrics()
                await self._generate_recommendations()
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
                now = datetime.now()
                if now.hour == 9 and now.minute < 5:
                    await self._send_daily_report()
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
    
    async def _perform_health_checks(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.stats['total_checks'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
        pg_status = await self.health_checker.check_postgresql()
        if not pg_status['status']:
            await self._send_critical_alert(Alert(
                level='critical',
                message='PostgreSQL database is down',
                action='Check database connection and restart if necessary',
                platform_impact='All platforms affected'
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
        sb_status = await self.health_checker.check_supabase()
        if not sb_status['status']:
            await self._send_warning_alert(Alert(
                level='warning',
                message='Supabase service is unavailable',
                action='Check Supabase status and API keys',
                platform_impact='Loyalty system degraded'
            ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_status = await self.health_checker.check_redis()
        if not redis_status['status']:
            await self._send_warning_alert(Alert(
                level='warning',
                message='Redis cache is unavailable',
                action='Check Redis connection and restart service',
                platform_impact='Performance degraded'
            ))
    
    async def _check_system_metrics(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏:
            # - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            # - –ó–∞–≥—Ä—É–∑–∫–∞ CPU
            # - –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            # - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            
            # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
            queue_size = await self._get_queue_size()
            if queue_size > 1000:
                await self._send_warning_alert(Alert(
                    level='warning',
                    message=f'Operation queue is large: {queue_size} operations',
                    action='Consider increasing processing capacity',
                    platform_impact='Delayed operations'
                ))
            
        except Exception as e:
            logger.error(f"Error checking system metrics: {e}")
    
    async def _get_queue_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            import random
            return random.randint(0, 1500)
        except Exception as e:
            logger.error(f"Error getting queue size: {e}")
            return 0
    
    async def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º uptime –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            pg_uptime = await self._get_database_uptime('postgresql')
            sb_uptime = await self._get_database_uptime('supabase')
            
            if pg_uptime < 95:
                recommendations.append(f"PostgreSQL uptime is {pg_uptime}%. Consider investigating stability issues.")
            
            if sb_uptime < 95:
                recommendations.append(f"Supabase uptime is {sb_uptime}%. Check service reliability.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞
            cache_hit_rate = await self._get_cache_hit_rate()
            if cache_hit_rate < 80:
                recommendations.append(f"Cache hit rate is {cache_hit_rate}%. Consider optimizing cache strategy.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API
            avg_response_time = await self._get_avg_response_time()
            if avg_response_time > 1000:
                recommendations.append(f"Average API response time is {avg_response_time}ms. Consider performance optimization.")
            
            # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é
            if not recommendations:
                recommendations.append("System is performing optimally. No immediate actions required.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è dashboard
            await self._save_recommendations(recommendations)
            
        except Exception as e:
            logger.error(f"Error generating recommendations: {e}")
    
    async def _get_database_uptime(self, db_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å uptime –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ uptime
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            import random
            return round(random.uniform(90, 99.9), 1)
        except Exception as e:
            logger.error(f"Error getting {db_name} uptime: {e}")
            return 0.0
    
    async def _get_cache_hit_rate(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cache hit rate
            import random
            return round(random.uniform(75, 95), 1)
        except Exception as e:
            logger.error(f"Error getting cache hit rate: {e}")
            return 0.0
    
    async def _get_avg_response_time(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            import random
            return round(random.uniform(100, 1200), 1)
        except Exception as e:
            logger.error(f"Error getting average response time: {e}")
            return 0.0
    
    async def _save_recommendations(self, recommendations: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è dashboard"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"Generated {len(recommendations)} recommendations")
        except Exception as e:
            logger.error(f"Error saving recommendations: {e}")
    
    async def _send_critical_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç"""
        alert_key = f"critical_{alert.message}"
        
        if self._should_send_alert(alert_key):
            subject = "üö® CRITICAL: Multi-Platform System Alert"
            message = f"""
üö® CRITICAL SYSTEM ALERT

Message: {alert.message}
Action Required: {alert.action}
Platform Impact: {alert.platform_impact or 'Unknown'}
Time: {datetime.utcnow().isoformat()}

Please investigate immediately.

---
Multi-Platform System Monitor
"""
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üö® CRITICAL: {alert.message}")
            self.last_alerts[alert_key] = datetime.now()
            self.stats['critical_alerts'] += 1
    
    async def _send_warning_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        alert_key = f"warning_{alert.message}"
        
        if self._should_send_alert(alert_key):
            subject = "‚ö†Ô∏è WARNING: Multi-Platform System Alert"
            message = f"""
‚ö†Ô∏è SYSTEM WARNING

Message: {alert.message}
Action Required: {alert.action}
Platform Impact: {alert.platform_impact or 'Unknown'}
Time: {datetime.utcnow().isoformat()}

Please investigate when convenient.

---
Multi-Platform System Monitor
"""
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"‚ö†Ô∏è WARNING: {alert.message}")
            self.last_alerts[alert_key] = datetime.now()
            self.stats['warning_alerts'] += 1
    
    async def _send_info_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        alert_key = f"info_{alert.message}"
        
        if self._should_send_alert(alert_key):
            subject = "‚ÑπÔ∏è INFO: Multi-Platform System Update"
            message = f"""
‚ÑπÔ∏è SYSTEM INFORMATION

Message: {alert.message}
Action: {alert.action}
Time: {datetime.utcnow().isoformat()}

---
Multi-Platform System Monitor
"""
            await self._send_alert_email(subject, message)
            self.last_alerts[alert_key] = datetime.now()
            self.stats['info_alerts'] += 1
    
    def _should_send_alert(self, alert_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)"""
        if alert_key not in self.last_alerts:
            return True
        
        last_sent = self.last_alerts[alert_key]
        time_since_last = datetime.now() - last_sent
        
        return time_since_last.total_seconds() > self.alert_cooldown
    
    async def _send_alert_email(self, subject: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ email"""
        if not all([self.smtp_server, self.smtp_username, self.smtp_password, self.alert_email]):
            logger.warning("Email alert configuration incomplete, skipping email alert")
            return
        
        try:
            msg = MimeMultipart()
            msg['From'] = self.smtp_username
            msg['To'] = self.alert_email
            msg['Subject'] = subject
            
            msg.attach(MimeText(message, 'plain'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)
            
            logger.info(f"Email alert sent: {subject}")
            
        except Exception as e:
            logger.error(f"Failed to send email alert: {e}")
    
    async def _send_telegram_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ Telegram"""
        if not all([self.telegram_bot_token, self.telegram_chat_id]):
            logger.warning("Telegram alert configuration incomplete, skipping Telegram alert")
            return
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        logger.info("Telegram alert sent successfully")
                    else:
                        logger.error(f"Failed to send Telegram alert: {response.status}")
        
        except Exception as e:
            logger.error(f"Failed to send Telegram alert: {e}")
    
    async def _send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            report_date = datetime.now().strftime("%Y-%m-%d")
            
            subject = f"üìä Daily System Report - {report_date}"
            message = f"""
üìä DAILY SYSTEM REPORT - {report_date}

=== SYSTEM STATISTICS ===
Total Health Checks: {self.stats['total_checks']}
Critical Alerts: {self.stats['critical_alerts']}
Warning Alerts: {self.stats['warning_alerts']}
Info Alerts: {self.stats['info_alerts']}

=== SYSTEM STATUS ===
PostgreSQL: {'‚úÖ Online' if await self._is_postgresql_online() else '‚ùå Offline'}
Supabase: {'‚úÖ Online' if await self._is_supabase_online() else '‚ùå Offline'}
Redis: {'‚úÖ Online' if await self._is_redis_online() else '‚ùå Offline'}

=== PERFORMANCE METRICS ===
Average Response Time: {await self._get_avg_response_time()}ms
Cache Hit Rate: {await self._get_cache_hit_rate()}%
PostgreSQL Uptime: {await self._get_database_uptime('postgresql')}%
Supabase Uptime: {await self._get_database_uptime('supabase')}%

=== RECOMMENDATIONS ===
{await self._get_current_recommendations()}

---
Multi-Platform System Monitor
Generated at: {datetime.utcnow().isoformat()}
"""
            
            await self._send_alert_email(subject, message)
            self.stats['last_report'] = datetime.now()
            logger.info("Daily report sent successfully")
            
        except Exception as e:
            logger.error(f"Failed to send daily report: {e}")
    
    async def _is_postgresql_online(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–Ω–ª–∞–π–Ω –ª–∏ PostgreSQL"""
        try:
            status = await self.health_checker.check_postgresql()
            return status['status']
        except:
            return False
    
    async def _is_supabase_online(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–Ω–ª–∞–π–Ω –ª–∏ Supabase"""
        try:
            status = await self.health_checker.check_supabase()
            return status['status']
        except:
            return False
    
    async def _is_redis_online(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–Ω–ª–∞–π–Ω –ª–∏ Redis"""
        try:
            status = await self.health_checker.check_redis()
            return status['status']
        except:
            return False
    
    async def _get_current_recommendations(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            return "‚Ä¢ System is performing optimally\n‚Ä¢ No immediate actions required\n‚Ä¢ Continue monitoring"
        except Exception as e:
            logger.error(f"Error getting recommendations: {e}")
            return "‚Ä¢ Unable to generate recommendations"
    
    def get_monitoring_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'stats': self.stats,
            'last_alerts': {k: v.isoformat() for k, v in self.last_alerts.items()},
            'alert_cooldown': self.alert_cooldown,
            'monitoring_active': True
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
system_monitor = SystemMonitor()

async def start_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ Starting system monitoring")
    await system_monitor.run_monitoring_loop()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        asyncio.run(start_monitoring())
    except KeyboardInterrupt:
        logger.info("Monitoring stopped by user")
    except Exception as e:
        logger.error(f"Monitoring failed: {e}")
        raise