"""
–ú–∏–≥—Ä–∞—Ü–∏—è 021: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã partners_v2 –¥–ª—è PostgreSQL
"""

import asyncpg
import logging

logger = logging.getLogger(__name__)

async def upgrade_021(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã partners_v2"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É partners_v2
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS partners_v2 (
                id SERIAL PRIMARY KEY,
                tg_user_id BIGINT UNIQUE NOT NULL,
                display_name VARCHAR(255),
                phone VARCHAR(50),
                email VARCHAR(255),
                is_verified BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories_v2
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS categories_v2 (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                slug VARCHAR(50) UNIQUE NOT NULL,
                emoji VARCHAR(10),
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                priority_level INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É cards_v2
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS cards_v2 (
                id SERIAL PRIMARY KEY,
                partner_id INTEGER REFERENCES partners_v2(id) ON DELETE CASCADE,
                category_id INTEGER REFERENCES categories_v2(id) ON DELETE RESTRICT,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                address VARCHAR(500),
                contact VARCHAR(255),
                google_maps_url VARCHAR(500),
                discount_text TEXT,
                status VARCHAR(50) DEFAULT 'pending',
                priority_level INTEGER DEFAULT 0,
                view_count INTEGER DEFAULT 0,
                is_featured BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_partners_v2_tg_user_id ON partners_v2(tg_user_id);
            CREATE INDEX IF NOT EXISTS idx_categories_v2_slug ON categories_v2(slug);
            CREATE INDEX IF NOT EXISTS idx_cards_v2_partner_id ON cards_v2(partner_id);
            CREATE INDEX IF NOT EXISTS idx_cards_v2_category_id ON cards_v2(category_id);
            CREATE INDEX IF NOT EXISTS idx_cards_v2_status ON cards_v2(status);
        """)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await conn.execute("""
            INSERT INTO categories_v2 (name, slug, emoji, description, is_active, priority_level)
            VALUES 
                ('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'restaurants', 'üçΩÔ∏è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ', TRUE, 10),
                ('–°–ü–ê –∏ –∫—Ä–∞—Å–æ—Ç–∞', 'spa', 'üíÜ', '–°–ü–ê, —Å–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã', TRUE, 9),
                ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'transport', 'üöó', '–¢–∞–∫—Å–∏, –∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ', TRUE, 8),
                ('–û—Ç–µ–ª–∏', 'hotels', 'üè®', '–û—Ç–µ–ª–∏ –∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã', TRUE, 7),
                ('–¢—É—Ä—ã', 'tours', '‚úàÔ∏è', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏', TRUE, 6),
                ('–ú–∞–≥–∞–∑–∏–Ω—ã', 'shops', 'üõçÔ∏è', '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', TRUE, 5)
            ON CONFLICT (slug) DO NOTHING
        """)
        
        logger.info("Migration 021 applied successfully: Created partners_v2, categories_v2, cards_v2 tables")
        
    except Exception as e:
        logger.error(f"Error applying migration 021: {str(e)}")
        raise

async def downgrade_021(conn):
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 021"""
    try:
        await conn.execute("DROP TABLE IF EXISTS cards_v2")
        await conn.execute("DROP TABLE IF EXISTS categories_v2")
        await conn.execute("DROP TABLE IF EXISTS partners_v2")
        
        logger.info("Migration 021 downgraded successfully")
        
    except Exception as e:
        logger.error(f"Error downgrading migration 021: {str(e)}")
        raise
