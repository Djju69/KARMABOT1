"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""
import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.getcwd())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class IntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.results = {}
    
    async def test_integrations(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self.test_database_integration()
        await self.test_service_integration()
        await self.test_webapp_integration()
        await self.test_notification_integration()
        await self.test_analytics_integration()
        
        return self.results
    
    async def test_database_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ë–î...")
        
        try:
            from core.database.db_adapter import db_v2
            
            # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –ë–î
            test_user = await db_v2.get_or_create_user(
                telegram_id=888888888,
                username="integration_test",
                first_name="Integration",
                last_name="Test"
            )
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            categories = await db_v2.get_categories()
            partners = await db_v2.get_partners_by_status('approved')
            
            success = test_user is not None
            self.results['database_integration'] = {
                'success': success,
                'message': f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bool(test_user)}, –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}, –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {len(partners)}",
                'data': {'user_created': bool(test_user), 'categories': len(categories), 'partners': len(partners)}
            }
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['database_integration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
    
    async def test_service_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            from core.services.loyalty_service import loyalty_service
            from core.services.analytics_service import analytics_service
            from core.services.notification_service import notification_service
            
            test_user_id = 888888888
            
            # –¢–µ—Å—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            balance = await loyalty_service.get_user_points_balance(test_user_id)
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            user_metrics = await analytics_service.get_user_metrics()
            
            # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = await notification_service.get_user_notifications(test_user_id)
            
            success = all([balance is not None, user_metrics is not None, notifications is not None])
            self.results['service_integration'] = {
                'success': success,
                'message': f"–õ–æ—è–ª—å–Ω–æ—Å—Ç—å: {balance}, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {user_metrics.total_users}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(notifications)}",
                'data': {'loyalty_balance': balance, 'analytics_users': user_metrics.total_users, 'notifications': len(notifications)}
            }
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['service_integration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    async def test_webapp_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebApp"""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é WebApp...")
        
        try:
            from core.services.webapp_integration import WebAppIntegration
            
            webapp = WebAppIntegration()
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
            user_url = webapp.create_webapp_url(
                telegram_id=888888888,
                role="user",
                webapp_path="/user-cabinet.html"
            )
            
            partner_url = webapp.create_webapp_url(
                telegram_id=888888887,
                role="partner",
                webapp_path="/partner-cabinet.html"
            )
            
            admin_url = webapp.create_webapp_url(
                telegram_id=888888886,
                role="admin",
                webapp_path="/admin-cabinet.html"
            )
            
            success = all([user_url, partner_url, admin_url])
            self.results['webapp_integration'] = {
                'success': success,
                'message': f"URL —Å–æ–∑–¥–∞–Ω—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bool(user_url)}, –ü–∞—Ä—Ç–Ω–µ—Ä: {bool(partner_url)}, –ê–¥–º–∏–Ω: {bool(admin_url)}",
                'data': {'user_url': bool(user_url), 'partner_url': bool(partner_url), 'admin_url': bool(admin_url)}
            }
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è WebApp: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['webapp_integration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebApp: {e}")
    
    async def test_notification_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            from core.services.notification_service import notification_service, NotificationType, AlertLevel
            
            test_user_id = 888888888
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_sent = await notification_service.send_notification(
                user_id=test_user_id,
                title="–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                message="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                notification_type=NotificationType.INFO
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
            alert_id = await notification_service.create_alert(
                title="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
                message="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                level=AlertLevel.MEDIUM,
                category="integration_test"
            )
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = await notification_service.get_user_notifications(test_user_id)
            
            success = notification_sent and alert_id
            self.results['notification_integration'] = {
                'success': success,
                'message': f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_sent}, –ê–ª–µ—Ä—Ç: {bool(alert_id)}, –ü–æ–ª—É—á–µ–Ω–æ: {len(notifications)}",
                'data': {'notification_sent': notification_sent, 'alert_created': bool(alert_id), 'notifications_count': len(notifications)}
            }
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['notification_integration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def test_analytics_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        try:
            from core.services.analytics_service import analytics_service
            from core.services.performance_service import performance_service
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            user_metrics = await analytics_service.get_user_metrics()
            partner_metrics = await analytics_service.get_partner_metrics()
            transaction_metrics = await analytics_service.get_transaction_metrics()
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_stats = await performance_service.get_performance_stats()
            
            success = all([
                user_metrics is not None,
                partner_metrics is not None,
                transaction_metrics is not None,
                perf_stats is not None
            ])
            
            self.results['analytics_integration'] = {
                'success': success,
                'message': f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_metrics.total_users}, –ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partner_metrics.total_partners}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_metrics.total_transactions}",
                'data': {
                    'users': user_metrics.total_users,
                    'partners': partner_metrics.total_partners,
                    'transactions': transaction_metrics.total_transactions,
                    'perf_metrics': len(perf_stats.get('metrics', {}))
                }
            }
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['analytics_integration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = IntegrationTester()
    results = await tester.test_integrations()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø–ú:")
    
    total_tests = len(results)
    passed_tests = sum(1 for r in results.values() if r['success'])
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        logger.info(f"{status} {test_name}: {result['message']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    import json
    report = {
        'summary': {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'failed_tests': total_tests - passed_tests,
            'success_rate': round(success_rate, 2)
        },
        'results': results,
        'timestamp': datetime.now().isoformat()
    }
    
    with open('integrations_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    logger.info("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ integrations_report.json")
    
    return report


if __name__ == "__main__":
    asyncio.run(main())
