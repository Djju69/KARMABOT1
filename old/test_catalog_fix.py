#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
"""
import os
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_catalog_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        from core.handlers.category_handlers_v2 import on_restaurants, on_spa, on_transport
        from core.keyboards.reply_v2 import get_categories_keyboard, get_restaurants_reply_keyboard
        from core.utils.telemetry import log_event
        
        logger.info("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = get_categories_keyboard('ru')
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
        
        restaurants_keyboard = get_restaurants_reply_keyboard('ru')
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {len(restaurants_keyboard.keyboard)} —Ä—è–¥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é log_event
        await log_event("test_event", user=None, test_field="test_value")
        logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è log_event —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return False

async def test_cabinet_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        from core.keyboards.unified_menu import get_user_cabinet_keyboard
        from core.handlers.cabinet_router import view_history_handler
        from core.handlers.profile import on_my_cards
        
        logger.info("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_user_cabinet_keyboard('ru')
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.keyboard)} —Ä—è–¥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        return False

async def test_database_queries():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database.db_v2 import db_v2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = db_v2.get_categories()
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(categories)} —à—Ç—É–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = db_v2.get_cards_by_category(1)  # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
        logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã: {len(cards)} —à—Ç—É–∫")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    tests = [
        ("–§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", test_catalog_functions),
        ("–§—É–Ω–∫—Ü–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞", test_cabinet_functions),
        ("–ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", test_database_queries),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–ï–°–¢: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = await test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        logger.warning("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main())
