#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase
"""
import os
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        logger.info("üí° –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL")
        return False
    
    logger.info(f"‚úÖ DATABASE_URL: {db_url[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if db_url.startswith("postgresql://"):
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL (Supabase)")
        return True
    elif db_url.startswith("sqlite://"):
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
        logger.info("üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–µ–Ω PostgreSQL (Supabase)")
        return False
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ë–î: {db_url[:20]}...")
        return False

def check_migrations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–≥—Ä–∞—Ü–∏–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    apply_migrations = os.getenv("APPLY_MIGRATIONS", "0")
    logger.info(f"APPLY_MIGRATIONS: {apply_migrations}")
    
    if apply_migrations == "1":
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APPLY_MIGRATIONS=1 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
        return False

async def test_supabase_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    
    try:
        import asyncpg
        
        db_url = os.getenv("DATABASE_URL")
        if not db_url or not db_url.startswith("postgresql://"):
            logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è PostgreSQL")
            return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        version = await conn.fetchval("SELECT version()")
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –í–µ—Ä—Å–∏—è: {version[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        if tables:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.info(f"  üìã {table['table_name']}")
            if len(tables) > 5:
                logger.info(f"  ... –∏ –µ—â–µ {len(tables) - 5} —Ç–∞–±–ª–∏—Ü")
        else:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logger.info("üí° –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (APPLY_MIGRATIONS=1)")
        
        await conn.close()
        return True
        
    except ImportError:
        logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_ok = check_env_vars()
    migrations_ok = check_migrations()
    
    if not env_ok:
        logger.error("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        logger.info("üìã –†–ï–®–ï–ù–ò–ï:")
        logger.info("1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Supabase")
        logger.info("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Connection string")
        logger.info("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APPLY_MIGRATIONS=1")
        return False
    
    if not migrations_ok:
        logger.warning("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        logger.info("üìã –†–ï–®–ï–ù–ò–ï:")
        logger.info("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APPLY_MIGRATIONS=1")
        logger.info("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        result = asyncio.run(test_supabase_connection())
        if result:
            logger.info("\nüéâ –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –ö–û–†–†–ï–ö–¢–ù–´!")
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã")
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å")
        else:
            logger.error("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú")
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    return True

if __name__ == "__main__":
    main()
