"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã KARMABOT1
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.getcwd())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SystemTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {}
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await self.test_database_connection()
        await self.test_loyalty_system()
        await self.test_analytics()
        await self.test_performance()
        await self.test_notifications()
        await self.test_webapp_integration()
        await self.test_user_management()
        await self.test_partner_system()
        await self.test_admin_functions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self.generate_report()
    
    async def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        
        try:
            from core.database.db_adapter import db_v2
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await db_v2.get_all_users()
            self.record_test("database_users", True, f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = await db_v2.get_categories()
            self.record_test("database_categories", True, f"–ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
            partners = await db_v2.get_partners_by_status('approved')
            self.record_test("database_partners", True, f"–ù–∞–π–¥–µ–Ω–æ {len(partners)} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")
            
        except Exception as e:
            self.record_test("database_connection", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_loyalty_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üíé –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            from core.services.loyalty_service import loyalty_service
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–∞–ª–ª–æ–≤
            test_user_id = 123456789
            balance = await loyalty_service.get_user_points_balance(test_user_id)
            self.record_test("loyalty_balance", True, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance} –±–∞–ª–ª–æ–≤")
            
            # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤
            history = await loyalty_service.get_points_history(test_user_id, limit=5)
            self.record_test("loyalty_history", True, f"–ò—Å—Ç–æ—Ä–∏—è: {len(history)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            self.record_test("loyalty_system", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_analytics(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        try:
            from core.services.analytics_service import analytics_service
            
            # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_metrics = await analytics_service.get_user_metrics()
            self.record_test("analytics_users", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_metrics.total_users}")
            
            # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
            partner_metrics = await analytics_service.get_partner_metrics()
            self.record_test("analytics_partners", True, f"–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {partner_metrics.total_partners}")
            
            # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transaction_metrics = await analytics_service.get_transaction_metrics()
            self.record_test("analytics_transactions", True, f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_metrics.total_transactions}")
            
        except Exception as e:
            self.record_test("analytics", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        
        try:
            from core.services.performance_service import performance_service
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await performance_service.initialize()
            self.record_test("performance_init", True, "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await performance_service.get_performance_stats()
            self.record_test("performance_stats", True, f"–ú–µ—Ç—Ä–∏–∫: {len(stats.get('metrics', {}))}")
            
        except Exception as e:
            self.record_test("performance", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_notifications(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        try:
            from core.services.notification_service import notification_service, NotificationType
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            success = await notification_service.send_notification(
                user_id=123456789,
                title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                notification_type=NotificationType.INFO
            )
            self.record_test("notification_send", success, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = await notification_service.get_user_notifications(123456789)
            self.record_test("notification_get", True, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
            
        except Exception as e:
            self.record_test("notifications", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_webapp_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebApp"""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º WebApp...")
        
        try:
            from core.services.webapp_integration import WebAppIntegration
            
            webapp = WebAppIntegration()
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL
            url = webapp.create_webapp_url(
                telegram_id=123456789,
                role="user",
                webapp_path="/user-cabinet.html"
            )
            self.record_test("webapp_url", bool(url), f"URL —Å–æ–∑–¥–∞–Ω: {bool(url)}")
            
        except Exception as e:
            self.record_test("webapp", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_user_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        logger.info("üë• –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        
        try:
            from core.services.user_service import get_user_role
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
            role = await get_user_role(123456789)
            self.record_test("user_role", True, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}")
            
        except Exception as e:
            self.record_test("user_management", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_partner_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
        logger.info("ü§ù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤...")
        
        try:
            from core.database.db_adapter import db_v2
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
            partners = await db_v2.get_partners_by_status('pending')
            self.record_test("partner_system", True, f"–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(partners)}")
            
        except Exception as e:
            self.record_test("partner_system", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_admin_functions(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üëë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        try:
            from core.services.tariff_service import TariffService
            
            tariff_service = TariffService()
            tariffs = await tariff_service.get_all_tariffs()
            self.record_test("admin_tariffs", True, f"–¢–∞—Ä–∏—Ñ–æ–≤: {len(tariffs)}")
            
        except Exception as e:
            self.record_test("admin_functions", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def record_test(self, test_name: str, success: bool, message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if success:
            self.passed_tests += 1
            logger.info(f"‚úÖ {test_name}: {message}")
        else:
            self.failed_tests += 1
            logger.error(f"‚ùå {test_name}: {message}")
        
        self.results[test_name] = {
            'success': success,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        report = {
            'summary': {
                'total_tests': self.total_tests,
                'passed_tests': self.passed_tests,
                'failed_tests': self.failed_tests,
                'success_rate': round(success_rate, 2)
            },
            'results': self.results,
            'timestamp': datetime.now().isoformat()
        }
        
        logger.info("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:")
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        return report


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SystemTester()
    report = await tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    import json
    with open('test_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    logger.info("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json")
    
    return report


if __name__ == "__main__":
    asyncio.run(main())
