#!/usr/bin/env python3
"""
Railway Deployment Readiness Check
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""

import os
import sys
import subprocess
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from web.main import app
        print("‚úÖ Web app –∏–º–ø–æ—Ä—Ç: OK")
        
        from bot.bot import bot
        print("‚úÖ Bot –∏–º–ø–æ—Ä—Ç: OK")
        
        from core.database import get_db
        print("‚úÖ Database –∏–º–ø–æ—Ä—Ç: OK")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    if not os.path.exists("requirements.txt"):
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("requirements.txt", "r") as f:
            requirements = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        key_deps = [
            "fastapi",
            "uvicorn",
            "aiogram",
            "sqlalchemy",
            "redis",
            "python-jose"
        ]
        
        missing_deps = []
        for dep in key_deps:
            if dep not in requirements:
                missing_deps.append(dep)
        
        if missing_deps:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway"""
    if not os.path.exists("railway.json"):
        print("‚ùå railway.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import json
        with open("railway.json", "r") as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        checks = [
            ("build.builder", "nixpacks"),
            ("deploy.startCommand", "python start.py"),
            ("deploy.healthcheckPath", "/health"),
            ("plugins", "postgresql"),
            ("plugins", "redis")
        ]
        
        all_good = True
        for check_path, expected in checks:
            if check_path == "plugins":
                plugins = config.get("plugins", [])
                if not any(p.get("name") == expected for p in plugins):
                    print(f"‚ùå –ü–ª–∞–≥–∏–Ω {expected} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    all_good = False
            else:
                keys = check_path.split(".")
                value = config
                for key in keys:
                    value = value.get(key)
                    if value is None:
                        break
                
                if value != expected:
                    print(f"‚ùå {check_path}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}', –ø–æ–ª—É—á–µ–Ω–æ '{value}'")
                    all_good = False
        
        if all_good:
            print("‚úÖ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        return all_good
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è railway.json: {e}")
        return False

def check_dockerfile():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Dockerfile"""
    if not os.path.exists("Dockerfile"):
        print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("Dockerfile", "r") as f:
            dockerfile = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        checks = [
            "FROM python:",
            "WORKDIR /app",
            "COPY requirements.txt",
            "RUN pip install",
            "COPY . .",
            "EXPOSE 8080",
            "CMD [\"python\", \"start.py\"]"
        ]
        
        missing = []
        for check in checks:
            if check not in dockerfile:
                missing.append(check)
        
        if missing:
            print(f"‚ùå –í Dockerfile –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            return False
        else:
            print("‚úÖ Dockerfile –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Dockerfile: {e}")
        return False

def check_start_script():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç start.py"""
    if not os.path.exists("start.py"):
        print("‚ùå start.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("start.py", "r") as f:
            start_script = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        checks = [
            "validate_environment",
            "run_bot",
            "run_web_server",
            "asyncio.run(main())"
        ]
        
        missing = []
        for check in checks:
            if check not in start_script:
                missing.append(check)
        
        if missing:
            print(f"‚ùå –í start.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            return False
        else:
            print("‚úÖ start.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è start.py: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ Railway Deployment Readiness Check")
    print("=" * 50)
    
    checks = [
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", lambda: all([
            check_file_exists("requirements.txt", "Requirements"),
            check_file_exists("railway.json", "Railway config"),
            check_file_exists("Dockerfile", "Dockerfile"),
            check_file_exists("start.py", "Start script"),
            check_file_exists("web/main.py", "Web app"),
            check_file_exists("bot/bot.py", "Bot module"),
            check_file_exists("core/database/__init__.py", "Database module")
        ])),
        ("Requirements", check_requirements),
        ("Railway config", check_railway_config),
        ("Dockerfile", check_dockerfile),
        ("Start script", check_start_script),
        ("–ò–º–ø–æ—Ä—Ç—ã", check_imports)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        print("-" * 30)
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("4. –î–µ–ø–ª–æ–π –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    else:
        print(f"‚ùå –ü–†–û–ô–î–ï–ù–û: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
