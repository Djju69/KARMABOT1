import pytest
import asyncio
import json
import os
import sys
from datetime import datetime
from fastapi.testclient import TestClient

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from main import app
from api.platform_endpoints import *
from core.database.enhanced_unified_service import enhanced_unified_db

class TestAPIEndpoints:
    """–¢–µ—Å—Ç—ã –¥–ª—è API endpoints"""
    
    @pytest.fixture(autouse=True)
    def setup_api(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏"""
        self.client = TestClient(app)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        enhanced_unified_db.init_databases()
        yield
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    
    def test_root_endpoint(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint"""
        print("üß™ Testing root endpoint...")
        
        response = self.client.get("/")
        assert response.status_code == 200
        
        data = response.json()
        assert data["service"] == "üõ°Ô∏è Fault-Tolerant Multi-Platform System"
        assert data["version"] == "1.0.0"
        assert "platforms" in data
        assert "features" in data
        
        print("‚úÖ Root endpoint working correctly")
    
    def test_status_endpoint(self):
        """–¢–µ—Å—Ç endpoint —Å—Ç–∞—Ç—É—Å–∞"""
        print("üß™ Testing status endpoint...")
        
        response = self.client.get("/status")
        assert response.status_code == 200
        
        data = response.json()
        assert "status" in data
        assert "mode" in data
        assert "databases" in data
        assert "uptime" in data
        
        print("‚úÖ Status endpoint working correctly")
    
    def test_platforms_endpoint(self):
        """–¢–µ—Å—Ç endpoint –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        print("üß™ Testing platforms endpoint...")
        
        response = self.client.get("/v1/platforms")
        assert response.status_code == 200
        
        data = response.json()
        assert "platforms" in data
        assert "universal" in data
        assert "admin" in data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms = data["platforms"]
        expected_platforms = ["telegram", "website", "mobile", "desktop", "api"]
        
        for platform in expected_platforms:
            assert platform in platforms
        
        print("‚úÖ Platforms endpoint working correctly")
    
    def test_telegram_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram —á–µ—Ä–µ–∑ API"""
        print("üß™ Testing Telegram user creation via API...")
        
        user_data = {
            "telegram_id": 123456789,
            "username": "test_api_user",
            "first_name": "Test",
            "last_name": "API"
        }
        
        response = self.client.post("/v1/telegram/users/", json=user_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "user_uuid" in data
        assert data["platform"] == "telegram"
        
        print("‚úÖ Telegram user creation via API working correctly")
    
    def test_website_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Website —á–µ—Ä–µ–∑ API"""
        print("üß™ Testing Website user creation via API...")
        
        user_data = {
            "email": "test_api@example.com",
            "username": "test_web_user",
            "first_name": "Test",
            "last_name": "Web"
        }
        
        response = self.client.post("/v1/website/users/", json=user_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "user_uuid" in data
        assert data["platform"] == "website"
        
        print("‚úÖ Website user creation via API working correctly")
    
    def test_mobile_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mobile —á–µ—Ä–µ–∑ API"""
        print("üß™ Testing Mobile user creation via API...")
        
        user_data = {
            "device_id": "test_device_123",
            "platform": "ios",
            "username": "test_mobile_user",
            "first_name": "Test",
            "app_version": "1.0.0"
        }
        
        response = self.client.post("/v1/mobile/users/", json=user_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "user_uuid" in data
        assert data["platform"] == "mobile_ios"
        
        print("‚úÖ Mobile user creation via API working correctly")
    
    def test_desktop_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Desktop —á–µ—Ä–µ–∑ API"""
        print("üß™ Testing Desktop user creation via API...")
        
        user_data = {
            "user_id": "test_desktop_123",
            "platform": "windows",
            "username": "test_desktop_user",
            "first_name": "Test",
            "app_version": "1.0.0"
        }
        
        response = self.client.post("/v1/desktop/users/", json=user_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "user_uuid" in data
        assert data["platform"] == "desktop_windows"
        
        print("‚úÖ Desktop user creation via API working correctly")
    
    def test_order_creation_telegram(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram API"""
        print("üß™ Testing Telegram order creation via API...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {"telegram_id": 987654321, "first_name": "Order"}
        self.client.post("/v1/telegram/users/", json=user_data)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "items": [{"name": "Test Product", "price": 25.0}],
            "total_amount": 25.0,
            "currency": "USD"
        }
        
        response = self.client.post("/v1/telegram/users/987654321/orders", json=order_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "order_id" in data
        assert data["platform"] == "telegram"
        
        print("‚úÖ Telegram order creation via API working correctly")
    
    def test_cross_platform_order(self):
        """–¢–µ—Å—Ç –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        print("üß™ Testing cross-platform order via API...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        telegram_data = {"telegram_id": 111222333, "first_name": "Cross"}
        website_data = {"email": "cross@example.com", "first_name": "Cross"}
        
        self.client.post("/v1/telegram/users/", json=telegram_data)
        self.client.post("/v1/website/users/", json=website_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        order_data = {
            "user_identifiers": {
                "telegram_id": 111222333,
                "email": "cross@example.com"
            },
            "primary_platform": "telegram",
            "order_details": {
                "items": [{"name": "Cross Product", "price": 50.0}],
                "total_amount": 50.0,
                "currency": "USD"
            }
        }
        
        response = self.client.post("/v1/universal/orders/cross-platform", json=order_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "order_id" in data
        assert data["primary_platform"] == "telegram"
        
        print("‚úÖ Cross-platform order via API working correctly")
    
    def test_unified_loyalty(self):
        """–¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ Testing unified loyalty via API...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        telegram_data = {"telegram_id": 444555666, "first_name": "Loyalty"}
        website_data = {"email": "loyalty@example.com", "first_name": "Loyalty"}
        
        self.client.post("/v1/telegram/users/", json=telegram_data)
        self.client.post("/v1/website/users/", json=website_data)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        link_data = {"telegram_id": 444555666}
        self.client.post("/v1/website/users/loyalty@example.com/link-telegram", json=link_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
        identifiers = {
            "telegram_id": 444555666,
            "email": "loyalty@example.com"
        }
        
        response = self.client.post("/v1/universal/loyalty/unified", json=identifiers)
        assert response.status_code == 200
        
        data = response.json()
        assert "current_points" in data
        assert "partner_cards" in data
        
        print("‚úÖ Unified loyalty via API working correctly")
    
    def test_admin_health_endpoint(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ endpoint –∑–¥–æ—Ä–æ–≤—å—è"""
        print("üß™ Testing admin health endpoint...")
        
        response = self.client.get("/v1/admin/health")
        assert response.status_code == 200
        
        data = response.json()
        assert "status" in data
        assert "mode" in data
        assert "timestamp" in data
        assert "uptime" in data
        
        print("‚úÖ Admin health endpoint working correctly")
    
    def test_admin_status_with_auth(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        print("üß™ Testing admin status with authentication...")
        
        headers = {"Authorization": "Bearer admin_secret_token_2025"}
        response = self.client.get("/v1/admin/status", headers=headers)
        assert response.status_code == 200
        
        data = response.json()
        assert "system_status" in data
        assert "alerts" in data
        assert "recommendations" in data
        
        print("‚úÖ Admin status with auth working correctly")
    
    def test_api_key_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
        print("üß™ Testing API key validation...")
        
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º
        headers = {"X-API-Key": "pk_live_test123"}
        order_data = {
            "external_user_id": "test_external_123",
            "order_details": {
                "items": [{"name": "API Product", "price": 30.0}],
                "total_amount": 30.0
            }
        }
        
        response = self.client.post("/v1/api/orders", json=order_data, headers=headers)
        assert response.status_code == 200
        
        data = response.json()
        assert data["status"] == "success"
        assert "order_id" in data
        
        print("‚úÖ API key validation working correctly")
    
    def test_invalid_api_key(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º"""
        print("üß™ Testing invalid API key...")
        
        headers = {"X-API-Key": "invalid_key"}
        order_data = {
            "external_user_id": "test_external_123",
            "order_details": {"total_amount": 30.0}
        }
        
        response = self.client.post("/v1/api/orders", json=order_data, headers=headers)
        assert response.status_code == 403
        
        data = response.json()
        assert "detail" in data
        assert "Invalid API key" in data["detail"]
        
        print("‚úÖ Invalid API key rejection working correctly")
    
    def test_dashboard_endpoint(self):
        """–¢–µ—Å—Ç dashboard endpoint"""
        print("üß™ Testing dashboard endpoint...")
        
        response = self.client.get("/dashboard")
        assert response.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è HTML
        content = response.text
        assert "<!DOCTYPE html>" in content
        assert "Fault-Tolerant System Dashboard" in content
        
        print("‚úÖ Dashboard endpoint working correctly")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üß™ Testing error handling...")
        
        # –¢–µ—Å—Ç 404 –æ—à–∏–±–∫–∏
        response = self.client.get("/nonexistent-endpoint")
        assert response.status_code == 404
        
        data = response.json()
        assert "error" in data
        assert "Not Found" in data["error"]
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        invalid_user_data = {
            "telegram_id": -1,  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID
            "username": "test"
        }
        
        response = self.client.post("/v1/telegram/users/", json=invalid_user_data)
        assert response.status_code == 422  # Validation error
        
        print("‚úÖ Error handling working correctly")
    
    def test_cors_headers(self):
        """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        print("üß™ Testing CORS headers...")
        
        response = self.client.options("/v1/telegram/users/")
        assert response.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = response.headers
        assert "access-control-allow-origin" in headers
        assert "access-control-allow-methods" in headers
        
        print("‚úÖ CORS headers working correctly")

def run_api_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ API —Ç–µ—Å—Ç—ã"""
    print("üöÄ Starting API Endpoints Tests")
    print("=" * 60)
    
    test_suite = TestAPIEndpoints()
    test_suite.setup_api()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_suite.test_root_endpoint,
        test_suite.test_status_endpoint,
        test_suite.test_platforms_endpoint,
        test_suite.test_telegram_user_creation,
        test_suite.test_website_user_creation,
        test_suite.test_mobile_user_creation,
        test_suite.test_desktop_user_creation,
        test_suite.test_order_creation_telegram,
        test_suite.test_cross_platform_order,
        test_suite.test_unified_loyalty,
        test_suite.test_admin_health_endpoint,
        test_suite.test_admin_status_with_auth,
        test_suite.test_api_key_validation,
        test_suite.test_invalid_api_key,
        test_suite.test_dashboard_endpoint,
        test_suite.test_error_handling,
        test_suite.test_cors_headers
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} FAILED: {e}")
            failed += 1
    
    print("=" * 60)
    print(f"üèÅ API Tests completed: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("‚úÖ ALL API TESTS PASSED! API is fully operational.")
    else:
        print("‚ö†Ô∏è Some API tests failed. Please check the implementation.")
    
    return failed == 0

if __name__ == "__main__":
    success = run_api_tests()
    exit(0 if success else 1)
