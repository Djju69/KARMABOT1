#!/usr/bin/env python3
print("="*60)
print("üö® START.PY ‚Äî simplified startup logs")
print("‚è∞ TIME:", __import__('datetime').datetime.now())
print("="*60)

import os
import sys
import asyncio
import logging
import uvicorn
from pathlib import Path
from datetime import datetime

print("‚úÖ IMPORTS LOADED SUCCESSFULLY")

# ENV —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ —Ñ–æ—Ä—Å–∞)
print("üîß ENV DETECTED:")
print(f"  RAILWAY_ENVIRONMENT: {os.getenv('RAILWAY_ENVIRONMENT')}")
print(f"  DISABLE_POLLING: {os.getenv('DISABLE_POLLING')}")
print(f"  RAILWAY_STATIC_URL: {os.getenv('RAILWAY_STATIC_URL')}")
print("="*60)

# Add project root to path
project_root = str(Path(__file__).parent.absolute())
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Configure logging with UTF-8 encoding
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.handlers.RotatingFileHandler(
            'app.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
    ]
)
logger = logging.getLogger(__name__)

def is_railway_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Railway"""
    railway_env = os.getenv('RAILWAY_ENVIRONMENT')
    railway_url = os.getenv('RAILWAY_STATIC_URL')
    logger.info(f"üîç RAILWAY_ENVIRONMENT: '{railway_env}'")
    logger.info(f"üîç RAILWAY_STATIC_URL: '{railway_url}'")

    return bool(railway_env)

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['BOT_TOKEN', 'REDIS_URL', 'DATABASE_URL']
    missing_vars = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Odoo (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    odoo_vars = ['ODOO_URL', 'ODOO_DB', 'ODOO_USERNAME', 'ODOO_PASSWORD']
    odoo_missing = []
    for var in odoo_vars:
        value = os.getenv(var)
        if not value:
            odoo_missing.append(var)
    
    if odoo_missing:
        logger.warning(f"‚ö†Ô∏è Odoo variables missing: {', '.join(odoo_missing)}")
        logger.warning("üí° Odoo integration will be disabled")
    else:
        logger.info("‚úÖ Odoo variables found - integration enabled")
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è)
            logger.info(f"‚úÖ {var}: {'*' * min(len(value), 10)}...")
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway Dashboard -> Variables")
        sys.exit(1)
    
    logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Railway
    if is_railway_environment():
        raw_url = os.getenv('RAILWAY_STATIC_URL')
        if raw_url:
            app_url = raw_url if raw_url.startswith(('http://', 'https://')) else f"https://{raw_url}"
            webhook_url = f"{app_url}/webhook"
            logger.info(f"üåê Railway detected, webhook URL: {webhook_url}")
            os.environ['WEBHOOK_URL'] = webhook_url
        else:
            logger.warning("RAILWAY_STATIC_URL is not set; webhook URL cannot be constructed")
    else:
        logger.info("üíª Local environment: polling mode")

# Try to import web app with delay to avoid circular imports
APP = None
try:
    import time
    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    from web.main import app as web_app
    APP = web_app
    WEB_IMPORTED = True
except Exception as e:
    logger.warning(f"Failed to import web app: {e}")
    WEB_IMPORTED = False
    # Fallback to minimal health app to satisfy Railway healthcheck
    try:
        from health_app import app as health_app
        APP = health_app
        logger.info("Using fallback health_app for healthcheck")
    except Exception as ee:
        logger.warning(f"Fallback health_app unavailable: {ee}")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    logger.info("ü§ñ === BOT STARTUP BEGIN ===")
    logger.info("ü§ñ Starting bot initialization...")
    try:
        # Clear webhook before starting bot to avoid conflicts
        logger.info("üßπ Clearing webhook to avoid conflicts...")
        bot_token = os.getenv('BOT_TOKEN')
        logger.info(f"üîç BOT_TOKEN present: {bool(bot_token)}")

        if bot_token:
            logger.info(f"üîë Bot token length: {len(bot_token)}")
            # Try curl method first (more reliable)
            try:
                import subprocess
                logger.info("üåê Trying curl method for webhook cleanup...")
                result = subprocess.run([
                    'curl', '-s', '-X', 'POST',
                    f'https://api.telegram.org/bot{bot_token}/deleteWebhook?drop_pending_updates=true'
                ], capture_output=True, text=True, timeout=10)

                if result.returncode == 0 and '"ok":true' in result.stdout:
                    logger.info("‚úÖ Webhook cleared successfully via curl")
                else:
                    logger.warning(f"‚ö†Ô∏è Curl method failed: {result.stdout}")
                    # Fallback to aiogram method
                    logger.info("ü§ñ Trying aiogram method...")
                    from aiogram import Bot
                    bot = Bot(token=bot_token)
                    await bot.delete_webhook(drop_pending_updates=True)
                    await bot.session.close()
                    logger.info("‚úÖ Webhook cleared successfully via aiogram")

                # Avoid logOut/close to prevent 'Logged out' state from Telegram
            except Exception as e:
                logger.error(f"‚ùå Failed to clear webhook: {e}")
                logger.error("üí° Webhook cleanup failed, bot may have conflicts")
        else:
            logger.error("‚ùå BOT_TOKEN not found in environment variables!")
            logger.error("üí° Please set BOT_TOKEN in Railway Dashboard -> Variables")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ main_v2 (polling-—Ä–µ–∂–∏–º, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        logger.info("üì¶ Importing main_v2 (legacy stable entrypoint)...")
        from main_v2 import main as start_bot
        logger.info("‚úÖ main_v2 imported successfully")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ main_v2.py)
        logger.info("üöÄ Starting bot via main_v2.main()...")
        await start_bot()

    except ImportError as e:
        logger.error(f"‚ùå Bot import error: {e}", exc_info=True)
        raise
    except Exception as e:
        logger.error(f"‚ùå Bot startup error: {e}", exc_info=True)
        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
        logger.warning("‚ö†Ô∏è Bot failed to start, continuing with web server")

async def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    if APP is None:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ ASGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (web/health). –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞")
        return
        
    port = int(os.getenv("PORT", 8080))
    config = uvicorn.Config(
        APP,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )
    server = uvicorn.Server(config)
    logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    await server.serve()

async def main():
    """–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ Starting main application...")
    print("üö® DEBUG: Code updated at", datetime.now())  # Debug print
    validate_environment()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("‚úÖ Environment validation passed")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Odoo (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
    try:
        from odoo_connector import test_odoo_connection
        if await test_odoo_connection():
            logger.info("‚úÖ Odoo connection test passed")
        else:
            logger.warning("‚ö†Ô∏è Odoo connection test failed")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Odoo connection test error: {e}")

    # –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –ó–ê–ü–£–°–ö–ê
    is_railway = is_railway_environment()
    logger.info(f"üéØ Deployment mode: {'RAILWAY' if is_railway else 'LOCAL'}")

    # Railway: health server + polling (single mode, no contradictions in logs)
    if is_railway:
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN not found for Railway polling!")
            logger.error("üí° Please check Railway Variables for BOT_TOKEN")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (web.main –∏–ª–∏ health_app) –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∏–º–µ–º –≤–µ–±, –∑–∞—Ç–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫
        web_task = asyncio.create_task(run_web_server())
        await asyncio.sleep(2)
        bot_task = asyncio.create_task(run_bot())
        await asyncio.gather(web_task, bot_task)

    # Local: polling only
    else:
        logger.info("üíª LOCAL MODE: Starting polling only")
        bot_token = os.getenv("BOT_TOKEN")
        if bot_token:
            logger.info("ü§ñ BOT_TOKEN found, starting polling...")
            await run_bot()
        else:
            logger.error("‚ùå BOT_TOKEN not found for local polling!")
            logger.error("üí° Set BOT_TOKEN environment variable")
            return

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    
    # Print environment info
    logger.info(f"Python: {sys.version}")
    logger.info(f"Current directory: {os.getcwd()}")
    logger.info(f"Files in directory: {os.listdir('.')}")
    
    if os.path.exists('bot'):
        logger.info("Bot directory exists")
        logger.info(f"Files in bot directory: {os.listdir('bot')}")
    else:
        logger.error("Bot directory does not exist!")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

