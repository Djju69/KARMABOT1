"""
Payment Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–æ–π –±–∞–ª–ª–æ–≤
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–ò–ë–û –¢–†–ê–¢–ò–®–¨, –õ–ò–ë–û –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–®–¨
"""
import math
import logging
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –±–∞–ª–ª–æ–≤"""
    
    def __init__(self):
        self.redeem_rate = 5000.0  # 1 –±–∞–ª–ª = 5000 VND
        self.min_purchase_for_points = 10000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        self.max_discount_percent = 40.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∑–∞ –±–∞–ª–ª—ã
    
    async def process_sale(self, partner_id: int, place_id: int, operator_id: int,
                          user_id: int, amount_gross: float, points_to_spend: int = 0,
                          qr_token: str = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–æ–π –±–∞–ª–ª–æ–≤
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–ò–ë–û –¢–†–ê–¢–ò–®–¨, –õ–ò–ë–û –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–®–¨
        """
        try:
            from core.services.loyalty_service import loyalty_service
            from core.database.db_v2 import get_connection
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            place_data = await self._get_place_data(place_id)
            if not place_data:
                raise ValueError("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
            config = await self._get_loyalty_config()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            points_transaction = self.calculate_points_transaction(
                amount_gross=amount_gross,
                accrual_pct=place_data.get('loyalty_accrual_pct', 5.0),
                redeem_rate=config['redeem_rate'],
                points_to_spend=points_to_spend
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—å–≥–æ—Ç—ã
            calculation = await loyalty_service.calculate_purchase_benefits(
                user_id, place_id, amount_gross, points_to_spend
            )
            
            with get_connection() as conn:
                try:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
                    sale_id = await self._create_partner_sale(
                        partner_id=partner_id,
                        place_id=place_id,
                        operator_telegram_id=operator_id,
                        user_telegram_id=user_id,
                        amount_gross=amount_gross,
                        base_discount_pct=calculation['base_discount_pct'],
                        extra_discount_pct=calculation['extra_discount_pct'],
                        extra_value=calculation['amount_user_subsidy'],
                        amount_partner_due=calculation['amount_partner_due'],
                        amount_user_subsidy=calculation['amount_user_subsidy'],
                        points_spent=points_transaction['points_spent'],
                        points_earned=points_transaction['points_earned'],  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0!
                        redeem_rate=config['redeem_rate'],
                        qr_token=qr_token,
                        conn=conn
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
                    net_points_change = points_transaction['net_change']  # earned - spent
                    
                    if net_points_change != 0:
                        await loyalty_service.update_user_points_balance(user_id, net_points_change)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                    if points_transaction['points_spent'] > 0:
                        await loyalty_service.add_points_history(
                            user_id=user_id,
                            change_amount=-points_transaction['points_spent'],
                            reason=f"–û–ø–ª–∞—Ç–∞ –≤ {place_data['title']}",
                            transaction_type="spent",
                            sale_id=sale_id
                        )
                    
                    # –ù–ê–ß–ò–°–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï –¢–†–ê–¢–ò–õ–ò
                    if points_transaction['points_earned'] > 0:
                        await loyalty_service.add_points_history(
                            user_id=user_id,
                            change_amount=points_transaction['points_earned'],
                            reason=f"–ü–æ–∫—É–ø–∫–∞ –≤ {place_data['title']} (+{place_data.get('loyalty_accrual_pct', 5.0)}%) –ë–ï–ó —Ç—Ä–∞—Ç",
                            transaction_type="earned",
                            sale_id=sale_id
                        )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å –ö–û–†–†–ï–ö–¢–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    notification_text = self.format_sale_notification(
                        place=place_data,
                        amount_gross=amount_gross,
                        calculation=calculation,
                        points_transaction=points_transaction
                    )
                    
                    await self._add_notification(user_id, notification_text, "points_change", conn)
                    
                    conn.commit()
                    return {
                        'sale_id': sale_id,
                        'calculation': calculation,
                        'points_transaction': points_transaction,
                        'notification': notification_text
                    }
                    
                except Exception as e:
                    conn.rollback()
                    raise e
                    
        except Exception as e:
            logger.error(f"Error processing sale: {e}")
            raise
    
    def calculate_points_transaction(self, amount_gross: float, accrual_pct: float, 
                                   redeem_rate: float, points_to_spend: int = 0) -> Dict[str, Any]:
        """
        –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–ò–ë–û –¢–†–ê–¢–ò–®–¨, –õ–ò–ë–û –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–®–¨
        """
        
        if points_to_spend > 0:
            # –¢—Ä–∞—Ç–∏–º –±–∞–ª–ª—ã = –ù–ï–¢ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            return {
                'points_spent': points_to_spend,
                'points_earned': 0,
                'net_change': -points_to_spend,
                'operation_type': 'spending_only'
            }
        else:
            # –ù–µ —Ç—Ä–∞—Ç–∏–º –±–∞–ª–ª—ã = –ï–°–¢–¨ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            if amount_gross >= self.min_purchase_for_points:
                points_value = amount_gross * (accrual_pct / 100)
                points_earned = math.floor(points_value / redeem_rate)
            else:
                points_earned = 0
            
            return {
                'points_spent': 0,
                'points_earned': points_earned,
                'net_change': points_earned,
                'operation_type': 'earning_only'
            }
    
    def format_sale_notification(self, place: Dict[str, Any], amount_gross: float, 
                               calculation: Dict[str, Any], points_transaction: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        
        text = f"üõí –ü–æ–∫—É–ø–∫–∞ –≤ {place['title']}\n"
        text += f"üí∞ –°—É–º–º–∞: {amount_gross:,.0f}‚Ç´\n"
        text += f"üéÅ –°–∫–∏–¥–∫–∞: {calculation['total_discount_pct']:.1f}%\n"
        text += f"üí∏ –ö –¥–æ–ø–ª–∞—Ç–µ: {calculation['final_user_price']:,.0f}‚Ç´\n"
        
        if points_transaction['operation_type'] == 'spending_only':
            text += f"üíé –°–ø–∏—Å–∞–Ω–æ: {points_transaction['points_spent']} –±–∞–ª–ª–æ–≤\n"
            text += f"‚ÑπÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–∞–ª–ª—ã)"
            
        elif points_transaction['operation_type'] == 'earning_only':
            if points_transaction['points_earned'] > 0:
                text += f"üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{points_transaction['points_earned']} –±–∞–ª–ª–æ–≤"
            else:
                text += f"‚ÑπÔ∏è –°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"
        
        return text
    
    async def _get_place_data(self, place_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
        try:
            from core.database.db_v2 import get_connection
            
            with get_connection() as conn:
                cursor = conn.execute("""
                    SELECT base_discount_pct, loyalty_accrual_pct, min_redeem, max_percent_per_bill, title
                    FROM partner_places 
                    WHERE id = ? AND status = 'published'
                """, (place_id,))
                result = cursor.fetchone()
                
                if result:
                    return {
                        'base_discount_pct': result[0] or 0.0,
                        'loyalty_accrual_pct': result[1] or 5.0,
                        'min_redeem': result[2] or 0,
                        'max_percent_per_bill': result[3] or 50.0,
                        'title': result[4]
                    }
                return None
                
        except Exception as e:
            logger.error(f"Error getting place data: {e}")
            return None
    
    async def _get_loyalty_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            from core.database.db_v2 import get_connection
            
            with get_connection() as conn:
                cursor = conn.execute("""
                    SELECT redeem_rate, rounding_rule, max_accrual_percent
                    FROM platform_loyalty_config 
                    ORDER BY id DESC LIMIT 1
                """)
                result = cursor.fetchone()
                
                if result:
                    return {
                        'redeem_rate': result[0] or 5000.0,
                        'rounding_rule': result[1] or 'bankers',
                        'max_accrual_percent': result[2] or 20.0
                    }
                else:
                    return {
                        'redeem_rate': 5000.0,
                        'rounding_rule': 'bankers',
                        'max_accrual_percent': 20.0
                    }
                    
        except Exception as e:
            logger.error(f"Error getting loyalty config: {e}")
            return {
                'redeem_rate': 5000.0,
                'rounding_rule': 'bankers',
                'max_accrual_percent': 20.0
            }
    
    async def _create_partner_sale(self, partner_id: int, place_id: int, operator_telegram_id: int,
                                 user_telegram_id: int, amount_gross: float, base_discount_pct: float,
                                 extra_discount_pct: float, extra_value: float, amount_partner_due: float,
                                 amount_user_subsidy: float, points_spent: int, points_earned: int,
                                 redeem_rate: float, qr_token: str, conn) -> int:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ"""
        try:
            cursor = conn.execute("""
                INSERT INTO partner_sales (
                    partner_id, place_id, operator_telegram_id, user_telegram_id,
                    amount_gross, base_discount_pct, extra_discount_pct, extra_value,
                    amount_partner_due, amount_user_subsidy, points_spent, points_earned,
                    redeem_rate, qr_token, created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                partner_id, place_id, operator_telegram_id, user_telegram_id,
                amount_gross, base_discount_pct, extra_discount_pct, extra_value,
                amount_partner_due, amount_user_subsidy, points_spent, points_earned,
                redeem_rate, qr_token, datetime.now().isoformat()
            ))
            
            return cursor.lastrowid
            
        except Exception as e:
            logger.error(f"Error creating partner sale: {e}")
            raise
    
    async def _add_notification(self, user_id: int, message: str, notification_type: str, conn):
        """–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            conn.execute("""
                INSERT INTO user_notifications (user_id, message, notification_type, is_read, created_at)
                VALUES (?, ?, ?, 0, ?)
            """, (user_id, message, notification_type, datetime.now().isoformat()))
            
        except Exception as e:
            logger.error(f"Error adding notification: {e}")
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
payment_service = PaymentService()
