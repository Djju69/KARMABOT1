"""
–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ –±–∞–∑–µ Claude API
"""
import os
import json
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import asyncio
import aiohttp

logger = logging.getLogger(__name__)


class ClaudeAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self):
        self.api_key = os.getenv('CLAUDE_API_KEY')
        self.api_url = "https://api.anthropic.com/v1/messages"
        self.model = "claude-3-sonnet-20240229"
        self.max_tokens = 4000
        
        if not self.api_key:
            logger.warning("CLAUDE_API_KEY not set - AI assistant will be disabled")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude API"""
        return bool(self.api_key)
    
    async def analyze_system_logs(self, hours: int = 24) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            if not self.is_available():
                return {"error": "Claude API not available"}
            
            # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            logs_data = await self._get_recent_logs(hours)
            
            # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ KARMABOT1 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤.
            
            –õ–æ–≥–∏:
            {json.dumps(logs_data, ensure_ascii=False, indent=2)}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            1. üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            2. ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            4. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.
            """
            
            response = await self._call_claude_api(prompt)
            return {
                "analysis": response,
                "period_hours": hours,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error analyzing system logs: {e}")
            return {"error": str(e)}
    
    async def analyze_user_analytics(self, days: int = 7) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        try:
            if not self.is_available():
                return {"error": "Claude API not available"}
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_data = await self._get_user_analytics(days)
            
            # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π KARMABOT1 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.
            
            –î–∞–Ω–Ω—ã–µ:
            {json.dumps(analytics_data, ensure_ascii=False, indent=2)}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            1. üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            2. üìà –¢—Ä–µ–Ω–¥—ã —Ä–æ—Å—Ç–∞/—Å–Ω–∏–∂–µ–Ω–∏—è
            3. üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            4. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
            """
            
            response = await self._call_claude_api(prompt)
            return {
                "analysis": response,
                "period_days": days,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error analyzing user analytics: {e}")
            return {"error": str(e)}
    
    async def search_database(self, query: str, context: str = "general") -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.is_available():
                return {"error": "Claude API not available"}
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            search_data = await self._search_db_data(query, context)
            
            # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            prompt = f"""
            –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö KARMABOT1.
            
            –ó–∞–ø—Ä–æ—Å: {query}
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
            {json.dumps(search_data, ensure_ascii=False, indent=2)}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:
            1. üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            2. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            3. üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.
            """
            
            response = await self._call_claude_api(prompt)
            return {
                "query": query,
                "context": context,
                "results": response,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error searching database: {e}")
            return {"error": str(e)}
    
    async def get_system_recommendations(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.is_available():
                return {"error": "Claude API not available"}
            
            # –°–æ–±—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            system_info = await self._get_system_info()
            
            # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã KARMABOT1 –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
            
            –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
            {json.dumps(system_info, ensure_ascii=False, indent=2)}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            1. üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
            2. üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            3. üìà –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            4. üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
            """
            
            response = await self._call_claude_api(prompt)
            return {
                "recommendations": response,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error getting system recommendations: {e}")
            return {"error": str(e)}
    
    async def _call_claude_api(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ Claude API"""
        try:
            headers = {
                "x-api-key": self.api_key,
                "Content-Type": "application/json",
                "anthropic-version": "2023-06-01"
            }
            
            data = {
                "model": self.model,
                "max_tokens": self.max_tokens,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["content"][0]["text"]
                    else:
                        error_text = await response.text()
                        logger.error(f"Claude API error {response.status}: {error_text}")
                        return f"–û—à–∏–±–∫–∞ API: {response.status}"
                        
        except Exception as e:
            logger.error(f"Error calling Claude API: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude API: {str(e)}"
    
    async def _get_recent_logs(self, hours: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ë–î
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "total_logs": 150,
                "error_count": 3,
                "warning_count": 12,
                "info_count": 135,
                "recent_errors": [
                    "Database connection timeout",
                    "Rate limit exceeded for user 123456",
                    "Invalid QR code format"
                ],
                "active_users": 45,
                "qr_scans": 78,
                "card_creations": 12
            }
        except Exception as e:
            logger.error(f"Error getting logs: {e}")
            return {"error": str(e)}
    
    async def _get_user_analytics(self, days: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –ë–î
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "total_users": 1250,
                "active_users": 340,
                "new_users": 45,
                "partner_count": 23,
                "qr_scans_total": 1250,
                "cards_created": 89,
                "points_earned": 15600,
                "points_spent": 8900,
                "daily_stats": [
                    {"date": "2024-01-15", "users": 45, "scans": 78, "points": 1200},
                    {"date": "2024-01-14", "users": 52, "scans": 89, "points": 1350},
                    {"date": "2024-01-13", "users": 38, "scans": 65, "points": 980}
                ]
            }
        except Exception as e:
            logger.error(f"Error getting analytics: {e}")
            return {"error": str(e)}
    
    async def _search_db_data(self, query: str, context: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "query": query,
                "context": context,
                "results_count": 15,
                "matches": [
                    {"type": "user", "id": 123456, "name": "Test User", "relevance": 0.95},
                    {"type": "partner", "id": 789, "name": "Test Partner", "relevance": 0.87},
                    {"type": "card", "id": 456, "name": "Test Card", "relevance": 0.82}
                ],
                "suggestions": [
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ email",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ",
                    "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π"
                ]
            }
        except Exception as e:
            logger.error(f"Error searching database: {e}")
            return {"error": str(e)}
    
    async def _get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "database_status": "healthy",
                "redis_status": "healthy",
                "odoo_connection": "connected",
                "active_connections": 45,
                "memory_usage": "65%",
                "cpu_usage": "23%",
                "disk_usage": "45%",
                "uptime": "15 days",
                "last_backup": "2024-01-15 02:00:00",
                "feature_flags": {
                    "moderation": True,
                    "qr_webapp": False,
                    "ai_assistant": True
                }
            }
        except Exception as e:
            logger.error(f"Error getting system info: {e}")
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_assistant = ClaudeAIService()


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def analyze_logs(hours: int = 24) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    return await ai_assistant.analyze_system_logs(hours)

async def analyze_analytics(days: int = 7) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return await ai_assistant.analyze_user_analytics(days)

async def search_data(query: str, context: str = "general") -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    return await ai_assistant.search_database(query, context)

async def get_recommendations() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ"""
    return await ai_assistant.get_system_recommendations()
