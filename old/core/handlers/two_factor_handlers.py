"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
"""
import logging
from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from core.security import two_factor_auth, require_permission, get_user_role
from core.security.roles import Permission, Role
from core.database import role_repository

logger = logging.getLogger(__name__)
router = Router()

class TwoFactorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA."""
    waiting_for_enable_confirmation = State()
    waiting_for_code = State()

@router.message(Command("2fa"))
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def cmd_2fa_settings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ 2FA
    is_enabled = await two_factor_auth.is_2fa_enabled(user_id)
    
    if is_enabled:
        # –ï—Å–ª–∏ 2FA —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å 2FA", callback_data="2fa_disable")],
            [types.InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data="2fa_reset")]
        ])
        await message.answer(
            "üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—ë –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á.",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ 2FA –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∫–ª—é—á–∏—Ç—å
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å 2FA", callback_data="2fa_enable")]
        ])
        await message.answer(
            "üîì –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –µ—ë –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "2fa_enable")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def enable_2fa_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA."""
    user_id = callback.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = two_factor_auth.generate_secret_key()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(secret_key=secret_key)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ
    uri = two_factor_auth.get_totp_uri(callback.from_user.username or str(user_id), secret_key)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_code = two_factor_auth.generate_qr_code(uri)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await callback.message.answer_photo(
        types.BufferedInputFile(qr_code, filename="2fa_qr.png"),
        caption="üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
               "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (Google Authenticator, Microsoft Authenticator –∏ —Ç.–¥.)\n"
               "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é:\n"
               f"<code>{secret_key}</code>\n\n"
               "3. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    await state.set_state(TwoFactorStates.waiting_for_code)
    await callback.answer()

@router.message(TwoFactorStates.waiting_for_code, F.text.isdigit())
async def process_2fa_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA."""
    user_id = message.from_user.id
    code = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    state_data = await state.get_data()
    secret_key = state_data.get('secret_key')
    
    if not secret_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if await two_factor_auth.verify_code(user_id, code):
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await two_factor_auth.enable_2fa(user_id, secret_key)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(_2fa_verified=True)
        
        await message.answer(
            "‚úÖ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await role_repository.log_audit_event(
            user_id=user_id,
            action="2FA_ENABLED_SUCCESS",
            entity_type="user",
            entity_id=user_id
        )
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
        await role_repository.log_audit_event(
            user_id=user_id,
            action="2FA_INVALID_CODE",
            entity_type="user",
            entity_id=user_id
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "2fa_disable")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def disable_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA."""
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="2fa_confirm_disable")],
        [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="2fa_cancel_disable")]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é?\n\n"
        "–≠—Ç–æ —Å–Ω–∏–∑–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
        reply_markup=keyboard
    )
    
    await callback.answer()

@router.callback_query(F.data == "2fa_confirm_disable")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def confirm_disable_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA."""
    user_id = callback.from_user.id
    
    # –û—Ç–∫–ª—é—á–∞–µ–º 2FA
    await two_factor_auth.disable_2fa(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await state.update_data(_2fa_verified=False)
    
    await callback.message.answer(
        "üîì –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /2fa"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await role_repository.log_audit_event(
        user_id=user_id,
        action="2FA_DISABLED_SUCCESS",
        entity_type="user",
        entity_id=user_id
    )
    
    await callback.answer()

@router.callback_query(F.data == "2fa_cancel_disable")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def cancel_disable_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA."""
    await callback.message.answer("‚úÖ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–µ–Ω–Ω–æ–π.")
    await callback.answer()

@router.callback_query(F.data == "2fa_reset")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def reset_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –∫–ª—é—á–∞ 2FA."""
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="2fa_confirm_reset")],
        [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="2fa_cancel_reset")]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á 2FA?\n\n"
        "–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞, –∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.",
        reply_markup=keyboard
    )
    
    await callback.answer()

@router.callback_query(F.data == "2fa_confirm_reset")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def confirm_reset_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ 2FA."""
    user_id = callback.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = two_factor_auth.generate_secret_key()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(secret_key=secret_key)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ
    uri = two_factor_auth.get_totp_uri(callback.from_user.username or str(user_id), secret_key)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_code = two_factor_auth.generate_qr_code(uri)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await callback.message.answer_photo(
        types.BufferedInputFile(qr_code, filename="2fa_qr.png"),
        caption="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á 2FA\n\n"
               "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞\n"
               "2. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n"
               "3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é:\n"
               f"<code>{secret_key}</code>\n\n"
               "4. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    await state.set_state(TwoFactorStates.waiting_for_code)
    await callback.answer()

@router.callback_query(F.data == "2fa_cancel_reset")
@require_permission(Permission.MANAGE_OWN_PROFILE)
async def cancel_reset_2fa(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ 2FA."""
    await callback.message.answer("‚úÖ –ö–ª—é—á 2FA –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.")
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handlers = [router]
