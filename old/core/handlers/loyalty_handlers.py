"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.
"""
from typing import Dict, Any, Optional
from uuid import UUID
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.services.loyalty_service import LoyaltyService, ActivityType
from core.database import get_db
from core.models.loyalty_models import LoyaltyBalance

router = Router()
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
def get_loyalty_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."""
    keyboard = [
        [
            InlineKeyboardButton(text="üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="loy:balance"),
            InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="loy:history:1"),
        ],
        [
            InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="actv:list"),
            InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="loy:referral"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
def get_activities_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏."""
    activities = [
        ("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥", "actv:claim:daily_checkin"),
        ("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "actv:claim:profile"),
        ("üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", "actv:claim:bindcard"),
        ("üìç –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ", "actv:claim:geocheckin"),
    ]
    
    keyboard = [
        [InlineKeyboardButton(text=text, callback_data=callback)]
        for text, callback in activities
    ]
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="loy:menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "loy:menu")
async def show_loyalty_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."""
    await callback.message.edit_text(
        "üíé <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!",
        reply_markup=get_loyalty_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "loy:balance")
async def show_balance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ callback.from_user.id
    user_id = UUID(int=0)  # –ó–∞–≥–ª—É—à–∫–∞
    
    async with get_db() as db:
        service = LoyaltyService(db)
        await service.initialize()
        balance = await service.get_balance(user_id)
    
    await callback.message.edit_text(
        f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>{balance.available_points} –±–∞–ª–ª–æ–≤</b>\n"
        f"–í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{balance.total_points} –±–∞–ª–ª–æ–≤</b>",
        reply_markup=get_loyalty_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("loy:history:"))
async def show_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    page = int(callback.data.split(":")[2])
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    history = [
        ("+50", "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", "—Å–µ–≥–æ–¥–Ω—è"),
        ("+10", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥", "–≤—á–µ—Ä–∞"),
        ("-100", "–ü–æ–∫—É–ø–∫–∞ –∫—É–ø–æ–Ω–∞", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥"),
    ]
    
    history_text = "\n".join(
        f"{points} - {desc} ({date})"
        for points, desc, date in history
    )
    
    await callback.message.edit_text(
        f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n{history_text}",
        reply_markup=get_loyalty_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "actv:list")
async def show_activities(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."""
    await callback.message.edit_text(
        "üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã!",
        reply_markup=get_activities_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("actv:claim:"))
async def claim_activity(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    activity_type = callback.data.split(":")[2]
    user_id = UUID(int=0)  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ callback.from_user.id
    
    try:
        activity_enum = ActivityType(activity_type)
    except ValueError:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", show_alert=True)
        return
    
    async with get_db() as db:
        service = LoyaltyService(db)
        await service.initialize()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if activity_enum == ActivityType.PROFILE_COMPLETION:
            # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            profile_complete = False  # –ó–∞–≥–ª—É—à–∫–∞
            if not profile_complete:
                await callback.answer(
                    "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                    show_alert=True
                )
                return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        transaction = await service.record_activity(user_id, activity_enum)
        
        if transaction:
            await callback.answer(
                f"+{transaction.points} –±–∞–ª–ª–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                show_alert=True
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await show_activities(callback)
        else:
            await callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
    
    await callback.answer()

@router.callback_query(F.data == "loy:referral")
async def show_referral_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    user_id = UUID(int=0)  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ callback.from_user.id
    
    async with get_db() as db:
        service = LoyaltyService(db)
        await service.initialize()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        referral_code = await service.generate_referral_code(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await service.get_referral_stats(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = "your_bot_username"  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    referral_link = f"https://t.me/{bot_username}?start=ref_{referral_code}"
    
    await callback.message.edit_text(
        "üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π</b>\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>\n\n"
        f"üîπ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['total_referrals']}\n"
        f"üîπ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {stats['total_bonus_earned']}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã!",
        reply_markup=get_loyalty_keyboard(),
        disable_web_page_preview=True
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
@router.message(F.text.startswith("/start ref_"))
async def handle_referral_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    # TODO: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–∞–º–∏
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. "
        "–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
    )
