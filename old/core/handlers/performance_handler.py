"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..services.user_service import get_user_role
from ..services.performance_service import performance_service

logger = logging.getLogger(__name__)
router = Router(name="performance_handler")


@router.message(Command("perf_stats"))
async def show_performance_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await performance_service.get_performance_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        
        if stats.get('metrics'):
            report += "üîç <b>–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            for query_name, metric in stats['metrics'].items():
                report += f"‚Ä¢ <b>{query_name}</b>\n"
                report += f"  ‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {metric['count']}\n"
                report += f"  ‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metric['avg_time']:.2f}–º—Å\n"
                report += f"  ‚îî –ú–∏–Ω/–ú–∞–∫—Å: {metric['min_time']:.2f}–º—Å / {metric['max_time']:.2f}–º—Å\n\n"
        
        if stats.get('slow_queries_count', 0) > 0:
            report += f"üêå <b>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b> {stats['slow_queries_count']}\n"
            if stats.get('recent_slow_queries'):
                report += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
                for query in stats['recent_slow_queries'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    report += f"‚Ä¢ {query['query']}: {query['duration_ms']:.2f}–º—Å\n"
        
        report += f"\nüìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_queries', 0)}\n"
        report += f"‚Ä¢ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if stats.get('is_initialized') else '‚ùå'}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—ç—à–∞
        if stats.get('cache_ttl_config'):
            report += f"\n‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞:</b>\n"
            for cache_type, ttl in stats['cache_ttl_config'].items():
                report += f"‚Ä¢ {cache_type}: {ttl}—Å\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing performance stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


@router.message(Command("optimize_perf"))
async def optimize_performance(message: Message):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role != 'super_admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return
        
        await message.answer("üîß –ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        await performance_service.optimize_slow_queries()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await performance_service.get_performance_stats()
        
        report = "‚úÖ <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        report += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        report += f"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('slow_queries_count', 0)}\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_queries', 0)}\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error optimizing performance: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


@router.message(Command("cache_clear"))
async def clear_cache(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role != 'super_admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")
            return
        
        await message.answer("üóëÔ∏è –û—á–∏—â–∞—é –∫—ç—à...")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        from core.services.cache import cache_service
        
        # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞
        cache_keys = [
            "loyalty:balance:*",
            "loyalty:history:*", 
            "catalog:*",
            "user_profile:*",
            "partner_info:*",
            "categories:*",
            "loyalty_config:*",
            "tariffs:*",
            "translations:*"
        ]
        
        cleared_count = 0
        for pattern in cache_keys:
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"Clearing cache pattern: {pattern}")
                cleared_count += 1
            except Exception as e:
                logger.warning(f"Failed to clear cache pattern {pattern}: {e}")
        
        report = f"‚úÖ <b>–ö—ç—à –æ—á–∏—â–µ–Ω!</b>\n\n"
        report += f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {cleared_count}\n"
        report += f"üí° –ö—ç—à –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")


def get_performance_router() -> Router:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return router


__all__ = ['router', 'get_performance_router']
