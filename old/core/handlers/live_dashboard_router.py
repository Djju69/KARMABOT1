"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Dict, Any
import logging

from ..services.live_dashboard import live_dashboard
from ..utils.locales_v2 import get_text
from ..security.roles import get_user_role

logger = logging.getLogger(__name__)
router = Router(name='live_dashboard_router')


class LiveDashboardStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    viewing_moderation = State()
    viewing_notifications = State()
    viewing_system = State()


@router.message(F.text.in_(["üìä –ú–æ–¥–µ—Ä–∞—Ü–∏—è", "üìä Moderation"]))
async def moderation_dashboard_handler(message: Message, state: FSMContext):
    """–î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_role not in ['admin', 'super_admin']:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–î–∞—à–±–æ—Ä–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard = await live_dashboard.get_moderation_dashboard()
        dashboard_message = live_dashboard.format_dashboard_message(dashboard)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh_moderation"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="dashboard_pause_moderation")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await message.answer(
            dashboard_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await state.set_state(LiveDashboardStates.viewing_moderation)
        
    except Exception as e:
        logger.error(f"Error in moderation_dashboard_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")


@router.message(F.text.in_(["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîî Notifications"]))
async def notifications_dashboard_handler(message: Message, state: FSMContext):
    """–î–∞—à–±–æ—Ä–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_role not in ['admin', 'super_admin']:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–î–∞—à–±–æ—Ä–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard = await live_dashboard.get_notifications_dashboard()
        dashboard_message = live_dashboard.format_dashboard_message(dashboard)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh_notifications"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="dashboard_pause_notifications")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await message.answer(
            dashboard_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await state.set_state(LiveDashboardStates.viewing_notifications)
        
    except Exception as e:
        logger.error(f"Error in notifications_dashboard_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.message(F.text.in_(["‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", "‚öôÔ∏è System"]))
async def system_dashboard_handler(message: Message, state: FSMContext):
    """–î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        user_id = message.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_role not in ['admin', 'super_admin']:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–î–∞—à–±–æ—Ä–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard = await live_dashboard.get_system_dashboard()
        dashboard_message = live_dashboard.format_dashboard_message(dashboard)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh_system"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="dashboard_pause_system")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await message.answer(
            dashboard_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await state.set_state(LiveDashboardStates.viewing_system)
        
    except Exception as e:
        logger.error(f"Error in system_dashboard_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∏—Å—Ç–µ–º—ã")


@router.callback_query(F.data.startswith("dashboard_refresh_"))
async def refresh_dashboard_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    try:
        dashboard_type = callback.data.replace("dashboard_refresh_", "")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...</b>\n\n"
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if dashboard_type == "moderation":
            dashboard = await live_dashboard.get_moderation_dashboard()
        elif dashboard_type == "notifications":
            dashboard = await live_dashboard.get_notifications_dashboard()
        elif dashboard_type == "system":
            dashboard = await live_dashboard.get_system_dashboard()
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞—à–±–æ—Ä–¥–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        dashboard_message = live_dashboard.format_dashboard_message(dashboard)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"dashboard_refresh_{dashboard_type}"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"dashboard_pause_{dashboard_type}")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await callback.message.edit_text(
            dashboard_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await callback.answer("‚úÖ –î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"Error in refresh_dashboard_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞")


@router.callback_query(F.data.startswith("dashboard_pause_"))
async def pause_dashboard_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        dashboard_type = callback.data.replace("dashboard_pause_", "")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await live_dashboard.stop_auto_refresh(dashboard_type)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"dashboard_refresh_{dashboard_type}"),
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"dashboard_resume_{dashboard_type}")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error in pause_dashboard_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—à–±–æ—Ä–¥–∞")


@router.callback_query(F.data.startswith("dashboard_resume_"))
async def resume_dashboard_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        dashboard_type = callback.data.replace("dashboard_resume_", "")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await live_dashboard.start_auto_refresh(
            dashboard_type,
            self._update_dashboard_message,
            callback.from_user.id
        )
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"dashboard_refresh_{dashboard_type}"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"dashboard_pause_{dashboard_type}")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚ñ∂Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error in resume_dashboard_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∞—à–±–æ—Ä–¥–∞")


@router.callback_query(F.data == "dashboard_menu")
async def dashboard_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="dashboard_show_moderation"),
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="dashboard_show_notifications")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="dashboard_show_system")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await callback.message.edit_text(
            "üìä <b>–ñ–∏–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            "üìä <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - SMS –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞</b> - —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n\n"
            "üí° –í—Å–µ –¥–∞—à–±–æ—Ä–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in dashboard_menu_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–æ–≤")


@router.callback_query(F.data.startswith("dashboard_show_"))
async def show_dashboard_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
    try:
        dashboard_type = callback.data.replace("dashboard_show_", "")
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        if dashboard_type == "moderation":
            dashboard = await live_dashboard.get_moderation_dashboard()
        elif dashboard_type == "notifications":
            dashboard = await live_dashboard.get_notifications_dashboard()
        elif dashboard_type == "system":
            dashboard = await live_dashboard.get_system_dashboard()
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞—à–±–æ—Ä–¥–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        dashboard_message = live_dashboard.format_dashboard_message(dashboard)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"dashboard_refresh_{dashboard_type}"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"dashboard_pause_{dashboard_type}")
            ],
            [
                InlineKeyboardButton(text="üìä –î—Ä—É–≥–∏–µ –¥–∞—à–±–æ—Ä–¥—ã", callback_data="dashboard_menu"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dashboard_back")
            ]
        ])
        
        await callback.message.edit_text(
            dashboard_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in show_dashboard_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞—à–±–æ—Ä–¥–∞")


@router.callback_query(F.data == "dashboard_back")
async def dashboard_back_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É –º–µ–Ω—é"""
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await live_dashboard.stop_auto_refresh("moderation")
        await live_dashboard.stop_auto_refresh("notifications")
        await live_dashboard.stop_auto_refresh("system")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        from core.keyboards.unified_menu import get_admin_cabinet_keyboard
        keyboard = get_admin_cabinet_keyboard('admin')
        
        await callback.message.edit_text(
            "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–∏—Ç—Ä–∏–Ω–∞\n"
            "‚Ä¢ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫\n"
            "‚Ä¢ –ñ–∏–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã\n"
            "‚Ä¢ –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç –≤ Odoo\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in dashboard_back_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
    
    async def _update_dashboard_message(self, user_id: int, message: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"Updating dashboard message for user {user_id}")
        except Exception as e:
            logger.error(f"Error updating dashboard message: {e}")


def get_live_dashboard_router() -> Router:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    return router
