"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from core.ui.kb_settings import kb_settings_menu
from core.handlers.language import build_language_inline_kb
from core.services.support_ai_service import SupportAIService

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
support_ai = SupportAIService()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=kb_settings_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in settings_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "üåê –Ø–∑—ã–∫")
async def language_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        logger.info(f"Language handler called for user {message.from_user.id}")
        keyboard = build_language_inline_kb()
        logger.info(f"Language keyboard created: {keyboard}")
        
        await message.answer(
            "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info("Language selection message sent successfully")
        
    except Exception as e:
        logger.error(f"Error in language_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb_settings_menu()
        )


@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # Get user language
        lang = getattr(message.from_user, 'language_code', 'ru') or 'ru'
        
        # Get AI response for notification management
        reply = await support_ai.answer(message.from_user.id, "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", lang)
        
        # Send response
        await message.answer(
            reply,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in notifications handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb_settings_menu()
        )


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç")
async def back_to_cabinet_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç"""
    try:
        from core.handlers.cabinet_router import user_cabinet_handler
        await user_cabinet_handler(message)
    except Exception as e:
        logger.error(f"Error in back_to_cabinet_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
