"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from core.services.translation_service import translation_service

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text.in_(["üåê –Ø–∑—ã–∫", "üåê Language", "üåê Ng√¥n Ng·ªØ", "üåê Ïñ∏Ïñ¥"]))
async def handle_language_selection(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    try:
        user_id = message.from_user.id
        current_lang = translation_service.get_user_language(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for lang_code, lang_info in translation_service.get_supported_languages().items():
            flag = lang_info['flag']
            name = lang_info['name']
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
            if lang_code == current_lang:
                text = f"{flag} {name} ‚úÖ"
            else:
                text = f"{flag} {name}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"lang_{lang_code}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=translation_service.get_text("back", current_lang),
                callback_data="back_to_menu"
            )
        ])
        
        response_text = translation_service.get_text(
            "language_selection",
            current_lang,
            current_language=translation_service.get_language_name(current_lang)
        )
        
        await message.answer(response_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in handle_language_selection: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞")

@router.callback_query(F.data.startswith("lang_"))
async def handle_language_change(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ–Ω—É —è–∑—ã–∫–∞"""
    try:
        user_id = callback.from_user.id
        lang_code = callback.data.split("_")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
        if not translation_service.is_language_supported(lang_code):
            await callback.answer("‚ùå –Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
        success = translation_service.set_user_language(user_id, lang_code)
        
        if success:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer(
                translation_service.get_text("language_changed", lang_code),
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                translation_service.get_text("language_selection", lang_code),
                reply_markup=callback.message.reply_markup
            )
            
            logger.info(f"User {user_id} changed language to {lang_code}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")
            
    except Exception as e:
        logger.error(f"Error in handle_language_change: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")

@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = callback.from_user.id
        current_lang = translation_service.get_user_language(user_id)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from core.keyboards.reply_v2 import get_main_menu_keyboard
        
        keyboard = get_main_menu_keyboard()
        
        welcome_text = translation_service.get_text(
            "welcome_back",
            current_lang,
            user_name=callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        await callback.message.edit_text(welcome_text)
        await callback.message.answer(
            translation_service.get_text("main_menu", current_lang),
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in handle_back_to_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(F.text.in_(["üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞", "üåê Language Settings", "üåê C√†i ƒê·∫∑t Ng√¥n Ng·ªØ", "üåê Ïñ∏Ïñ¥ ÏÑ§Ï†ï"]))
async def handle_language_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    try:
        user_id = message.from_user.id
        current_lang = translation_service.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        from core.services.user_service import user_service
        user_role = await user_service.get_user_role(user_id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer(
                translation_service.get_text("access_denied", current_lang)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        stats = translation_service.get_translation_stats()
        
        response = translation_service.get_text("language_settings_title", current_lang) + "\n\n"
        
        for lang_code, stat in stats.items():
            lang_name = translation_service.get_language_name(lang_code)
            response += f"{lang_name}:\n"
            response += f"  üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {stat['translated_keys']}/{stat['total_keys']}\n"
            response += f"  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {stat['coverage_percent']:.1f}%\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=translation_service.get_text("refresh_stats", current_lang),
                    callback_data="refresh_language_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text=translation_service.get_text("back", current_lang),
                    callback_data="back_to_admin_menu"
                )
            ]
        ])
        
        await message.answer(response, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in handle_language_settings: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞")

@router.callback_query(F.data == "refresh_language_stats")
async def handle_refresh_language_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    try:
        user_id = callback.from_user.id
        current_lang = translation_service.get_user_language(user_id)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        translation_service._load_translations()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = translation_service.get_translation_stats()
        
        response = translation_service.get_text("language_settings_title", current_lang) + "\n\n"
        
        for lang_code, stat in stats.items():
            lang_name = translation_service.get_language_name(lang_code)
            response += f"{lang_name}:\n"
            response += f"  üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {stat['translated_keys']}/{stat['total_keys']}\n"
            response += f"  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {stat['coverage_percent']:.1f}%\n\n"
        
        await callback.message.edit_text(response, reply_markup=callback.message.reply_markup)
        await callback.answer(translation_service.get_text("stats_refreshed", current_lang))
        
    except Exception as e:
        logger.error(f"Error in handle_refresh_language_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
