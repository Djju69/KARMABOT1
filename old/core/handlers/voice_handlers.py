"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from core.services.voice_service import voice_service
from core.utils.locales_v2 import get_text
from core.settings import settings

logger = logging.getLogger(__name__)
router = Router()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
try:
    from core.fsm.support_states import SupportStates
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    class SupportStates:
        chatting = "chatting"

@router.message(StateFilter(SupportStates.chatting), F.voice)
@router.message(StateFilter(SupportStates.chatting), F.audio)
async def handle_voice_message(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—á–∏
    if not settings.features.support_voice:
        logger.debug("Voice feature disabled, ignoring voice message")
        return
    
    user_id = message.from_user.id
    logger.info(f"Processing voice message from user {user_id}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await message.answer(get_text('voice.processing', 'ru'))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text, language, error_code = await voice_service.process_voice_message(bot, message)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if error_code:
            await _handle_voice_error(message, error_code)
            return
        
        if not text:
            await _handle_voice_error(message, "couldnt_understand")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.answer(
            f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:**\n{text}\n\n"
            f"üåê **–Ø–∑—ã–∫:** {language}\n\n"
            f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
        )
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AI-–ø–æ–º–æ—â–Ω–∏–∫
        await _process_ai_request(message, text, language, state)
        
    except Exception as e:
        logger.error(f"Error handling voice message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def _handle_voice_error(message: Message, error_code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    error_messages = {
        "too_long": get_text('voice.too_long', 'ru'),
        "too_large": get_text('voice.too_large', 'ru'),
        "rate_limit": get_text('voice.rate_limit', 'ru'),
        "couldnt_understand": get_text('voice.couldnt_understand', 'ru'),
        "download_error": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
        "conversion_error": "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ",
        "transcription_error": "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏",
        "processing_error": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    }
    
    error_text = error_messages.get(error_code, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
    if error_code in ["couldnt_understand", "transcription_error"]:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=get_text('voice.btn_retry', 'ru'),
                callback_data="voice_retry"
            )]
        ])
        await message.answer(error_text, reply_markup=keyboard)
    else:
        await message.answer(error_text)

@router.callback_query(F.data == "voice_retry")
async def handle_voice_retry(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑"
    )
    await callback.answer()

async def _process_ai_request(message: Message, text: str, language: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É"""
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º AI-—Å–µ—Ä–≤–∏—Å–æ–º
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            from core.services.support_ai_service import support_ai_service
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            answer = await support_ai_service.answer(
                user_id=message.from_user.id,
                question=text,
                lang_hint=language
            )
            
            await message.answer(answer)
            
        except ImportError:
            # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await message.answer(
                f"ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å:**\n\n"
                f"üìù **–¢–µ–∫—Å—Ç:** {text}\n"
                f"üåê **–Ø–∑—ã–∫:** {language}\n\n"
                f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
            
    except Exception as e:
        logger.error(f"Error processing AI request: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º
@router.message(F.text.in_([get_text('menu.help', 'ru'), get_text('menu.help', 'en')]))
async def handle_help_with_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏—á—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    if settings.features.support_voice:
        help_text = (
            "üìö **–°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 60 —Å–µ–∫)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É!"
        )
    else:
        help_text = (
            "üìö **–°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏"
        )
    
    await message.answer(help_text)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await state.set_state(SupportStates.chatting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
@router.message(F.text.in_(["ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "ü§ñ Ask AI question"]))
async def start_ai_chat(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    
    if settings.features.support_voice:
        welcome_text = (
            "ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏—Å—Ç–µ–º–µ!"
        )
    else:
        welcome_text = (
            "ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º"
        )
    
    await message.answer(welcome_text)
    await state.set_state(SupportStates.chatting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è Back"]))
async def exit_support_chat(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await state.clear()
    await message.answer("üëã –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
