"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "–ö–∞—Ä–º–∞"
"""
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from core.fsm.support_states import SupportStates
from core.services.support_ai_service import SupportAIService
from core.services.report_service import ReportService
from core.services.stt_service import STTService
from core.ui.kb_support_ai import kb_ai_controls
from core.utils.rate_limit import rate_limiter
from core.i18n import get_text
from core.settings import settings

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
support_ai = SupportAIService()
report_service = ReportService()
stt_service = STTService()


@router.message(Command("support"))
async def cmd_support(message: Message, state: FSMContext):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /support –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ AI"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º feature flag
        if not settings.features.support_ai:
            await message.answer("ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not rate_limiter.is_allowed_ai_message(message.from_user.id):
            await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SupportStates.chatting)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = get_text("support_ai_hi", "ru")
        await message.answer(welcome_text, reply_markup=kb_ai_controls())
        
    except Exception as e:
        logger.error(f"Error in support command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "support_ai_start")
async def support_ai_start(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not rate_limiter.is_allowed_ai_message(cb.from_user.id):
            await cb.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SupportStates.chatting)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = get_text("support_ai_hi", "ru")
        await cb.message.answer(welcome_text, reply_markup=kb_ai_controls())
        await cb.answer()
        
    except Exception as e:
        logger.error(f"Error starting AI: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "support_ai_exit")
async def support_ai_exit(cb: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ AI-—Ä–µ–∂–∏–º–∞"""
    try:
        await state.set_state(SupportStates.idle)
        await cb.message.answer("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.")
        await cb.answer()
        
    except Exception as e:
        logger.error(f"Error exiting AI: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "support_ai_escalate")
async def support_ai_escalate(cb: CallbackQuery, state: FSMContext):
    """–≠—Å–∫–∞–ª–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
        await cb.message.answer("üì® –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        await cb.answer("‚úÖ –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
    except Exception as e:
        logger.error(f"Error escalating: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.message(SupportStates.chatting, F.text)
async def support_ai_chat(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AI-—Ä–µ–∂–∏–º–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not rate_limiter.is_allowed_ai_message(message.from_user.id):
            await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        reply = await support_ai.answer(message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(reply, reply_markup=kb_ai_controls())
        
    except Exception as e:
        logger.error(f"Error in AI chat: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")


@router.message(SupportStates.chatting, F.voice)
async def support_ai_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AI-—Ä–µ–∂–∏–º–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º feature flag
        if not getattr(settings, 'FEATURE_SUPPORT_VOICE', False):
            await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not rate_limiter.is_allowed_voice(message.from_user.id):
            await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await message.answer("üéß –°–ª—É—à–∞—é‚Ä¶ —Å–µ–∫—É–Ω–¥—É")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            audio_path, meta = await stt_service.prepare_audio(message)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            text, lang, confidence = await stt_service.transcribe(audio_path)
            
            if not text or confidence < 0.4:
                await processing_msg.edit_text("üé§ –ü–æ—Ö–æ–∂–µ, –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑? –ú–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            reply = await support_ai.answer(message.from_user.id, text, lang)
            await processing_msg.edit_text(reply, reply_markup=kb_ai_controls())
            
        except ValueError as e:
            if "too long" in str(e):
                await processing_msg.edit_text("‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≤–∞—Ç–æ. –ó–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—á–µ ‚Äî –¥–æ 60 —Å–µ–∫—É–Ω–¥ üôè")
            elif "too large" in str(e):
                await processing_msg.edit_text("üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ó–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—á–µ ‚Äî –¥–æ 2 –ú–ë üôè")
            else:
                await processing_msg.edit_text("üé§ –ü–æ—Ö–æ–∂–µ, –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑? –ú–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.")
        
    except Exception as e:
        logger.error(f"Error processing voice: {e}")
        await message.answer("üé§ –ü–æ—Ö–æ–∂–µ, –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑? –ú–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.")


@router.message(SupportStates.chatting, F.audio)
async def support_ai_audio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ AI-—Ä–µ–∂–∏–º–µ"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await support_ai_voice(message, state)


@router.message(Command("notifications"))
async def cmd_notifications(message: Message, state: FSMContext):
    """Handle /notifications command for AI assistant."""
    try:
        # Get user language
        lang = getattr(message.from_user, 'language_code', 'ru') or 'ru'
        
        # Get AI response for notification management
        reply = await support_ai.answer(message.from_user.id, "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", lang)
        
        # Send response
        await message.answer(
            reply,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in notifications command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
async def txt_notifications_management(message: Message, state: FSMContext):
    """Handle '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏' text button."""
    try:
        # Get user language
        lang = getattr(message.from_user, 'language_code', 'ru') or 'ru'
        
        # Get AI response for notification management
        reply = await support_ai.answer(message.from_user.id, "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", lang)
        
        # Send response
        await message.answer(
            reply,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in notifications management: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
