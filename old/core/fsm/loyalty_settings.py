"""
FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
–°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
"""
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import logging

logger = logging.getLogger(__name__)

class LoyaltySettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    waiting_for_setting_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    waiting_for_redeem_rate = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
    waiting_for_min_purchase = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    waiting_for_max_discount = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏
    waiting_for_max_percent_bill = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞
    waiting_for_bonus_points_usage = State() # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏
    waiting_for_confirmation = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def start_loyalty_settings_edit(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        logger.info(f"üîß Starting loyalty settings edit for user {message.from_user.id}")
        await state.set_state(LoyaltySettingsStates.waiting_for_setting_choice)
        await message.answer(
            "‚öôÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
            "1Ô∏è‚É£ <b>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞</b> - —Å–∫–æ–ª—å–∫–æ VND —Å—Ç–æ–∏—Ç 1 –±–∞–ª–ª\n"
            "2Ô∏è‚É£ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
            "3Ô∏è‚É£ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∑–∞ –±–∞–ª–ª—ã\n"
            "4Ô∏è‚É£ <b>–ì—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —á–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –±–∞–ª–ª–∞–º–∏\n"
            "5Ô∏è‚É£ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞</b> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (1-5) –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b> –¥–ª—è –≤—ã—Ö–æ–¥–∞:",
            parse_mode='HTML'
        )
        logger.info(f"üîß Loyalty settings edit menu sent to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error starting loyalty settings edit: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

async def handle_setting_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        choice = message.text.strip()
        logger.info(f"üîß User {message.from_user.id} selected setting: {choice}")
        
        if choice.upper() in ["–û–¢–ú–ï–ù–ê", "CANCEL", "–ù–ï–¢", "NO"]:
            await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.clear()
            return
        
        if choice == "1":
            await state.update_data(setting_type="redeem_rate")
            await state.set_state(LoyaltySettingsStates.waiting_for_redeem_rate)
            await message.answer(
                "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—Å–∫–æ–ª—å–∫–æ VND —Å—Ç–æ–∏—Ç 1 –±–∞–ª–ª):\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 5000 - 1 –±–∞–ª–ª = 5000 VND\n"
                "‚Ä¢ 10000 - 1 –±–∞–ª–ª = 10000 VND\n"
                "‚Ä¢ 2500 - 1 –±–∞–ª–ª = 2500 VND\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 1000, –º–∞–∫—Å–∏–º—É–º 100000):",
                parse_mode='HTML'
            )
        elif choice == "2":
            await state.update_data(setting_type="min_purchase")
            await state.set_state(LoyaltySettingsStates.waiting_for_min_purchase)
            await message.answer(
                "üõí <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (–≤ VND):\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 10000 - –ø–æ–∫—É–ø–∫–∏ –æ—Ç 10,000 VND –¥–∞—é—Ç –±–∞–ª–ª—ã\n"
                "‚Ä¢ 50000 - –ø–æ–∫—É–ø–∫–∏ –æ—Ç 50,000 VND –¥–∞—é—Ç –±–∞–ª–ª—ã\n"
                "‚Ä¢ 0 - –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –¥–∞—é—Ç –±–∞–ª–ª—ã\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 0, –º–∞–∫—Å–∏–º—É–º 1000000):",
                parse_mode='HTML'
            )
        elif choice == "3":
            await state.update_data(setting_type="max_discount")
            await state.set_state(LoyaltySettingsStates.waiting_for_max_discount)
            await message.answer(
                "üéØ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∑–∞ –±–∞–ª–ª—ã:\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 40 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 40% –æ—Ç —á–µ–∫–∞\n"
                "‚Ä¢ 50 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 50% –æ—Ç —á–µ–∫–∞\n"
                "‚Ä¢ 100 - –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤–µ—Å—å —á–µ–∫ –±–∞–ª–ª–∞–º–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 100):",
                parse_mode='HTML'
            )
        elif choice == "4":
            await state.update_data(setting_type="max_percent_bill")
            await state.set_state(LoyaltySettingsStates.waiting_for_max_percent_bill)
            await message.answer(
                "üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —á–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –±–∞–ª–ª–∞–º–∏:\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 50 - –±–∞–ª–ª—ã –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã—Ç—å –¥–æ 50% –æ—Ç —á–µ–∫–∞\n"
                "‚Ä¢ 75 - –±–∞–ª–ª—ã –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã—Ç—å –¥–æ 75% –æ—Ç —á–µ–∫–∞\n"
                "‚Ä¢ 100 - –±–∞–ª–ª—ã –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã—Ç—å –≤–µ—Å—å —á–µ–∫\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 100):",
                parse_mode='HTML'
            )
        elif choice == "5":
            await state.update_data(setting_type="bonus_for_points_usage")
            await state.set_state(LoyaltySettingsStates.waiting_for_bonus_points_usage)
            await message.answer(
                "üéÅ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏:\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 0.3 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 0.3% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏\n"
                "‚Ä¢ 0.5 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 0.5% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏\n"
                "‚Ä¢ 1.0 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 1.0% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 0.1, –º–∞–∫—Å–∏–º—É–º 5.0):",
                parse_mode='HTML'
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 5 –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b>:", parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"Error handling setting choice: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

async def handle_redeem_rate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞"""
    try:
        try:
            redeem_rate = float(message.text.strip())
            if redeem_rate < 1000 or redeem_rate > 100000:
                await message.answer("‚ùå –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1000 –¥–æ 100000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):")
            return
        
        await state.update_data(new_value=redeem_rate)
        await show_confirmation(message, state, "–∫—É—Ä—Å –æ–±–º–µ–Ω–∞", f"{redeem_rate:,.0f} VND –∑–∞ 1 –±–∞–ª–ª")
        
    except Exception as e:
        logger.error(f"Error handling redeem rate: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞.")

async def handle_min_purchase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
    try:
        try:
            min_purchase = int(message.text.strip())
            if min_purchase < 0 or min_purchase > 1000000:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1000000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000):")
            return
        
        await state.update_data(new_value=min_purchase)
        await show_confirmation(message, state, "–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É", f"{min_purchase:,.0f} VND")
        
    except Exception as e:
        logger.error(f"Error handling min purchase: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏.")

async def handle_max_discount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏"""
    try:
        try:
            max_discount = float(message.text.strip())
            if max_discount < 1 or max_discount > 100:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 40):")
            return
        
        await state.update_data(new_value=max_discount)
        await show_confirmation(message, state, "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É", f"{max_discount}%")
        
    except Exception as e:
        logger.error(f"Error handling max discount: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏.")

async def handle_max_percent_bill(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞"""
    try:
        try:
            max_percent_bill = float(message.text.strip())
            if max_percent_bill < 1 or max_percent_bill > 100:
                await message.answer("‚ùå –ì—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):")
            return
        
        await state.update_data(new_value=max_percent_bill)
        await show_confirmation(message, state, "–≥—Ä–∞–Ω–∏—Ü—É –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞", f"{max_percent_bill}%")
        
    except Exception as e:
        logger.error(f"Error handling max percent bill: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞.")

async def handle_bonus_points_usage(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏"""
    try:
        try:
            bonus_points_usage = float(message.text.strip())
            if bonus_points_usage < 0.1 or bonus_points_usage > 5.0:
                await message.answer("‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 5.0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3):")
            return
        
        await state.update_data(new_value=bonus_points_usage)
        await show_confirmation(message, state, "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–ª–∞–º–∏", f"{bonus_points_usage}%")
        
    except Exception as e:
        logger.error(f"Error handling bonus points usage: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏.")

async def show_confirmation(message: Message, state: FSMContext, setting_name: str, new_value: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        setting_type = data['setting_type']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_value = await get_current_setting_value(setting_type)
        
        await state.set_state(LoyaltySettingsStates.waiting_for_confirmation)
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
            f"‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä:</b> {setting_name}\n"
            f"üìä <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {current_value}\n"
            f"üÜï <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {new_value}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ü–û–î–¢–í–ï–†–î–ò–¢–¨</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error showing confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    try:
        confirmation = message.text.strip().upper()
        
        if confirmation in ["–ü–û–î–¢–í–ï–†–î–ò–¢–¨", "–î–ê", "YES", "OK", "SAVE"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            data = await state.get_data()
            success = await save_loyalty_setting(
                data['setting_type'],
                data['new_value'],
                message.from_user.id
            )
            
            if success:
                await message.answer(
                    f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                    f"‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n"
                    f"üìä –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
                
        elif confirmation in ["–û–¢–ú–ï–ù–ê", "–ù–ï–¢", "NO", "CANCEL"]:
            await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ü–û–î–¢–í–ï–†–î–ò–¢–¨</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:", parse_mode='HTML')
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def get_current_setting_value(setting_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        from core.database.db_adapter import db_v2
        
        query = """
            SELECT redeem_rate, min_purchase_for_points, max_discount_percent, max_percent_per_bill, bonus_for_points_usage
            FROM platform_loyalty_config 
            ORDER BY id DESC LIMIT 1
        """
        result = db_v2.fetch_one(query, ())
        
        if result:
            redeem_rate, min_purchase, max_discount, max_percent_bill, bonus_for_points_usage = result
            
            if setting_type == "redeem_rate":
                return f"{redeem_rate:,.0f} VND –∑–∞ 1 –±–∞–ª–ª"
            elif setting_type == "min_purchase":
                return f"{min_purchase:,.0f} VND"
            elif setting_type == "max_discount":
                return f"{max_discount}%"
            elif setting_type == "max_percent_bill":
                return f"{max_percent_bill}%"
            elif setting_type == "bonus_for_points_usage":
                return f"{bonus_for_points_usage}%"
        
        return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
    except Exception as e:
        logger.error(f"Error getting current setting value: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

async def save_loyalty_setting(setting_type: str, new_value: float, admin_id: int) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        from core.database.db_adapter import db_v2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if setting_type == "redeem_rate":
            query = """
                UPDATE platform_loyalty_config 
                SET redeem_rate = ?, updated_at = datetime('now'), updated_by = ?
                WHERE id = (SELECT id FROM platform_loyalty_config ORDER BY id DESC LIMIT 1)
            """
            db_v2.execute(query, (new_value, admin_id))
        elif setting_type == "min_purchase":
            query = """
                UPDATE platform_loyalty_config 
                SET min_purchase_for_points = ?, updated_at = datetime('now'), updated_by = ?
                WHERE id = (SELECT id FROM platform_loyalty_config ORDER BY id DESC LIMIT 1)
            """
            db_v2.execute(query, (new_value, admin_id))
        elif setting_type == "max_discount":
            query = """
                UPDATE platform_loyalty_config 
                SET max_discount_percent = ?, updated_at = datetime('now'), updated_by = ?
                WHERE id = (SELECT id FROM platform_loyalty_config ORDER BY id DESC LIMIT 1)
            """
            db_v2.execute(query, (new_value, admin_id))
        elif setting_type == "max_percent_bill":
            query = """
                UPDATE platform_loyalty_config 
                SET max_percent_per_bill = ?, updated_at = datetime('now'), updated_by = ?
                WHERE id = (SELECT id FROM platform_loyalty_config ORDER BY id DESC LIMIT 1)
            """
            db_v2.execute(query, (new_value, admin_id))
        elif setting_type == "bonus_for_points_usage":
            query = """
                UPDATE platform_loyalty_config 
                SET bonus_for_points_usage = ?, updated_at = datetime('now'), updated_by = ?
                WHERE id = (SELECT id FROM platform_loyalty_config ORDER BY id DESC LIMIT 1)
            """
            db_v2.execute(query, (new_value, admin_id))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        log_query = """
            INSERT INTO admin_logs (admin_id, action, details, created_at)
            VALUES (?, ?, ?, datetime('now'))
        """
        db_v2.execute(log_query, (
            admin_id,
            'loyalty_setting_changed',
            f"Setting: {setting_type}, New value: {new_value}"
        ))
        
        return True
            
    except Exception as e:
        logger.error(f"Error saving loyalty setting: {e}")
        return False
