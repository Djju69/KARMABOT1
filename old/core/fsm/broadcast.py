"""
FSM –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫
–°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
"""
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import logging

logger = logging.getLogger(__name__)

class BroadcastStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    waiting_for_message = State()      # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    waiting_for_recipients = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    waiting_for_confirmation = State() # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def start_broadcast(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await state.set_state(BroadcastStates.waiting_for_message)
        await message.answer(
            "üìß <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "üìù <b>–®–∞–≥ 1 –∏–∑ 3:</b> –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:</b>\n"
            "‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏)\n"
            "‚Ä¢ –≠–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error starting broadcast: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def handle_message_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        message_text = message.text.strip()
        
        if len(message_text) < 10:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        if len(message_text) > 4096:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(message_text=message_text)
        await state.set_state(BroadcastStates.waiting_for_recipients)
        
        await message.answer(
            f"‚úÖ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
            f"üìù <b>–®–∞–≥ 2 –∏–∑ 3:</b> –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n\n"
            f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            f"ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º\n"
            f"üëë <b>–ê–¥–º–∏–Ω—ã</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
            f"üì± <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1-4):",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error handling message text: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_recipients_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    try:
        choice = message.text.strip()
        
        recipient_types = {
            "1": "all_users",
            "2": "partners", 
            "3": "admins",
            "4": "active_users"
        }
        
        recipient_names = {
            "1": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "2": "–ø–∞—Ä—Ç–Ω–µ—Ä–∞–º",
            "3": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
            "4": "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        }
        
        if choice not in recipient_types:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4:")
            return
        
        recipient_type = recipient_types[choice]
        recipient_name = recipient_names[choice]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipient_count = await get_recipient_count(recipient_type)
        
        await state.update_data(recipient_type=recipient_type, recipient_name=recipient_name)
        await state.set_state(BroadcastStates.waiting_for_confirmation)
        
        data = await state.get_data()
        
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"üìù <b>–®–∞–≥ 3 –∏–∑ 3:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
            f"üìß <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{data['message_text'][:200]}{'...' if len(data['message_text']) > 200 else ''}\n\n"
            f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {recipient_name} ({recipient_count} —á–µ–ª–æ–≤–µ–∫)\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ü–û–î–¢–í–ï–†–î–ò–¢–¨</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error handling recipients selection: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")

async def handle_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        confirmation = message.text.strip().upper()
        
        if confirmation in ["–ü–û–î–¢–í–ï–†–î–ò–¢–¨", "–î–ê", "YES", "OK", "SEND"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            data = await state.get_data()
            success_count, error_count = await send_broadcast(
                message.from_user.id,
                data['message_text'],
                data['recipient_type']
            )
            
            await message.answer(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                f"‚Ä¢ üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {data['recipient_name']}\n\n"
                f"üìß –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                parse_mode='HTML'
            )
            
        elif confirmation in ["–û–¢–ú–ï–ù–ê", "–ù–ï–¢", "NO", "CANCEL"]:
            await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ü–û–î–¢–í–ï–†–î–ò–¢–¨</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ <b>–û–¢–ú–ï–ù–ê</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:", parse_mode='HTML')
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def get_recipient_count(recipient_type: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É"""
    try:
        from core.database.db_v2 import get_connection
        
        with get_connection() as conn:
            if recipient_type == "all_users":
                cursor = conn.execute("SELECT COUNT(*) FROM users")
            elif recipient_type == "partners":
                cursor = conn.execute("SELECT COUNT(*) FROM partners WHERE status = 'active'")
            elif recipient_type == "admins":
                cursor = conn.execute("SELECT COUNT(*) FROM users WHERE role IN ('admin', 'super_admin')")
            elif recipient_type == "active_users":
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM users 
                    WHERE last_activity > NOW() - INTERVAL '30 days'
                """)
            else:
                return 0
            
            result = cursor.fetchone()
            return result[0] if result else 0
            
    except Exception as e:
        logger.error(f"Error getting recipient count: {e}")
        return 0

async def send_broadcast(sender_id: int, message_text: str, recipient_type: str) -> tuple[int, int]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    try:
        from core.database.db_v2 import get_connection
        from aiogram import Bot
        from core.settings import BOT_TOKEN
        
        bot = Bot(token=BOT_TOKEN)
        success_count = 0
        error_count = 0
        
        with get_connection() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if recipient_type == "all_users":
                cursor = conn.execute("SELECT telegram_id FROM users WHERE telegram_id IS NOT NULL")
            elif recipient_type == "partners":
                cursor = conn.execute("""
                    SELECT DISTINCT u.telegram_id FROM users u 
                    JOIN partners p ON u.partner_id = p.id 
                    WHERE p.status = 'active' AND u.telegram_id IS NOT NULL
                """)
            elif recipient_type == "admins":
                cursor = conn.execute("""
                    SELECT telegram_id FROM users 
                    WHERE role IN ('admin', 'super_admin') AND telegram_id IS NOT NULL
                """)
            elif recipient_type == "active_users":
                cursor = conn.execute("""
                    SELECT telegram_id FROM users 
                    WHERE last_activity > NOW() - INTERVAL '30 days' 
                    AND telegram_id IS NOT NULL
                """)
            else:
                return 0, 0
            
            recipients = cursor.fetchall()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for recipient in recipients:
                try:
                    await bot.send_message(
                        chat_id=recipient[0],
                        text=message_text,
                        parse_mode='HTML'
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"Error sending to {recipient[0]}: {e}")
                    error_count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            conn.execute("""
                INSERT INTO admin_logs (admin_id, action, details, created_at)
                VALUES (%s, %s, %s, NOW())
            """, (
                sender_id,
                'broadcast_sent',
                f"Recipients: {recipient_type}, Success: {success_count}, Errors: {error_count}"
            ))
            conn.commit()
            
        return success_count, error_count
        
    except Exception as e:
        logger.error(f"Error sending broadcast: {e}")
        return 0, 1
