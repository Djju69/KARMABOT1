#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_db_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database.db_adapter import db_v2
        
        logger.info(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: PostgreSQL={db_v2.use_postgresql}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = db_v2.get_categories()
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(categories)} —à—Ç—É–∫")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = db_v2.get_cards_by_category('restaurants', status='approved')
        logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã: {len(cards)} —à—Ç—É–∫")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner = db_v2.get_or_create_partner(999999999, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ä—Ç–Ω–µ—Ä 2")
        logger.info(f"‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω: ID={partner.id}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    success = await test_db_adapter()
    
    if success:
        logger.info("üéâ –ê–î–ê–ü–¢–ï–† –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        logger.error("‚ùå –ê–î–ê–ü–¢–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())
