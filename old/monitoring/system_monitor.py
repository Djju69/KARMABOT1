import asyncio
import json
import smtplib
import requests
from datetime import datetime, timedelta
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
import os
import sys
import logging

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database.enhanced_unified_service import enhanced_unified_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.alert_email = os.getenv('ALERT_EMAIL', 'admin@example.com')
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.smtp_username = os.getenv('SMTP_USERNAME')
        self.smtp_password = os.getenv('SMTP_PASSWORD')
        self.telegram_bot_token = os.getenv('ALERT_BOT_TOKEN')
        self.telegram_chat_id = os.getenv('ALERT_CHAT_ID')
        
        self.last_alerts = {}
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
        
        logger.info("üîç SystemMonitor initialized")
    
    async def run_monitoring_loop(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç Starting system monitoring...")
        
        while True:
            try:
                await self.check_system_health()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(60)
    
    async def check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"""
        try:
            dashboard_data = enhanced_unified_db.get_admin_dashboard_data()
            system_status = dashboard_data['system_status']
            alerts = dashboard_data['alerts']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
            for alert in alerts:
                if alert['level'] == 'critical':
                    await self.send_critical_alert(alert)
                elif alert['level'] == 'warning':
                    await self.send_warning_alert(alert)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if not system_status['health']['overall']:
                await self.send_system_down_alert(system_status)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π
            pending_ops = system_status['queue']['total_operations']
            if pending_ops > 200:
                await self.send_queue_overflow_alert(pending_ops)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º uptime
            uptime = system_status['uptime']['overall']
            if uptime < 90:
                await self.send_low_uptime_alert(uptime)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            mode = system_status['mode']
            logger.info(f"‚úÖ System check: Mode={mode}, Pending={pending_ops}, Uptime={uptime}%")
            
        except Exception as e:
            logger.error(f"Error checking system health: {e}")
            await self.send_monitoring_error_alert(str(e))
    
    async def send_critical_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç"""
        alert_key = f"critical_{alert['message']}"
        
        if self._should_send_alert(alert_key):
            subject = "üö® CRITICAL: Multi-Platform System Alert"
            message = f"""
üö® CRITICAL SYSTEM ALERT

Message: {alert['message']}
Since: {alert.get('since', 'Unknown')}
Action Required: {alert.get('action', 'No action specified')}
Platform Impact: {alert.get('platform_impact', 'All platforms may be affected')}

Time: {datetime.now().isoformat()}

üõ°Ô∏è Fault-Tolerant System is handling the failure automatically, 
but immediate attention is required to restore full functionality.

Current System Mode: Degraded (operating with fallback mechanisms)
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üö® CRITICAL: {alert['message']}")
            
            self.last_alerts[alert_key] = datetime.now()
    
    async def send_warning_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∞–ª–µ—Ä—Ç"""
        alert_key = f"warning_{alert['message']}"
        
        if self._should_send_alert(alert_key):
            subject = "‚ö†Ô∏è WARNING: Multi-Platform System Alert"
            message = f"""
‚ö†Ô∏è SYSTEM WARNING

Message: {alert['message']}
Since: {alert.get('since', 'Unknown')}
Recommended Action: {alert.get('action', 'Monitor situation')}
Platform Impact: {alert.get('platform_impact', 'Limited platform functionality')}

Time: {datetime.now().isoformat()}

The system is operating normally with some limitations.
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"‚ö†Ô∏è WARNING: {alert['message']}")
            
            self.last_alerts[alert_key] = datetime.now()
    
    async def send_system_down_alert(self, system_status):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ –ø–∞–¥–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        alert_key = "system_down"
        
        if self._should_send_alert(alert_key):
            mode = system_status['mode']
            
            subject = "üî¥ SYSTEM DEGRADED: Multi-Platform Database Services"
            message = f"""
üî¥ SYSTEM DEGRADED ALERT

Current Mode: {mode}
PostgreSQL: {"‚ùå DOWN" if not system_status['health']['postgresql']['status'] else "‚úÖ UP"}
Supabase: {"‚ùå DOWN" if not system_status['health']['supabase']['status'] else "‚úÖ UP"}

üõ°Ô∏è FAULT TOLERANCE STATUS:
- System is operating in degraded mode
- Users can still access cached data
- New operations are queued for processing
- All platforms (Telegram, Website, Mobile, Desktop, API) are affected

Platform Status:
ü§ñ Telegram Bot: Limited functionality
üåê Website: Limited functionality  
üì± Mobile Apps: Offline mode
üñ•Ô∏è Desktop Apps: Cache only
üîó Partner API: Limited

Time: {datetime.now().isoformat()}

üö® IMMEDIATE ACTION REQUIRED
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üî¥ SYSTEM DEGRADED: Mode={mode}")
            
            self.last_alerts[alert_key] = datetime.now()
    
    async def send_queue_overflow_alert(self, pending_operations):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏"""
        alert_key = "queue_overflow"
        
        if self._should_send_alert(alert_key):
            subject = "üìä Multi-Platform Queue Overflow Alert"
            message = f"""
üìä OPERATION QUEUE OVERFLOW

Pending Operations: {pending_operations}
Threshold: 200

This indicates that operations from all platforms are not being processed fast enough.

Affected Platforms:
ü§ñ Telegram: Orders and user operations queued
üåê Website: Registration and orders delayed
üì± Mobile: Sync operations pending
üîó API: Partner requests queued

Consider manual sync or database performance optimization.

Time: {datetime.now().isoformat()}
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üìä Queue Overflow: {pending_operations} pending operations across all platforms")
            
            self.last_alerts[alert_key] = datetime.now()
    
    async def send_low_uptime_alert(self, uptime):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ –Ω–∏–∑–∫–æ–º uptime"""
        alert_key = "low_uptime"
        
        if self._should_send_alert(alert_key):
            subject = "üìâ Low Multi-Platform System Uptime Alert"
            message = f"""
üìâ LOW SYSTEM UPTIME

Current Uptime: {uptime}%
Threshold: 90%

Multi-platform system reliability is below acceptable levels.
All platforms (Telegram, Website, Mobile, Desktop, API) are affected.

Please investigate recent outages and improve stability.

Time: {datetime.now().isoformat()}
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üìâ Low Uptime: {uptime}% - All platforms affected")
            
            self.last_alerts[alert_key] = datetime.now()
    
    async def send_monitoring_error_alert(self, error_message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        alert_key = "monitoring_error"
        
        if self._should_send_alert(alert_key):
            subject = "üîß Multi-Platform Monitoring System Error"
            message = f"""
üîß MONITORING SYSTEM ERROR

Error: {error_message}

The monitoring system encountered an error while checking multi-platform system health.
This may indicate a serious system issue affecting all platforms.

Time: {datetime.now().isoformat()}
            """
            
            await self._send_alert_email(subject, message)
            await self._send_telegram_alert(f"üîß Monitoring Error: {error_message[:100]}...")
            
            self.last_alerts[alert_key] = datetime.now()
    
    def _should_send_alert(self, alert_key):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç (cooldown)"""
        if alert_key not in self.last_alerts:
            return True
        
        last_sent = self.last_alerts[alert_key]
        cooldown_expired = datetime.now() - last_sent > timedelta(seconds=self.alert_cooldown)
        
        return cooldown_expired
    
    async def _send_alert_email(self, subject, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∞–ª–µ—Ä—Ç"""
        if not all([self.smtp_username, self.smtp_password, self.alert_email]):
            logger.warning("Email credentials not configured, skipping email alert")
            return
        
        try:
            msg = MimeMultipart()
            msg['From'] = self.smtp_username
            msg['To'] = self.alert_email
            msg['Subject'] = subject
            
            msg.attach(MimeText(message, 'plain'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)
            
            text = msg.as_string()
            server.sendmail(self.smtp_username, self.alert_email, text)
            server.quit()
            
            logger.info(f"üìß Email alert sent: {subject}")
            
        except Exception as e:
            logger.error(f"Failed to send email alert: {e}")
    
    async def _send_telegram_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram –∞–ª–µ—Ä—Ç"""
        if not all([self.telegram_bot_token, self.telegram_chat_id]):
            logger.warning("Telegram credentials not configured, skipping Telegram alert")
            return
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"üì± Telegram alert sent: {message[:50]}...")
            else:
                logger.error(f"Failed to send Telegram alert: HTTP {response.status_code}")
                
        except Exception as e:
            logger.error(f"Failed to send Telegram alert: {e}")
    
    async def send_recovery_notification(self, component):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        subject = f"‚úÖ RECOVERY: {component} restored"
        message = f"""
‚úÖ SYSTEM RECOVERY NOTIFICATION

Component: {component}
Status: Restored
Time: {datetime.now().isoformat()}

Multi-platform system functionality has been restored.
All platforms should now operate normally.
        """
        
        await self._send_alert_email(subject, message)
        await self._send_telegram_alert(f"‚úÖ RECOVERY: {component} restored")
        
        logger.info(f"‚úÖ Recovery notification sent for {component}")
    
    async def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            dashboard_data = enhanced_unified_db.get_admin_dashboard_data()
            system_status = dashboard_data['system_status']
            platform_stats = dashboard_data.get('platform_stats', {})
            
            subject = "üìä Daily Multi-Platform System Report"
            message = f"""
üìä DAILY SYSTEM REPORT - {datetime.now().strftime('%Y-%m-%d')}

=== SYSTEM OVERVIEW ===
Mode: {system_status['mode']}
Overall Health: {"‚úÖ Healthy" if system_status['health']['overall'] else "‚ùå Issues"}
Overall Uptime: {system_status['uptime']['overall']}%

=== DATABASE STATUS ===
PostgreSQL: {"‚úÖ Online" if system_status['health']['postgresql']['status'] else "‚ùå Offline"} ({system_status['uptime']['postgresql']}% uptime)
Supabase: {"‚úÖ Online" if system_status['health']['supabase']['status'] else "‚ùå Offline"} ({system_status['uptime']['supabase']}% uptime)

=== OPERATION QUEUE ===
Total Pending: {system_status['queue']['total_operations']}
PostgreSQL Queue: {system_status['queue']['by_target_db'].get('postgresql', 0)}
Supabase Queue: {system_status['queue']['by_target_db'].get('supabase', 0)}

=== CACHE STATUS ===
Total Items: {system_status['cache']['total_items']}
Valid Items: {system_status['cache']['valid_items']}
Memory Usage: {system_status['cache']['memory_usage_mb']:.1f} MB

=== PLATFORM STATISTICS ===
Total Platforms: {platform_stats.get('total_platforms', 'N/A')}
Active Users: {platform_stats.get('active_users', 'N/A')}
Daily Orders: {platform_stats.get('daily_orders', 'N/A')}

=== PLATFORM BREAKDOWN ===
ü§ñ Telegram: {platform_stats.get('telegram', {}).get('users', 'N/A')} users
üåê Website: {platform_stats.get('website', {}).get('users', 'N/A')} users
üì± Mobile: {platform_stats.get('mobile', {}).get('users', 'N/A')} users
üñ•Ô∏è Desktop: {platform_stats.get('desktop', {}).get('users', 'N/A')} users
üîó API: {platform_stats.get('api', {}).get('requests', 'N/A')} requests

Generated: {datetime.now().isoformat()}
            """
            
            await self._send_alert_email(subject, message)
            logger.info("üìä Daily report sent successfully")
            
        except Exception as e:
            logger.error(f"Failed to generate daily report: {e}")

class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.last_health_status = {}
    
    async def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            health_data = enhanced_unified_db.health_check()
            
            pg_status = health_data['health']['postgresql']['status']
            sb_status = health_data['health']['supabase']['status']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if 'postgresql' in self.last_health_status:
                if self.last_health_status['postgresql'] != pg_status:
                    if pg_status:
                        logger.info("‚úÖ PostgreSQL recovered")
                    else:
                        logger.warning("‚ùå PostgreSQL went offline")
            
            if 'supabase' in self.last_health_status:
                if self.last_health_status['supabase'] != sb_status:
                    if sb_status:
                        logger.info("‚úÖ Supabase recovered")
                    else:
                        logger.warning("‚ùå Supabase went offline")
            
            self.last_health_status['postgresql'] = pg_status
            self.last_health_status['supabase'] = sb_status
            
            return health_data
            
        except Exception as e:
            logger.error(f"Error checking database health: {e}")
            return None
    
    async def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API endpoints"""
        endpoints = [
            '/admin/health',
            '/platforms',
            '/telegram/users/',
            '/website/users/',
            '/mobile/users/',
            '/desktop/users/'
        ]
        
        results = {}
        
        for endpoint in endpoints:
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
                # response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
                # results[endpoint] = response.status_code == 200
                results[endpoint] = True  # –ó–∞–≥–ª—É—à–∫–∞
            except Exception:
                results[endpoint] = False
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = SystemMonitor()
    health_checker = HealthChecker()
    
    logger.info("üöÄ Starting Multi-Platform System Monitor")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await monitor._send_telegram_alert("üöÄ Multi-Platform System Monitor started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_task = asyncio.create_task(monitor.run_monitoring_loop())
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cron)
    async def daily_reports():
        while True:
            now = datetime.now()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            if now.hour == 9 and now.minute == 0:
                await monitor.generate_daily_report()
                await asyncio.sleep(60)  # –°–ø–∏–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
            await asyncio.sleep(60)
    
    daily_task = asyncio.create_task(daily_reports())
    
    try:
        await asyncio.gather(monitor_task, daily_task)
    except KeyboardInterrupt:
        logger.info("üõë Monitoring stopped by user")
    except Exception as e:
        logger.error(f"Critical monitoring error: {e}")
        await monitor._send_telegram_alert(f"üö® CRITICAL: Monitoring system crashed: {e}")

if __name__ == "__main__":
    asyncio.run(main())
