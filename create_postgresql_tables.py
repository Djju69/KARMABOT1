#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü PostgreSQL –≤ Supabase
"""

import os
import asyncio
import asyncpg
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def create_tables():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL: {database_url[:50]}...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(database_url)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        create_tables_sql = """
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        CREATE TABLE IF NOT EXISTS categories_v2 (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            slug VARCHAR(50) UNIQUE NOT NULL,
            emoji VARCHAR(10),
            description TEXT,
            is_active BOOLEAN DEFAULT true,
            priority_level INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        CREATE TABLE IF NOT EXISTS partners_v2 (
            id SERIAL PRIMARY KEY,
            tg_user_id BIGINT UNIQUE NOT NULL,
            display_name VARCHAR(200),
            phone VARCHAR(20),
            email VARCHAR(100),
            is_verified BOOLEAN DEFAULT false,
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ä—Ç–æ—á–µ–∫
        CREATE TABLE IF NOT EXISTS cards_v2 (
            id SERIAL PRIMARY KEY,
            partner_id INTEGER NOT NULL REFERENCES partners_v2(id) ON DELETE CASCADE,
            category_id INTEGER NOT NULL REFERENCES categories_v2(id) ON DELETE CASCADE,
            title VARCHAR(200) NOT NULL,
            description TEXT,
            address TEXT,
            contact VARCHAR(100),
            google_maps_url TEXT,
            discount_text TEXT,
            status VARCHAR(20) DEFAULT 'pending',
            priority_level INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
        CREATE TABLE IF NOT EXISTS card_photos (
            id SERIAL PRIMARY KEY,
            card_id INTEGER NOT NULL REFERENCES cards_v2(id) ON DELETE CASCADE,
            file_id VARCHAR(200) NOT NULL,
            file_path VARCHAR(500),
            is_main BOOLEAN DEFAULT false,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        CREATE INDEX IF NOT EXISTS idx_partners_tg_user_id ON partners_v2(tg_user_id);
        CREATE INDEX IF NOT EXISTS idx_cards_category_id ON cards_v2(category_id);
        CREATE INDEX IF NOT EXISTS idx_cards_status ON cards_v2(status);
        CREATE INDEX IF NOT EXISTS idx_cards_partner_id ON cards_v2(partner_id);
        CREATE INDEX IF NOT EXISTS idx_categories_slug ON categories_v2(slug);
        CREATE INDEX IF NOT EXISTS idx_categories_active ON categories_v2(is_active);
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        await conn.execute(create_tables_sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await add_test_data(conn)
        
        await conn.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

async def add_test_data(conn):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    logger.info("üìä –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = [
        ('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'restaurants', 'üçΩÔ∏è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ', 100),
        ('SPA –∏ –∫—Ä–∞—Å–æ—Ç–∞', 'spa', 'üíÜ', 'SPA, —Å–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã', 90),
        ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'transport', 'üöó', '–¢–∞–∫—Å–∏, –∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ', 80),
        ('–û—Ç–µ–ª–∏', 'hotels', 'üè®', '–û—Ç–µ–ª–∏ –∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã', 70),
        ('–¢—É—Ä—ã', 'tours', '‚úàÔ∏è', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 60),
        ('–ú–∞–≥–∞–∑–∏–Ω—ã', 'shops', 'üõçÔ∏è', '–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è', 50)
    ]
    
    for name, slug, emoji, description, priority in categories_data:
        await conn.execute("""
            INSERT INTO categories_v2 (name, slug, emoji, description, priority_level)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (slug) DO NOTHING
        """, name, slug, emoji, description, priority)
    
    logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    partner_result = await conn.fetchrow("""
        INSERT INTO partners_v2 (tg_user_id, display_name, phone, email, is_verified, is_active)
        VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT (tg_user_id) DO UPDATE SET display_name = EXCLUDED.display_name
        RETURNING id
    """, 7006636786, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä', '+7 (999) 123-45-67', 'test@example.com', True, True)
    
    partner_id = partner_result['id']
    logger.info(f"‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ID={partner_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    cards_data = [
        (partner_id, 'restaurants', '–†–µ—Å—Ç–æ—Ä–∞–Ω "–í–∫—É—Å–Ω–æ"', '–õ—É—á—à–∏–µ –±–ª—é–¥–∞ –≥–æ—Ä–æ–¥–∞', '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1', '+7 (999) 111-11-11', '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –±–ª—é–¥–∞'),
        (partner_id, 'spa', 'SPA "–†–µ–ª–∞–∫—Å"', '–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä SPA —É—Å–ª—É–≥', '—É–ª. –ú–∏—Ä–∞, 15', '+7 (999) 222-22-22', '–°–∫–∏–¥–∫–∞ 30% –Ω–∞ –º–∞—Å—Å–∞–∂'),
        (partner_id, 'transport', '–¢–∞–∫—Å–∏ "–ë—ã—Å—Ç—Ä–æ"', '–ë—ã—Å—Ç—Ä–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ç–∞–∫—Å–∏', '—É–ª. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è, 5', '+7 (999) 333-33-33', '–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –ø–æ–µ–∑–¥–∫–∏'),
        (partner_id, 'hotels', '–û—Ç–µ–ª—å "–ö–æ–º—Ñ–æ—Ä—Ç"', '–£—é—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ', '—É–ª. –ì–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è, 10', '+7 (999) 444-44-44', '–°–∫–∏–¥–∫–∞ 25% –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'),
        (partner_id, 'tours', '–¢—É—Ä—ã "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏', '—É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 3', '+7 (999) 555-55-55', '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ —Ç—É—Ä—ã'),
        (partner_id, 'shops', '–ú–∞–≥–∞–∑–∏–Ω "–í—Å–µ –¥–ª—è –¥–æ–º–∞"', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ —Å–∞–¥–∞', '—É–ª. –¢–æ—Ä–≥–æ–≤–∞—è, 7', '+7 (999) 666-66-66', '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã')
    ]
    
    for partner_id_val, category_slug, title, description, address, contact, discount in cards_data:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_result = await conn.fetchrow("SELECT id FROM categories_v2 WHERE slug = $1", category_slug)
        if category_result:
            category_id = category_result['id']
            
            await conn.execute("""
                INSERT INTO cards_v2 (partner_id, category_id, title, description, address, contact, discount_text, status)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            """, partner_id_val, category_id, title, description, address, contact, discount, 'approved')
    
    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü PostgreSQL –¥–ª—è KarmaBot")
    
    success = await create_tables()
    
    if success:
        logger.info("üéâ –í–°–ï –ì–û–¢–û–í–û! –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã, —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        logger.info("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")

if __name__ == "__main__":
    asyncio.run(main())
