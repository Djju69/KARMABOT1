"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
"""
import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.getcwd())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class CriticalFunctionTester:
    """–¢–µ—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.results = {}
    
    async def test_critical_functions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await self.test_user_registration()
        await self.test_loyalty_points()
        await self.test_partner_registration()
        await self.test_catalog_functionality()
        await self.test_admin_panel()
        await self.test_webapp_cabinets()
        
        return self.results
    
    async def test_user_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info("üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        try:
            from core.database.db_adapter import db_v2
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = await db_v2.get_or_create_user(
                telegram_id=999999999,
                username="test_user",
                first_name="Test",
                last_name="User",
                language_code="ru"
            )
            
            success = test_user is not None
            self.results['user_registration'] = {
                'success': success,
                'message': f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {test_user.get('is_new_user', False)}",
                'data': test_user
            }
            
            logger.info(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['user_registration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    async def test_loyalty_points(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
        logger.info("üíé –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞–ª–ª–æ–≤...")
        
        try:
            from core.services.loyalty_service import loyalty_service
            
            test_user_id = 999999999
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            balance = await loyalty_service.get_user_points_balance(test_user_id)
            
            # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤
            history = await loyalty_service.get_points_history(test_user_id, limit=5)
            
            success = balance is not None
            self.results['loyalty_points'] = {
                'success': success,
                'message': f"–ë–∞–ª–∞–Ω—Å: {balance}, –ò—Å—Ç–æ—Ä–∏—è: {len(history)} –∑–∞–ø–∏—Å–µ–π",
                'data': {'balance': balance, 'history_count': len(history)}
            }
            
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['loyalty_points'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤: {e}")
    
    async def test_partner_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        logger.info("ü§ù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
        
        try:
            from core.database.db_adapter import db_v2
            from core.database.db_v2 import Partner
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            test_partner = Partner(
                id=None,
                tg_user_id=999999998,
                display_name="Test Partner",
                phone="+1234567890",
                email="test@partner.com",
                description="Test partner for testing",
                status="pending",
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            created_partner = await db_v2.create_partner(test_partner)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            pending_partners = await db_v2.get_partners_by_status('pending')
            
            success = created_partner is not None
            self.results['partner_registration'] = {
                'success': success,
                'message': f"–ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω: {success}, –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_partners)}",
                'data': {'created': success, 'pending_count': len(pending_partners)}
            }
            
            logger.info(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['partner_registration'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {e}")
    
    async def test_catalog_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        logger.info("üè™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥...")
        
        try:
            from core.database.db_adapter import db_v2
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = await db_v2.get_categories()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
            cards = await db_v2.get_cards_by_category('restaurants')
            
            success = categories is not None
            self.results['catalog_functionality'] = {
                'success': success,
                'message': f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}, –ö–∞—Ä—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö: {len(cards)}",
                'data': {'categories_count': len(categories), 'cards_count': len(cards)}
            }
            
            logger.info(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['catalog_functionality'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    
    async def test_admin_panel(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
        logger.info("üëë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å...")
        
        try:
            from core.services.user_service import get_user_role
            from core.services.analytics_service import analytics_service
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
            role = await get_user_role(999999999)
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            user_metrics = await analytics_service.get_user_metrics()
            
            success = role is not None
            self.results['admin_panel'] = {
                'success': success,
                'message': f"–†–æ–ª—å: {role}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_metrics.total_users}",
                'data': {'role': role, 'users_count': user_metrics.total_users}
            }
            
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['admin_panel'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏: {e}")
    
    async def test_webapp_cabinets(self):
        """–¢–µ—Å—Ç WebApp –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º WebApp –∫–∞–±–∏–Ω–µ—Ç—ã...")
        
        try:
            from core.services.webapp_integration import WebAppIntegration
            
            webapp = WebAppIntegration()
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_url = webapp.create_webapp_url(
                telegram_id=999999999,
                role="user",
                webapp_path="/user-cabinet.html"
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_url = webapp.create_webapp_url(
                telegram_id=999999998,
                role="partner",
                webapp_path="/partner-cabinet.html"
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è –∞–¥–º–∏–Ω–∞
            admin_url = webapp.create_webapp_url(
                telegram_id=999999997,
                role="admin",
                webapp_path="/admin-cabinet.html"
            )
            
            success = all([user_url, partner_url, admin_url])
            self.results['webapp_cabinets'] = {
                'success': success,
                'message': f"URL —Å–æ–∑–¥–∞–Ω—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bool(user_url)}, –ü–∞—Ä—Ç–Ω–µ—Ä: {bool(partner_url)}, –ê–¥–º–∏–Ω: {bool(admin_url)}",
                'data': {'user_url': bool(user_url), 'partner_url': bool(partner_url), 'admin_url': bool(admin_url)}
            }
            
            logger.info(f"‚úÖ WebApp –∫–∞–±–∏–Ω–µ—Ç—ã: {'–†–∞–±–æ—Ç–∞—é—Ç' if success else '–û—à–∏–±–∫–∞'}")
            
        except Exception as e:
            self.results['webapp_cabinets'] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {e}",
                'data': None
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebApp –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CriticalFunctionTester()
    results = await tester.test_critical_functions()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú –§–£–ù–ö–¶–ò–Ø–ú:")
    
    total_tests = len(results)
    passed_tests = sum(1 for r in results.values() if r['success'])
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        logger.info(f"{status} {test_name}: {result['message']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    import json
    report = {
        'summary': {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'failed_tests': total_tests - passed_tests,
            'success_rate': round(success_rate, 2)
        },
        'results': results,
        'timestamp': datetime.now().isoformat()
    }
    
    with open('critical_functions_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    logger.info("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ critical_functions_report.json")
    
    return report


if __name__ == "__main__":
    asyncio.run(main())
