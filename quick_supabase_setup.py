#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""
import os
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_env_file_with_password(password):
    """–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...")
    
    # –î–∞–Ω–Ω—ã–µ Supabase –ø—Ä–æ–µ–∫—Ç–∞
    SUPABASE_PROJECT_REF = "svtotgesqufeazjkztlv"
    SUPABASE_PROJECT_URL = "https://svtotgesqufeazjkztlv.supabase.co"
    SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2dG90Z2VzcXVmZWF6amt6dGx2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxOTc3NTEsImV4cCI6MjA3Mzc3Mzc1MX0.SzPMTuCokyTuoYLmP7tKBLDmsa_YklvA2DW6yhaRYro"
    
    # –°–æ–∑–¥–∞–µ–º DATABASE_URL
    database_url = f"postgresql://postgres:{password}@db.{SUPABASE_PROJECT_REF}.supabase.co:5432/postgres"
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    env_content = f"""# Supabase Configuration
DATABASE_URL={database_url}
APPLY_MIGRATIONS=1

# Supabase API
SUPABASE_URL={SUPABASE_PROJECT_URL}
SUPABASE_KEY={SUPABASE_API_KEY}

# Bot Configuration
BOT_TOKEN=your_bot_token_here
REDIS_URL=redis://localhost:6379/0

# Environment
ENVIRONMENT=development
LOG_LEVEL=INFO
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        logger.info("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!")
        logger.info(f"üìä DATABASE_URL: {database_url[:50]}...")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return False

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    
    try:
        import asyncpg
        
        db_url = os.getenv("DATABASE_URL")
        if not db_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        version = await conn.fetchval("SELECT version()")
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –í–µ—Ä—Å–∏—è: {version[:50]}...")
        
        await conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    common_passwords = [
        "password",
        "123456",
        "admin",
        "supabase",
        "postgres",
        "karmabot",
        "railway"
    ]
    
    logger.info("üîç –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏...")
    
    for password in common_passwords:
        logger.info(f"üîë –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å: {password}")
        
        # –°–æ–∑–¥–∞–µ–º .env —Å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º
        if create_env_file_with_password(password):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            try:
                from dotenv import load_dotenv
                load_dotenv()
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                result = asyncio.run(test_connection())
                if result:
                    logger.info(f"üéâ –£–°–ü–ï–•! –ü–∞—Ä–æ–ª—å: {password}")
                    logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã!")
                    logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!")
                    return True
                else:
                    logger.info(f"‚ùå –ü–∞—Ä–æ–ª—å {password} –Ω–µ –ø–æ–¥–æ—à–µ–ª")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º {password}: {e}")
    
    logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª")
    logger.info("üí° –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ Supabase Dashboard")
    logger.info("üìã Settings ‚Üí Database ‚Üí Reset database password")
    
    return False

if __name__ == "__main__":
    main()
