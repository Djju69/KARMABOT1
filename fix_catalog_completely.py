#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê
–ó–∞–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import os
import sys
import psycopg2
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def populate_all_categories():
    """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    print("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê")
    print("=" * 60)
    
    try:
        database_url = os.getenv('DATABASE_URL', '')
        if not database_url.startswith('postgresql://'):
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è PostgreSQL")
            return False
            
        conn = psycopg2.connect(database_url)
        cur = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("üîß –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        try:
            cur.execute("ALTER TABLE card_photos ADD COLUMN IF NOT EXISTS position INTEGER DEFAULT 0")
            cur.execute("ALTER TABLE card_photos ADD COLUMN IF NOT EXISTS file_id TEXT")
            cur.execute("ALTER TABLE cards_v2 ADD COLUMN IF NOT EXISTS sub_slug VARCHAR(50)")
            cur.execute("ALTER TABLE partners_v2 ADD COLUMN IF NOT EXISTS karma_points INTEGER DEFAULT 0")
            conn.commit()
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞: {e}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
        cur.execute("""
            INSERT INTO partners_v2 (tg_user_id, display_name, username, status, karma_points)
            VALUES (999999999, 'Sample Partner', 'sample_partner', 'active', 1000)
            ON CONFLICT (tg_user_id) DO NOTHING
            RETURNING id
        """)
        
        partner_result = cur.fetchone()
        if partner_result:
            partner_id = partner_result[0]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä ID: {partner_id}")
        else:
            cur.execute("SELECT id FROM partners_v2 WHERE tg_user_id = 999999999")
            partner_id = cur.fetchone()[0]
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ID: {partner_id}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        cur.execute("SELECT id, slug, name FROM categories_v2 ORDER BY priority_level DESC")
        categories = cur.fetchall()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories_map = {
            'restaurants': ['asia', 'italian', 'fastfood', 'european', 'russian'],
            'transport': ['cars', 'bikes', 'bicycles', 'scooters', 'motorcycles'],
            'hotels': ['hotels', 'apartments', 'hostels', 'resorts'],
            'shops': ['clothing', 'electronics', 'food', 'books', 'sports'],
            'spa': ['massage', 'beauty', 'wellness', 'salon'],
            'tours': ['excursions', 'travel', 'adventure', 'cultural']
        }
        
        total_cards_added = 0
        total_photos_added = 0
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for cat_id, slug, name in categories:
            print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {slug} ({name})")
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subs = subcategories_map.get(slug, ['general'])
            
            cards_in_category = 0
            
            for sub_slug in subs:
                print(f"   üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {sub_slug}")
                
                # –î–æ–±–∞–≤–∏—Ç—å 3-5 –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞–∂–¥—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                cards_to_add = 3
                
                for i in range(cards_to_add):
                    # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    card_title = f"–¢–µ—Å—Ç {name} {sub_slug.title()} {i+1}"
                    card_description = f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} –¥–ª—è {name} - {sub_slug}"
                    
                    # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                    cur.execute("""
                        INSERT INTO cards_v2 (
                            partner_id, category_id, title, description, 
                            status, sub_slug
                        ) VALUES (%s, %s, %s, %s, 'published', %s)
                        RETURNING id
                    """, (partner_id, cat_id, card_title, card_description, sub_slug))
                    
                    card_result = cur.fetchone()
                    if card_result:
                        card_id = card_result[0]
                        cards_in_category += 1
                        total_cards_added += 1
                        
                        # –î–æ–±–∞–≤–∏—Ç—å 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                        for photo_num in range(1, 3):
                            cur.execute("""
                                INSERT INTO card_photos (
                                    card_id, photo_url, photo_file_id, 
                                    is_main, position, file_id
                                ) VALUES (%s, %s, %s, %s, %s, %s)
                            """, (
                                card_id,
                                f"https://example.com/photo_{card_id}_{photo_num}.jpg",
                                f"photo_{card_id}_{photo_num}",
                                photo_num == 1,
                                photo_num,
                                f"photo_{card_id}_{photo_num}"
                            ))
                            total_photos_added += 1
                        
                        print(f"      ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1}: {card_title}")
            
            print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {slug}: {cards_in_category} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()
        
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        print(f"üìä –ò–¢–û–ì–û –î–û–ë–ê–í–õ–ï–ù–û:")
        print(f"   - –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards_added}")
        print(f"   - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos_added}")
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(categories)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        cur.execute("""
            SELECT 
                c.slug,
                COUNT(cards.id) as total_cards,
                COUNT(CASE WHEN cards.status = 'published' THEN 1 END) as published_cards
            FROM categories_v2 c
            LEFT JOIN cards_v2 cards ON c.id = cards.category_id
            GROUP BY c.id, c.slug
            ORDER BY published_cards DESC;
        """)
        
        final_check = cur.fetchall()
        
        print(f"{'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–í—Å–µ–≥–æ':<8} {'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ':<12} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 50)
        
        all_categories_have_cards = True
        for slug, total, published in final_check:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if published > 0 else "‚ùå –ü–£–°–¢–ê–Ø"
            print(f"{slug:<15} {total:<8} {published:<12} {status}")
            
            if published == 0:
                all_categories_have_cards = False
        
        conn.close()
        
        if all_categories_have_cards:
            print("\nüéâ –£–°–ü–ï–•: –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏!")
            return True
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–º–∏")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = populate_all_categories()
    if success:
        print("\nüéØ –ö–ê–¢–ê–õ–û–ì –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ—Ç–µ")
    else:
        print("\nüö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        sys.exit(1)
