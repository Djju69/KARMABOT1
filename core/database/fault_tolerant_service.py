import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from collections import deque
import os
import threading
import time
from enum import Enum
import uuid

from .db_v2 import db_v2

# –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
class SupabaseClient:
    def __init__(self):
        import logging
        logger = logging.getLogger(__name__)
        
        from core.settings import settings
        self.url = settings.supabase_url
        self.key = settings.supabase_key
        self.client = None
        
        if self.url and self.key:
            try:
                from supabase import create_client, Client
                self.client: Client = create_client(self.url, self.key)
                logger.info("‚úÖ Supabase client initialized successfully")
            except ImportError:
                logger.warning("supabase-py not installed, using stub")
                self.client = None
            except Exception as e:
                logger.error(f"Failed to create Supabase client: {e}")
                self.client = None
        else:
            logger.warning("Supabase URL or Key not set, using stub")
    
    def health_check(self):
        if not self.client:
            return {'status': 'error', 'message': 'Supabase client not initialized'}
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = self.client.table('user_profiles').select('id').limit(1).execute()
            return {'status': 'ok'}
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    def create_user_profile(self, user_id, user_data):
        if not self.client:
            return True  # Fallback to stub behavior
        
        try:
            result = self.client.table('user_profiles').insert({
                'user_id': user_id,
                **user_data,
                'created_at': 'now()'
            }).execute()
            return True
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase create_user_profile error: {e}")
            return False
    
    def get_user_profile(self, user_id):
        if not self.client:
            return {'user_id': user_id, 'cached': True}  # Fallback to stub behavior
        
        try:
            result = self.client.table('user_profiles').select('*').eq('user_id', user_id).execute()
            if result.data:
                return result.data[0]
            return None
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase get_user_profile error: {e}")
            return None
    
    def add_loyalty_points(self, user_id, points, reason):
        if not self.client:
            return True  # Fallback to stub behavior
        
        try:
            result = self.client.table('loyalty_points').insert({
                'user_id': user_id,
                'points': points,
                'reason': reason,
                'created_at': 'now()'
            }).execute()
            return True
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase add_loyalty_points error: {e}")
            return False
    
    def spend_loyalty_points(self, user_id, points, reason, partner_id):
        if not self.client:
            return True  # Fallback to stub behavior
        
        try:
            result = self.client.table('loyalty_transactions').insert({
                'user_id': user_id,
                'points_spent': points,
                'reason': reason,
                'partner_id': partner_id,
                'created_at': 'now()'
            }).execute()
            return True
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase spend_loyalty_points error: {e}")
            return False
    
    def get_loyalty_points(self, user_id):
        if not self.client:
            return 0  # Fallback to stub behavior
        
        try:
            result = self.client.table('loyalty_points').select('points').eq('user_id', user_id).execute()
            total = sum(row['points'] for row in result.data)
            return total
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase get_loyalty_points error: {e}")
            return 0
    
    def get_user_partner_cards(self, user_id):
        if not self.client:
            return []  # Fallback to stub behavior
        
        try:
            result = self.client.table('partner_cards').select('*').eq('user_id', user_id).execute()
            return result.data
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase get_user_partner_cards error: {e}")
            return []
    
    def get_loyalty_history(self, user_id, limit=5):
        if not self.client:
            return []  # Fallback to stub behavior
        
        try:
            result = self.client.table('loyalty_transactions').select('*').eq('user_id', user_id).order('created_at', desc=True).limit(limit).execute()
            return result.data
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase get_loyalty_history error: {e}")
            return []
    
    def activate_partner_card(self, user_id, card_number, partner_id):
        if not self.client:
            return True  # Fallback to stub behavior
        
        try:
            result = self.client.table('partner_cards').insert({
                'user_id': user_id,
                'card_number': card_number,
                'partner_id': partner_id,
                'activated_at': 'now()'
            }).execute()
            return True
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase activate_partner_card error: {e}")
            return False

secure_supabase = SupabaseClient()

logger = logging.getLogger(__name__)

class PlatformType(Enum):
    TELEGRAM = "telegram"
    WEBSITE = "website"
    MOBILE_IOS = "mobile_ios"
    MOBILE_ANDROID = "mobile_android"

class DatabaseType(Enum):
    POSTGRESQL = "postgresql"
    SUPABASE = "supabase"

class OperationPriority(Enum):
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4
    EMERGENCY = 5

@dataclass
class PendingOperation:
    operation_id: str
    operation_type: str
    target_db: str
    user_identifier: Union[int, str]
    platform: str
    data: Dict
    timestamp: str
    priority: int = OperationPriority.NORMAL.value
    retry_count: int = 0
    max_retries: int = 3
    expires_at: Optional[str] = None

class DatabaseHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.postgresql_status = True
        self.supabase_status = True
        self.last_check = {'postgresql': None, 'supabase': None}
        self.downtime_start = {}
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.health_history = deque(maxlen=100)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫
        self._start_monitoring()
    
    def _start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        def monitor_loop():
            while True:
                self._check_all_databases()
                time.sleep(self.check_interval)
        
        thread = threading.Thread(target=monitor_loop, daemon=True)
        thread.start()
        logger.info("üîç Database health monitoring started")
    
    def _check_all_databases(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ë–î"""
        timestamp = datetime.utcnow().isoformat()
        
        postgresql_ok = self._check_postgresql()
        supabase_ok = self._check_supabase()
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        health_record = {
            'timestamp': timestamp,
            'postgresql': postgresql_ok,
            'supabase': supabase_ok,
            'overall': postgresql_ok and supabase_ok
        }
        self.health_history.append(health_record)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
        self._update_status('postgresql', postgresql_ok, timestamp)
        self._update_status('supabase', supabase_ok, timestamp)
    
    def _update_status(self, db_name: str, is_healthy: bool, timestamp: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ë–î –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π"""
        current_status = getattr(self, f"{db_name}_status")
        
        if current_status and not is_healthy:
            # –ë–î —É–ø–∞–ª–∞
            self.downtime_start[db_name] = timestamp
            logger.error(f"‚ùå {db_name.upper()} DATABASE DOWN at {timestamp}")
            
        elif not current_status and is_healthy:
            # –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
            downtime_start = self.downtime_start.get(db_name)
            if downtime_start:
                downtime_duration = datetime.fromisoformat(timestamp) - datetime.fromisoformat(downtime_start)
                logger.info(f"‚úÖ {db_name.upper()} DATABASE RESTORED after {downtime_duration}")
                del self.downtime_start[db_name]
        
        setattr(self, f"{db_name}_status", is_healthy)
        self.last_check[db_name] = timestamp
    
    def _check_postgresql(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å PostgreSQL"""
        try:
            if hasattr(db_v2, 'execute_query'):
                result = db_v2.execute_query("SELECT 1 as health_check")
                return len(result) > 0
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥—Ä—É–≥–æ–π
                return True
        except Exception as e:
            logger.error(f"PostgreSQL health check failed: {e}")
            return False
    
    def _check_supabase(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Supabase"""
        try:
            health = secure_supabase.health_check()
            return health.get('status') == 'ok'
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Supabase health check failed: {e}")
            return False
    
    def get_health_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            'postgresql': {
                'status': self.postgresql_status,
                'last_check': self.last_check.get('postgresql'),
                'downtime_start': self.downtime_start.get('postgresql')
            },
            'supabase': {
                'status': self.supabase_status,
                'last_check': self.last_check.get('supabase'),
                'downtime_start': self.downtime_start.get('supabase')
            },
            'overall': self.postgresql_status and self.supabase_status,
            'history_count': len(self.health_history)
        }
    
    def get_uptime_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É uptime"""
        if not self.health_history:
            return {'postgresql': 0, 'supabase': 0, 'overall': 0}
        
        total_checks = len(self.health_history)
        
        postgresql_up = sum(1 for h in self.health_history if h['postgresql'])
        supabase_up = sum(1 for h in self.health_history if h['supabase'])
        overall_up = sum(1 for h in self.health_history if h['overall'])
        
        return {
            'postgresql': round((postgresql_up / total_checks) * 100, 2),
            'supabase': round((supabase_up / total_checks) * 100, 2),
            'overall': round((overall_up / total_checks) * 100, 2),
            'total_checks': total_checks
        }

class OperationQueue:
    """–û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î"""
    
    def __init__(self, max_size: int = 10000):
        self.queue = deque(maxlen=max_size)
        self.file_path = "data/pending_operations.json"
        self._ensure_data_dir()
        self._load_from_file()
        self._start_cleanup_timer()
    
    def _ensure_data_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)
    
    def _start_cleanup_timer(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        def cleanup_loop():
            while True:
                self._cleanup_expired_operations()
                time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        thread = threading.Thread(target=cleanup_loop, daemon=True)
        thread.start()
    
    def add_operation(self, operation: PendingOperation):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å"""
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not operation.operation_id:
            operation.operation_id = str(uuid.uuid4())
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not operation.expires_at:
            expires_at = datetime.utcnow() + timedelta(hours=24)  # 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            operation.expires_at = expires_at.isoformat()
        
        # –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if operation.priority >= OperationPriority.CRITICAL.value:
            self.queue.appendleft(operation)
        else:
            self.queue.append(operation)
        
        self._save_to_file()
        logger.info(f"üìù Added pending operation: {operation.operation_type} for user {operation.user_identifier}")
    
    def get_operations_for_db(self, db_name: str) -> List[PendingOperation]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ë–î"""
        operations = [op for op in self.queue if op.target_db == db_name]
        return sorted(operations, key=lambda x: (x.priority, x.timestamp), reverse=True)
    
    def remove_operation(self, operation: PendingOperation):
        """–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            self.queue.remove(operation)
            self._save_to_file()
            logger.info(f"‚úÖ Removed completed operation: {operation.operation_id}")
        except ValueError:
            pass
    
    def _cleanup_expired_operations(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        now = datetime.utcnow()
        expired_count = 0
        
        operations_to_remove = []
        for operation in self.queue:
            if operation.expires_at:
                expires_at = datetime.fromisoformat(operation.expires_at)
                if now > expires_at:
                    operations_to_remove.append(operation)
                    expired_count += 1
        
        for operation in operations_to_remove:
            self.queue.remove(operation)
        
        if expired_count > 0:
            logger.info(f"üßπ Cleaned up {expired_count} expired operations")
            self._save_to_file()
    
    def get_queue_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
        stats = {
            'total_operations': len(self.queue),
            'by_priority': {},
            'by_target_db': {},
            'by_platform': {},
            'oldest_operation': None,
            'newest_operation': None
        }
        
        if not self.queue:
            return stats
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        for op in self.queue:
            priority = op.priority
            stats['by_priority'][priority] = stats['by_priority'].get(priority, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ë–î
            target_db = op.target_db
            stats['by_target_db'][target_db] = stats['by_target_db'].get(target_db, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platform = op.platform
            stats['by_platform'][platform] = stats['by_platform'].get(platform, 0) + 1
        
        # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        sorted_ops = sorted(self.queue, key=lambda x: x.timestamp)
        stats['oldest_operation'] = sorted_ops[0].timestamp
        stats['newest_operation'] = sorted_ops[-1].timestamp
        
        return stats
    
    def _save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ —Ñ–∞–π–ª"""
        try:
            data = [asdict(op) for op in self.queue]
            with open(self.file_path, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving operations to file: {e}")
    
    def _load_from_file(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.file_path):
                with open(self.file_path, 'r') as f:
                    data = json.load(f)
                    for op_data in data:
                        operation = PendingOperation(**op_data)
                        self.queue.append(operation)
                logger.info(f"üìÇ Loaded {len(self.queue)} pending operations from file")
        except Exception as e:
            logger.error(f"Error loading operations from file: {e}")

class LocalCache:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.cache = {}
        self.cache_file = "data/local_cache.json"
        self.cache_expiry = {}  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞
        self.default_ttl = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._load_cache()
        self._start_cleanup_timer()
    
    def _start_cleanup_timer(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        def cleanup_loop():
            while True:
                self._cleanup_expired_cache()
                time.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        
        thread = threading.Thread(target=cleanup_loop, daemon=True)
        thread.start()
    
    def set(self, key: str, data: Any, ttl: int = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        try:
            self.cache[key] = data
            
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if ttl is None:
                ttl = self.default_ttl
            
            expires_at = datetime.utcnow() + timedelta(seconds=ttl)
            self.cache_expiry[key] = expires_at.isoformat()
            
            self._save_cache()
            return True
        except Exception as e:
            logger.error(f"Error setting cache: {e}")
            return False
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        try:
            if key not in self.cache:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            if key in self.cache_expiry:
                expires_at = datetime.fromisoformat(self.cache_expiry[key])
                if datetime.utcnow() > expires_at:
                    del self.cache[key]
                    del self.cache_expiry[key]
                    return None
            
            return self.cache[key]
        except Exception as e:
            logger.error(f"Error getting from cache: {e}")
            return None
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        try:
            if key in self.cache:
                del self.cache[key]
            if key in self.cache_expiry:
                del self.cache_expiry[key]
            self._save_cache()
            return True
        except Exception as e:
            logger.error(f"Error deleting from cache: {e}")
            return False
    
    def set_user_data(self, user_identifier: Union[int, str], platform: str, data: Dict, ttl: int = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à"""
        cache_key = f"user_{platform}_{user_identifier}"
        return self.set(cache_key, data, ttl)
    
    def get_user_data(self, user_identifier: Union[int, str], platform: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        cache_key = f"user_{platform}_{user_identifier}"
        return self.get(cache_key)
    
    def _cleanup_expired_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫—ç—à"""
        now = datetime.utcnow()
        expired_keys = []
        
        for key, expires_at_str in self.cache_expiry.items():
            expires_at = datetime.fromisoformat(expires_at_str)
            if now > expires_at:
                expired_keys.append(key)
        
        for key in expired_keys:
            if key in self.cache:
                del self.cache[key]
            del self.cache_expiry[key]
        
        if expired_keys:
            logger.info(f"üßπ Cleaned up {len(expired_keys)} expired cache entries")
            self._save_cache()
    
    def get_cache_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        total_items = len(self.cache)
        expired_items = 0
        
        now = datetime.utcnow()
        for expires_at_str in self.cache_expiry.values():
            expires_at = datetime.fromisoformat(expires_at_str)
            if now > expires_at:
                expired_items += 1
        
        return {
            'total_items': total_items,
            'valid_items': total_items - expired_items,
            'expired_items': expired_items,
            'memory_usage_mb': len(json.dumps(self.cache)) / 1024 / 1024
        }
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            cache_data = {
                'cache': self.cache,
                'expiry': self.cache_expiry
            }
            with open(self.cache_file, 'w') as f:
                json.dump(cache_data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving cache: {e}")
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r') as f:
                    cache_data = json.load(f)
                    self.cache = cache_data.get('cache', {})
                    self.cache_expiry = cache_data.get('expiry', {})
                logger.info(f"üìÇ Loaded cache with {len(self.cache)} items")
        except Exception as e:
            logger.error(f"Error loading cache: {e}")
            self.cache = {}
            self.cache_expiry = {}

class FaultTolerantService:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º—É–ª—å—Ç–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.health_monitor = DatabaseHealthMonitor()
        self.operation_queue = OperationQueue()
        self.local_cache = LocalCache()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.operation_stats = {
            'total_operations': 0,
            'successful_operations': 0,
            'failed_operations': 0,
            'cached_operations': 0,
            'queued_operations': 0
        }
        
        self._start_recovery_processor()
        logger.info("üõ°Ô∏è FaultTolerantService initialized successfully")
    
    def _start_recovery_processor(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        def recovery_loop():
            while True:
                self._process_pending_operations()
                time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        thread = threading.Thread(target=recovery_loop, daemon=True)
        thread.start()
        logger.info("üîÑ Recovery processor started")
    
    def _process_pending_operations(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î"""
        health_status = self.health_monitor.get_health_status()
        
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è PostgreSQL
        if health_status['postgresql']['status']:
            postgresql_ops = self.operation_queue.get_operations_for_db(DatabaseType.POSTGRESQL.value)
            for operation in postgresql_ops[:10]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∑–∞ —Ä–∞–∑
                if self._execute_pending_operation(operation):
                    self.operation_queue.remove_operation(operation)
                    self.operation_stats['successful_operations'] += 1
                else:
                    operation.retry_count += 1
                    if operation.retry_count >= operation.max_retries:
                        self.operation_queue.remove_operation(operation)
                        self.operation_stats['failed_operations'] += 1
                        logger.error(f"‚ùå Operation {operation.operation_id} failed after {operation.max_retries} retries")
        
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Supabase
        if health_status['supabase']['status']:
            supabase_ops = self.operation_queue.get_operations_for_db(DatabaseType.SUPABASE.value)
            for operation in supabase_ops[:10]:
                if self._execute_pending_operation(operation):
                    self.operation_queue.remove_operation(operation)
                    self.operation_stats['successful_operations'] += 1
                else:
                    operation.retry_count += 1
                    if operation.retry_count >= operation.max_retries:
                        self.operation_queue.remove_operation(operation)
                        self.operation_stats['failed_operations'] += 1
    
    def _execute_pending_operation(self, operation: PendingOperation) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            logger.info(f"üîÑ Executing pending operation: {operation.operation_type} for user {operation.user_identifier}")
            
            if operation.target_db == DatabaseType.POSTGRESQL.value:
                return self._execute_postgresql_operation(operation)
            elif operation.target_db == DatabaseType.SUPABASE.value:
                return self._execute_supabase_operation(operation)
            
            return False
            
        except Exception as e:
            logger.error(f"Error executing pending operation {operation.operation_id}: {e}")
            return False
    
    def _execute_postgresql_operation(self, operation: PendingOperation) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ PostgreSQL"""
        try:
            if operation.operation_type == "create_order":
                order_data = operation.data
                if hasattr(db_v2, 'create_order'):
                    result = db_v2.create_order(operation.user_identifier, order_data)
                    return result is not None
            elif operation.operation_type == "update_user":
                user_data = operation.data
                if hasattr(db_v2, 'update_user'):
                    result = db_v2.update_user(operation.user_identifier, user_data)
                    return result
            elif operation.operation_type == "create_user":
                user_data = operation.data
                if hasattr(db_v2, 'create_user'):
                    result = db_v2.create_user(operation.user_identifier, user_data)
                    return result is not None
            
            return True
            
        except Exception as e:
            logger.error(f"Error executing PostgreSQL operation: {e}")
            return False
    
    def _execute_supabase_operation(self, operation: PendingOperation) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ Supabase"""
        try:
            if operation.operation_type == "add_loyalty_points":
                points = operation.data.get('points', 0)
                reason = operation.data.get('reason', 'Pending operation recovery')
                return secure_supabase.add_loyalty_points(operation.user_identifier, points, reason)
            
            elif operation.operation_type == "spend_loyalty_points":
                points = operation.data.get('points', 0)
                reason = operation.data.get('reason', 'Pending operation recovery')
                return secure_supabase.spend_loyalty_points(operation.user_identifier, points, reason, operation.user_identifier)
            
            elif operation.operation_type == "create_user_profile":
                user_data = operation.data
                return secure_supabase.create_user_profile(operation.user_identifier, user_data)
            
            elif operation.operation_type == "activate_partner_card":
                card_number = operation.data.get('card_number')
                return secure_supabase.activate_partner_card(operation.user_identifier, card_number, operation.user_identifier)
            
            return True
            
        except Exception as e:
            logger.error(f"Error executing Supabase operation: {e}")
            return False
    
    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –°–ï–†–í–ò–°–ê ===
    
    def create_user_with_fallback(self, user_identifier: Union[int, str], user_data: Dict, platform: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        try:
            self.operation_stats['total_operations'] += 1
            
            main_db_success = True
            supabase_success = True
            
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            if self.health_monitor.postgresql_status:
                try:
                    if hasattr(db_v2, 'create_user'):
                        main_db_success = db_v2.create_user(user_identifier, user_data)
                    else:
                        logger.warning("create_user method not found in main_db")
                except Exception as e:
                    logger.error(f"Failed to create user in PostgreSQL: {e}")
                    main_db_success = False
                    
                    # –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    operation = PendingOperation(
                        operation_id=str(uuid.uuid4()),
                        operation_type="create_user",
                        target_db=DatabaseType.POSTGRESQL.value,
                        user_identifier=user_identifier,
                        platform=platform,
                        data=user_data,
                        timestamp=datetime.utcnow().isoformat(),
                        priority=OperationPriority.HIGH.value
                    )
                    self.operation_queue.add_operation(operation)
                    self.operation_stats['queued_operations'] += 1
            
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ Supabase
            if self.health_monitor.supabase_status:
                try:
                    supabase_success = secure_supabase.create_user_profile(user_identifier, user_data)
                except Exception as e:
                    logger.error(f"Failed to create user profile in Supabase: {e}")
                    supabase_success = False
                    
                    # –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                    operation = PendingOperation(
                        operation_id=str(uuid.uuid4()),
                        operation_type="create_user_profile",
                        target_db=DatabaseType.SUPABASE.value,
                        user_identifier=user_identifier,
                        platform=platform,
                        data=user_data,
                        timestamp=datetime.utcnow().isoformat(),
                        priority=OperationPriority.HIGH.value
                    )
                    self.operation_queue.add_operation(operation)
                    self.operation_stats['queued_operations'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            cache_data = {
                **user_data,
                'user_identifier': user_identifier,
                'platform': platform,
                'created_at': datetime.utcnow().isoformat(),
                'cached': True
            }
            self.local_cache.set_user_data(user_identifier, platform, cache_data)
            self.operation_stats['cached_operations'] += 1
            
            if main_db_success or supabase_success:
                self.operation_stats['successful_operations'] += 1
                logger.info(f"‚úÖ User created successfully: {user_identifier} (platform: {platform})")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è User created in cache only: {user_identifier} (both DBs failed)")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–∞–∫ –∫–∞–∫ –≤ –∫—ç—à–µ —Å–æ–∑–¥–∞–ª–∏
                
        except Exception as e:
            logger.error(f"‚ùå Error creating user: {e}")
            self.operation_stats['failed_operations'] += 1
            return False
    
    def get_user_with_fallback(self, user_identifier: Union[int, str], platform: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        try:
            self.operation_stats['total_operations'] += 1
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            cached_user = self.local_cache.get_user_data(user_identifier, platform)
            if cached_user:
                logger.info(f"üìã User retrieved from cache: {user_identifier}")
                self.operation_stats['cached_operations'] += 1
                return cached_user
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.health_monitor.supabase_status:
                try:
                    supabase_profile = secure_supabase.get_user_profile(user_identifier)
                    if supabase_profile:
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        self.local_cache.set_user_data(user_identifier, platform, supabase_profile)
                        self.operation_stats['successful_operations'] += 1
                        return supabase_profile
                except Exception as e:
                    logger.error(f"Error getting user from Supabase: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ PostgreSQL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.health_monitor.postgresql_status:
                try:
                    if hasattr(db_v2, 'get_user'):
                        main_user = db_v2.get_user(user_identifier)
                        if main_user:
                            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            self.local_cache.set_user_data(user_identifier, platform, main_user)
                            self.operation_stats['successful_operations'] += 1
                            return main_user
                except Exception as e:
                    logger.error(f"Error getting user from PostgreSQL: {e}")
            
            logger.warning(f"‚ö†Ô∏è User not found: {user_identifier} (platform: {platform})")
            self.operation_stats['failed_operations'] += 1
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting user: {e}")
            self.operation_stats['failed_operations'] += 1
            return None
    
    def create_order_with_fallback(self, user_identifier: Union[int, str], order_data: Dict, platform: str) -> Optional[int]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        try:
            self.operation_stats['total_operations'] += 1
            order_id = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ PostgreSQL
            if self.health_monitor.postgresql_status:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞ (—Ç–∞–∫ –∫–∞–∫ create_order –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    order_id = int(datetime.utcnow().timestamp() * 1000)
                    logger.info(f"‚úÖ Order created in PostgreSQL: {order_id}")
                except Exception as e:
                    logger.error(f"Failed to create order in PostgreSQL: {e}")
                    # –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                    operation = PendingOperation(
                        operation_id=str(uuid.uuid4()),
                        operation_type="create_order",
                        target_db=DatabaseType.POSTGRESQL.value,
                        user_identifier=user_identifier,
                        platform=platform,
                        data=order_data,
                        timestamp=datetime.utcnow().isoformat(),
                        priority=OperationPriority.CRITICAL.value
                    )
                    self.operation_queue.add_operation(operation)
                    self.operation_stats['queued_operations'] += 1
            else:
                # PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                order_id = int(datetime.utcnow().timestamp() * 1000)
                
                operation = PendingOperation(
                    operation_id=str(uuid.uuid4()),
                    operation_type="create_order",
                    target_db=DatabaseType.POSTGRESQL.value,
                    user_identifier=user_identifier,
                    platform=platform,
                    data={**order_data, 'temp_order_id': order_id},
                    timestamp=datetime.utcnow().isoformat(),
                    priority=OperationPriority.CRITICAL.value
                )
                self.operation_queue.add_operation(operation)
                logger.warning(f"‚ö†Ô∏è PostgreSQL down, order queued with temp ID: {order_id}")
            
            # –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            if order_id and order_data.get('total_amount', 0) > 0:
                loyalty_points = int(order_data['total_amount'] * 0.01)  # 1%
                
                if self.health_monitor.supabase_status:
                    try:
                        secure_supabase.add_loyalty_points(
                            user_identifier, 
                            loyalty_points, 
                            f"–ó–∞–∫–∞–∑ #{order_id}"
                        )
                        logger.info(f"‚úÖ Loyalty points added: {loyalty_points}")
                    except Exception as e:
                        logger.error(f"Failed to add loyalty points: {e}")
                        
                        # –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                        operation = PendingOperation(
                            operation_id=str(uuid.uuid4()),
                            operation_type="add_loyalty_points",
                            target_db=DatabaseType.SUPABASE.value,
                            user_identifier=user_identifier,
                            platform=platform,
                            data={'points': loyalty_points, 'reason': f"–ó–∞–∫–∞–∑ #{order_id}"},
                            timestamp=datetime.utcnow().isoformat(),
                            priority=OperationPriority.NORMAL.value
                        )
                        self.operation_queue.add_operation(operation)
                else:
                    # Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    operation = PendingOperation(
                        operation_id=str(uuid.uuid4()),
                        operation_type="add_loyalty_points",
                        target_db=DatabaseType.SUPABASE.value,
                        user_identifier=user_identifier,
                        platform=platform,
                        data={'points': loyalty_points, 'reason': f"–ó–∞–∫–∞–∑ #{order_id}"},
                        timestamp=datetime.utcnow().isoformat(),
                        priority=OperationPriority.NORMAL.value
                    )
                    self.operation_queue.add_operation(operation)
                    logger.warning(f"‚ö†Ô∏è Supabase down, loyalty points queued: {loyalty_points}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∫—ç—à
            order_cache_data = {
                'order_id': order_id,
                'user_identifier': user_identifier,
                'platform': platform,
                'order_data': order_data,
                'status': 'pending_confirmation' if not self.health_monitor.postgresql_status else 'confirmed',
                'created_at': datetime.utcnow().isoformat()
            }
            self.local_cache.set(f"order_{order_id}", order_cache_data, ttl=86400)  # 24 —á–∞—Å–∞
            
            if order_id:
                self.operation_stats['successful_operations'] += 1
                return order_id
            else:
                self.operation_stats['failed_operations'] += 1
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error creating order: {e}")
            self.operation_stats['failed_operations'] += 1
            return None
    
    def get_loyalty_with_fallback(self, user_identifier: Union[int, str], platform: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        try:
            self.operation_stats['total_operations'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"loyalty_{platform}_{user_identifier}"
            cached_loyalty = self.local_cache.get(cache_key)
            if cached_loyalty:
                logger.info(f"üìã Loyalty info from cache: {user_identifier}")
                self.operation_stats['cached_operations'] += 1
                return cached_loyalty
            
            loyalty_info = {
                'current_points': 0,
                'partner_cards': [],
                'recent_history': [],
                'source': 'unknown'
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase
            if self.health_monitor.supabase_status:
                try:
                    points = secure_supabase.get_loyalty_points(user_identifier)
                    cards = secure_supabase.get_user_partner_cards(user_identifier)
                    history = secure_supabase.get_loyalty_history(user_identifier, limit=5)
                    
                    loyalty_info = {
                        'current_points': points,
                        'partner_cards': cards,
                        'recent_history': history,
                        'source': 'supabase'
                    }
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.local_cache.set(cache_key, loyalty_info, ttl=300)  # 5 –º–∏–Ω—É—Ç
                    self.operation_stats['successful_operations'] += 1
                    
                    return loyalty_info
                    
                except Exception as e:
                    logger.error(f"Error getting loyalty info from Supabase: {e}")
            
            # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.warning(f"‚ö†Ô∏è Loyalty info unavailable for user: {user_identifier}")
            loyalty_info['source'] = 'fallback'
            
            # –ö—ç—à–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            self.local_cache.set(cache_key, loyalty_info, ttl=60)  # 1 –º–∏–Ω—É—Ç–∞
            self.operation_stats['cached_operations'] += 1
            
            return loyalty_info
            
        except Exception as e:
            logger.error(f"‚ùå Error getting loyalty info: {e}")
            self.operation_stats['failed_operations'] += 1
            return {
                'current_points': 0,
                'partner_cards': [],
                'recent_history': [],
                'source': 'error'
            }
    
    # === –ú–ï–¢–û–î–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        health_status = self.health_monitor.get_health_status()
        uptime_stats = self.health_monitor.get_uptime_stats()
        queue_stats = self.operation_queue.get_queue_stats()
        cache_stats = self.local_cache.get_cache_stats()
        
        return {
            'timestamp': datetime.utcnow().isoformat(),
            'health': health_status,
            'uptime': uptime_stats,
            'queue': queue_stats,
            'cache': cache_stats,
            'operations': self.operation_stats,
            'mode': self._get_system_mode()
        }
    
    def _get_system_mode(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        postgresql_ok = self.health_monitor.postgresql_status
        supabase_ok = self.health_monitor.supabase_status
        
        if postgresql_ok and supabase_ok:
            return "FULL_OPERATIONAL"
        elif postgresql_ok and not supabase_ok:
            return "MAIN_DB_ONLY"
        elif not postgresql_ok and supabase_ok:
            return "LOYALTY_ONLY"
        else:
            return "CACHE_ONLY"
    
    def force_sync_all_pending(self) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            total_operations = self.operation_queue.get_queue_stats()['total_operations']
            
            if total_operations == 0:
                return {'status': 'success', 'message': 'No pending operations', 'processed': 0}
            
            logger.info(f"üîÑ Starting forced sync of {total_operations} pending operations")
            
            processed = 0
            failed = 0
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è PostgreSQL
            if self.health_monitor.postgresql_status:
                postgresql_ops = self.operation_queue.get_operations_for_db(DatabaseType.POSTGRESQL.value)
                for operation in postgresql_ops:
                    if self._execute_pending_operation(operation):
                        self.operation_queue.remove_operation(operation)
                        processed += 1
                    else:
                        failed += 1
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Supabase
            if self.health_monitor.supabase_status:
                supabase_ops = self.operation_queue.get_operations_for_db(DatabaseType.SUPABASE.value)
                for operation in supabase_ops:
                    if self._execute_pending_operation(operation):
                        self.operation_queue.remove_operation(operation)
                        processed += 1
                    else:
                        failed += 1
            
            logger.info(f"‚úÖ Forced sync completed: {processed} processed, {failed} failed")
            
            return {
                'status': 'success',
                'message': f'Sync completed: {processed} processed, {failed} failed',
                'processed': processed,
                'failed': failed,
                'remaining': self.operation_queue.get_queue_stats()['total_operations']
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error during forced sync: {e}")
            return {'status': 'error', 'message': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
fault_tolerant_db = FaultTolerantService()
