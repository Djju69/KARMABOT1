import json
import logging
from aiogram import Router, F
from aiogram.types import WebAppData, Message
from aiogram.filters import Command

logger = logging.getLogger(__name__)
webapp_router = Router(name="webapp_handler")

@webapp_router.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')
        user_id = message.from_user.id
        
        logger.info(f"[WEBAPP] Action '{action}' from user {user_id}")
        
        if action == 'request_card':
            await message.answer("üéØ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤")
        elif action == 'show_karma_history':
            await message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã:\n‚ûï50 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n‚ûï25 - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        elif action == 'update_profile':
            await message.answer("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        elif action == 'show_referral_program':
            await message.answer("ü§ù –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!")
        elif action == 'partner_registration':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_data = data.get('data', {})
            logger.info(f"[WEBAPP] Partner registration from user {user_id}: {partner_data}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            await save_partner_application(user_id, partner_data, message)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                f"üìù <b>–î–∞–Ω–Ω—ã–µ:</b>\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {partner_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {partner_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ Email: {partner_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                "‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await notify_admins_about_partner_application(user_id, partner_data, message)
            
        elif action == 'moderation':
            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            await show_moderation_queue(message)
            
        elif action == 'open_in_browser':
            # –û—Ç–∫—Ä—ã—Ç—å WebApp –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            url = data.get('url', '')
            logger.info(f"[WEBAPP] Opening in browser: {url}")
            
            await message.answer(
                f"üåê <b>–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</b>\n\n"
                f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
                f"<code>{url}</code>\n\n"
                f"üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±—Ä–∞—É–∑–µ—Ä–∞:</b>\n"
                f"‚Ä¢ –ë–æ–ª—å—à–∏–π —ç–∫—Ä–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n"
                f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                parse_mode="HTML"
            )
        
        elif action == 'change_language':
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language = data.get('language', 'ru')
            logger.info(f"[WEBAPP] Language change request from user {user_id}: {language}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            from core.services.translation_service import translation_service
            success = translation_service.set_user_language(user_id, language)
            
            if success:
                await message.answer(
                    f"‚úÖ <b>–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                    f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {translation_service.get_language_name(language)}\n\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞.",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="HTML"
                )
            
        else:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}")
            
    except Exception as e:
        logger.error(f"[WEBAPP] Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def save_partner_application(user_id: int, partner_data: dict, message: Message):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from core.database.db_adapter import db_v2
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
        partner = db_v2.get_or_create_partner(
            tg_user_id=user_id,
            display_name=partner_data.get('name', message.from_user.first_name or '–ü–∞—Ä—Ç–Ω–µ—Ä')
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        if hasattr(partner, 'phone'):
            partner.phone = partner_data.get('phone', '')
        if hasattr(partner, 'email'):
            partner.email = partner_data.get('email', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞—è–≤–æ–∫
            from core.database.db_adapter import db_v2
            # Check if application already exists
            existing = db_v2.execute_query("""
                SELECT id FROM partner_applications WHERE telegram_user_id = ?
            """, (user_id,))
            
            if existing:
                # Update existing application
                db_v2.execute_query("""
                    UPDATE partner_applications SET
                        name = ?, phone = ?, email = ?, business_description = ?,
                        status = 'pending', created_at = datetime('now')
                    WHERE telegram_user_id = ?
                """, (
                    partner_data.get('name', ''),
                    partner_data.get('phone', ''),
                    partner_data.get('email', ''),
                    partner_data.get('description', ''),
                    user_id
                ))
            else:
                # Insert new application
                db_v2.execute_query("""
                    INSERT INTO partner_applications (
                        telegram_user_id, telegram_username, name, phone, email, 
                        business_description, status, created_at
                    ) VALUES (?, ?, ?, ?, ?, ?, 'pending', datetime('now'))
                """, (
                    user_id,
                    message.from_user.username or '',
                    partner_data.get('name', ''),
                    partner_data.get('phone', ''),
                    partner_data.get('email', ''),
                    partner_data.get('description', '')
                ))
        except Exception as e:
            logger.warning(f"[WEBAPP] Could not save to partner_applications table: {e}")
        
        logger.info(f"[WEBAPP] Partner application saved: {partner.id}")
        
    except Exception as e:
        logger.error(f"[WEBAPP] Error saving partner application: {e}")

async def notify_admins_about_partner_application(user_id: int, partner_data: dict, message: Message):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        from core.settings import settings
        
        admin_id = settings.bot.admin_id
        if admin_id:
            from aiogram import Bot
            bot = Bot.get_current()
            
            await bot.send_message(
                admin_id,
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑ username'})\n"
                f"üÜî <b>ID:</b> {user_id}\n\n"
                f"üìù <b>–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {partner_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {partner_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ Email: {partner_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {partner_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                parse_mode="HTML"
            )
            
            logger.info(f"[WEBAPP] Admin notified about partner application from user {user_id}")
            
    except Exception as e:
        logger.error(f"[WEBAPP] Error notifying admin: {e}")

async def show_moderation_queue(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    try:
        from core.database.db_adapter import db_v2
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
        partners = db_v2.get_partners_by_status('pending')
        
        if not partners:
            await message.answer(
                "üìã <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</b>\n\n"
                "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
                "–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        applications_text = "üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n"
        
        for i, partner in enumerate(partners[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            applications_text += (
                f"<b>{i}. –ü–∞—Ä—Ç–Ω–µ—Ä #{partner.id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {partner.display_name}\n"
                f"üÜî ID: {partner.tg_user_id}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {partner.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìß Email: {partner.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {partner.created_at.strftime('%d.%m.%Y %H:%M') if partner.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            )
        
        if len(partners) > 10:
            applications_text += f"... –∏ –µ—â–µ {len(partners) - 10} –∑–∞—è–≤–æ–∫\n\n"
        
        applications_text += (
            "üîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ /approve_partner [ID] - –æ–¥–æ–±—Ä–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
            "‚Ä¢ /reject_partner [ID] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n"
            "‚Ä¢ /partner_info [ID] - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        )
        
        await message.answer(applications_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"[WEBAPP] Error showing moderation queue: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")


@webapp_router.message(Command("approve_partner"))
async def approve_partner_command(message: Message):
    """–û–¥–æ–±—Ä–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from core.services.user_service import get_user_role
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve_partner [ID]")
            return
        
        try:
            partner_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –û–¥–æ–±—Ä—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        from core.database.db_adapter import db_v2
        success = await approve_partner(partner_id, message.from_user.id)
        
        if success:
            await message.answer(f"‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä #{partner_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ #{partner_id}")
            
    except Exception as e:
        logger.error(f"[WEBAPP] Error approving partner: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@webapp_router.message(Command("reject_partner"))
async def reject_partner_command(message: Message):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from core.services.user_service import get_user_role
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject_partner [ID]")
            return
        
        try:
            partner_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        from core.database.db_adapter import db_v2
        success = await reject_partner(partner_id, message.from_user.id)
        
        if success:
            await message.answer(f"‚ùå –ü–∞—Ä—Ç–Ω–µ—Ä #{partner_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ #{partner_id}")
            
    except Exception as e:
        logger.error(f"[WEBAPP] Error rejecting partner: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


async def approve_partner(partner_id: int, admin_id: int) -> bool:
    """–û–¥–æ–±—Ä–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        from core.database.db_adapter import db_v2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ 'approved'
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        # –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ db_v2
        
        logger.info(f"[MODERATION] Partner {partner_id} approved by admin {admin_id}")
        return True
        
    except Exception as e:
        logger.error(f"[MODERATION] Error approving partner {partner_id}: {e}")
        return False


async def reject_partner(partner_id: int, admin_id: int) -> bool:
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        from core.database.db_adapter import db_v2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ 'rejected'
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        # –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ db_v2
        
        logger.info(f"[MODERATION] Partner {partner_id} rejected by admin {admin_id}")
        return True
        
    except Exception as e:
        logger.error(f"[MODERATION] Error rejecting partner {partner_id}: {e}")
        return False