"""
Command handlers and utilities for the bot
"""
import logging
import asyncio
from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import BotCommand, BotCommandScopeDefault, Message, CallbackQuery
from core.utils.locales_v2 import get_text
from core.security.roles import Role
from core.security.roles import get_user_role
from core.services.cache import cache_service
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)
router = Router()

async def set_commands(bot: Bot) -> None:
    """
    Set up the bot's commands in the Telegram interface
    
    Args:
        bot: The bot instance
    """
    # v4.2.5 commands (exact list, no extras)
    base = [
        ("start", "commands.start"),
        ("add_card", "commands.add_card"),
        ("webapp", "commands.webapp"),
        ("city", "commands.city"),
        ("help", "commands.help"),
        ("policy", "commands.policy"),
        ("clear_cache", "commands.clear_cache"),
        ("tariffs", "commands.tariffs"),
    ]

    def build(locale: str):
        return [BotCommand(command=cmd, description=get_text(text_key, locale) or cmd) for cmd, text_key in base]

    try:
        # Register per-locale command sets; replaces existing lists for these locales
        for lc in ("ru", "en", "vi", "ko"):
            await bot.set_my_commands(build(lc), scope=BotCommandScopeDefault(), language_code=lc)
    except Exception as e:
        print(f"Error setting bot commands: {e}")
        raise

# –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def register_commands(router):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    
    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    from aiogram.filters import Command, CommandStart
    from aiogram.types import Message
    
    @router.message(CommandStart())
    async def cmd_start(message: Message, bot: Bot, state: FSMContext):
        """/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        from .basic import get_start
        try:
            await get_start(message, bot, state)
        except Exception as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error in cmd_start: {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @router.message(Command("help"))
    async def cmd_help(message: Message):
        """/help ‚Äî –°–ø—Ä–∞–≤–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ AI"""
        from .help_with_ai_router import help_handler
        await help_handler(message)

        try:
            from core.services.help_service import HelpService
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            help_service = HelpService()

            help_message = await help_service.get_help_message(message.from_user.id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ AI –∞–≥–µ–Ω—Ç–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ help_with_ai)
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]]
            )
            await message.answer(
                help_message,
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Error in cmd_help: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("test_help"))
async def cmd_test_help(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫"""
    try:
        from core.services.help_service import HelpService
        help_service = HelpService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = help_service.test_help_message()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML
        await message.answer(
            test_message,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_test_help: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
@router.message(Command("webapp"))
async def webapp_command(message: Message):
    """–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π Odoo"""
    
    user_id = message.from_user.id
    username = message.from_user.username or "user"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Odoo –≤ —Ñ–æ–Ω–µ
    odoo_status = await asyncio.to_thread(check_odoo_quick)
    
    # URL –¥–ª—è WebApp
    params = f"user_id={user_id}&username={username}&odoo_status={odoo_status}"
    webapp_url = f"https://web-production-d51c7.up.railway.app/webapp?{params}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
    
    webapp_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(
                text="üåê –û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                web_app=WebAppInfo(url=webapp_url)
            )],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    status_text = "‚úÖ Odoo –ø–æ–¥–∫–ª—é—á–µ–Ω" if odoo_status == "ok" else "‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º"
    
    await message.answer(
        f"üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç KARMABOT1\n\n"
        f"{status_text}\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:",
        reply_markup=webapp_keyboard
    )

def check_odoo_quick():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Odoo"""
    try:
        from core.services.odoo_api import OdooAPI
        odoo = OdooAPI()
        return "ok" if odoo.connect() else "error"
    except:
        return "error"

@router.message(Command("city"))
async def cmd_city(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    from ..keyboards.inline_v2 import get_cities_inline
    await message.answer(
        "üåÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
        reply_markup=get_cities_inline(),
        parse_mode="HTML"
    )

@router.message(Command("policy"))
async def cmd_policy(message: Message):
    await message.answer(
        "üìÑ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "–¢–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "<a href=\"/static/docs/policy.html\">/static/docs/policy.html</a>",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

# –£–¥–∞–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /add –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_card (—Å–º. partner_router).

@router.message(Command("create_test_data"))
async def cmd_create_test_data(message: Message, state: FSMContext):
    """/create_test_data - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from core.security.roles import get_user_role
        user_role = await get_user_role(message.from_user.id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        
        await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        from core.services.test_data_creator import test_data_creator
        success = await test_data_creator.create_test_partners()
        
        if success:
            await message.answer(
                "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "üìä <b>–°–æ–∑–¥–∞–Ω–æ:</b>\n"
                "‚Ä¢ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n"
                "‚Ä¢ 36 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π (–ø–æ 2 –≤ –∫–∞–∂–¥—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é)\n"
                "‚Ä¢ –í—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
                "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</b>\n"
                "‚Ä¢ üçú –†–µ—Å—Ç–æ—Ä–∞–Ω—ã (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
                "‚Ä¢ üßò SPA –∏ –º–∞—Å—Å–∞–∂ (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
                "‚Ä¢ üõµ –ê—Ä–µ–Ω–¥–∞ –±–∞–π–∫–æ–≤ (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
                "‚Ä¢ üè® –û—Ç–µ–ª–∏ (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
                "‚Ä¢ üó∫Ô∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏ (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
                "‚Ä¢ üõç –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —É—Å–ª—É–≥–∏ (6 –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n\n"
                "üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ú–æ–¥–µ—Ä–∞—Ü–∏—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
                "‚Ä¢ –ó–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è",
                parse_mode='HTML'
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            
    except Exception as e:
        logger.error(f"Error in cmd_create_test_data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    @router.message(Command("clear_cache"))
    async def cmd_clear_cache(message: Message):
        # RBAC: only ADMIN/SUPER_ADMIN
        role = await get_user_role(message.from_user.id)
        role_name = getattr(role, "name", str(role)).lower()
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∏–ø–æ–≤—ã—Ö –∫–ª—é—á–µ–π –∫—ç—à–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Ç–æ—á–µ—á–Ω–æ)
        try:
            uid = message.from_user.id
            # RBAC —Ä–æ–ª—å
            await cache_service.delete(f"rbac:role:{uid}")
            # –ö–∞—Ä—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏
            await cache_service.delete(f"card_bind_wait:{uid}")
            # –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è
            await cache_service.delete(f"loyalty:balance:{uid}")
            for limit in (5, 10, 20, 50, 100):
                await cache_service.delete(f"loyalty:tx_history:{uid}:{limit}")
            # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            await cache_service.delete(f"notify:{uid}:on")
            await cache_service.delete(f"notify:{uid}:off")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –ø–æ –º–∞—Å–∫–µ, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            try:
                await getattr(cache_service, "delete_by_mask")("*")  # type: ignore[attr-defined]
            except Exception:
                pass
            await message.answer("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω—ã –∫–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º—ã")
        except Exception as e:
            logging.getLogger(__name__).error(f"clear_cache failed: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞")

    @router.callback_query(F.data.startswith("city:set:"))
    async def handle_city_selection(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
        try:
            await callback.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
            city_id = int(callback.data.split(":")[-1])
            
            # –ú–∞–ø–ø–∏–Ω–≥ ID –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            cities = {
                1: "–ù—è—á–∞–Ω–≥",
                2: "–î–∞–Ω–∞–Ω–≥", 
                3: "–•–æ—à–∏–º–∏–Ω",
                4: "–§—É–∫—É–æ–∫"
            }
            
            city_name = cities.get(city_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.update_data(selected_city_id=city_id, selected_city_name=city_name)
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from ..services.profile import profile_service
            await profile_service.set_city_id(callback.from_user.id, city_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ <b>–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {city_name}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city_name}.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /city –¥–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞.",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logging.getLogger(__name__).error(f"city selection failed: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞")
    
    return router
