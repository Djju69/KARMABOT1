"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏—Ç-–ª–æ–≥–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.security.roles import require_permission, Permission, Role
from core.database import role_repository

logger = logging.getLogger(__name__)
router = Router()

class AuditLogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏—Ç-–ª–æ–≥–æ–º."""
    waiting_for_date_range = State()
    waiting_for_action = State()

@router.message(Command("audit_log"))
@require_permission(Permission.VIEW_AUDIT_LOG)
async def cmd_audit_log(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞."""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", callback_data="audit_last_hour")],
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="audit_today")],
        [InlineKeyboardButton(text="üìÜ –í—á–µ—Ä–∞", callback_data="audit_yesterday")],
        [InlineKeyboardButton(text="üìä –ó–∞–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="audit_custom")]
    ])
    
    await message.answer(
        "üìã <b>–ê—É–¥–∏—Ç-–ª–æ–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("audit_"))
@require_permission(Permission.VIEW_AUDIT_LOG)
async def process_audit_period(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞—É–¥–∏—Ç-–ª–æ–≥–∞."""
    period = callback.data.replace("audit_", "")
    now = datetime.utcnow()
    
    if period == "last_hour":
        start_date = now - timedelta(hours=1)
        await show_audit_log(callback, start_date, now, "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
    elif period == "today":
        start_date = datetime(now.year, now.month, now.day)
        await show_audit_log(callback, start_date, now, "–∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    elif period == "yesterday":
        end_date = datetime(now.year, now.month, now.day)
        start_date = end_date - timedelta(days=1)
        await show_audit_log(callback, start_date, end_date, "–∑–∞ –≤—á–µ—Ä–∞")
    elif period == "custom":
        await callback.message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.09.2023 - 15.09.2023",
            parse_mode="HTML"
        )
        await state.set_state(AuditLogStates.waiting_for_date_range)
    
    await callback.answer()

@router.message(AuditLogStates.waiting_for_date_range)
@require_permission(Permission.VIEW_AUDIT_LOG)
async def process_custom_date_range(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
    try:
        date_range = message.text.split(" - ")
        if len(date_range) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
        start_date = datetime.strptime(date_range[0].strip(), "%d.%m.%Y")
        end_date = datetime.strptime(date_range[1].strip(), "%d.%m.%Y") + timedelta(days=1)  # –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        
        if start_date >= end_date:
            raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
            
        period_text = f"—Å {date_range[0]} –ø–æ {date_range[1]}"
        await show_audit_log(message, start_date, end_date, period_text)
        await state.clear()
        
    except ValueError as e:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing custom date range: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_audit_log(
    message_or_callback: types.Message | types.CallbackQuery,
    start_date: datetime,
    end_date: datetime,
    period_text: str
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç-–ª–æ–≥–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—É–¥–∏—Ç-–ª–æ–≥–∞
        logs = await role_repository.get_audit_logs(
            start_date=start_date,
            end_date=end_date,
            limit=20  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        )
        
        if not logs:
            text = f"üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∞—É–¥–∏—Ç-–ª–æ–≥–µ {period_text}."
        else:
            text = f"üìã <b>–ê—É–¥–∏—Ç-–ª–æ–≥ {period_text}</b>\n\n"
            
            for log in logs:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                log_time = log['created_at'].strftime("%d.%m.%Y %H:%M:%S")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = log.get('username')
                first_name = log.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                last_name = log.get('last_name', '')
                user_info = f"{first_name} {last_name}".strip()
                if username:
                    user_info += f" (@{username})"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
                text += (
                    f"üïí <b>{log_time}</b>\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
                    f"üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {log['action']}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if log['entity_type'] and log['entity_id']:
                    text += f"üìå <b>–û–±—ä–µ–∫—Ç:</b> {log['entity_type']} (ID: {log['entity_id']})\n"
                text += "\n" + "‚îÄ" * 30 + "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
            text += f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(logs)}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.answer(text, parse_mode="HTML")
        else:
            await message_or_callback.answer(text, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error showing audit log: {e}", exc_info=True)
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç-–ª–æ–≥–∞."
        
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.answer(error_msg)
        else:
            await message_or_callback.answer(error_msg)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handlers = [router]
