"""
Router for user personal cabinet functionality.
Handles all user interactions with their personal account.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Union
import logging

from ..services.user_cabinet_service import user_cabinet_service
from ..keyboards.reply_v2 import (
    get_user_cabinet_keyboard,
    get_partner_cabinet_keyboard,
    get_return_to_main_menu
)
from ..utils.locales_v2 import get_text, get_all_texts

logger = logging.getLogger(__name__)
router = Router()


class CabinetStates(StatesGroup):
    """FSM states for user cabinet interactions."""
    viewing_profile = State()
    viewing_balance = State()
    viewing_history = State()
    spending_points = State()
    viewing_settings = State()


@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üë§ Profile"]))
async def user_cabinet_handler(message: Message, state: FSMContext):
    """Handle user cabinet entry point."""
    try:
        # Get user data
        user_id = message.from_user.id
        profile = await user_cabinet_service.get_user_profile(user_id)
        
        if not profile:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_return_to_main_menu()
            )
            return
        
        # Format profile message
        text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üè∑ ID: <code>{profile['telegram_id']}</code>\n"
            f"üë§ –ò–º—è: {profile['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üí¨ –õ–æ–≥–∏–Ω: @{profile['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üéÅ –ë–∞–ª–∞–Ω—Å: <b>{profile['balance']} –±–∞–ª–ª–æ–≤</b>\n"
            f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {profile['level']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile['registration_date']}"
        )
        
        # Add partner info if user is a partner
        if profile.get('is_partner'):
            text += "\n\nüîπ <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>"
        
        # Add referral info if available
        if profile.get('referral_code'):
            text += f"\nüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{profile['referral_code']}</code>"
        
        # Send message with appropriate keyboard
        keyboard = (
            get_partner_cabinet_keyboard(has_cards=profile.get('is_partner', False))
            if profile.get('is_partner') 
            else get_user_cabinet_keyboard()
        )
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # Set state to viewing profile
        await state.set_state(CabinetStates.viewing_profile)
        
    except Exception as e:
        logger.error(f"Error in user_cabinet_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_to_main_menu()
        )


@router.message(F.text.in_(["üéÅ –ë–∞–ª–ª—ã", "üéÅ Points"]))
async def view_balance_handler(message: Message, state: FSMContext):
    """Handle balance viewing."""
    try:
        user_id = message.from_user.id
        balance = await user_cabinet_service.get_user_balance(user_id)
        level = await user_cabinet_service.get_user_level(user_id)
        
        text = (
            f"üíé <b>–í–∞—à–∏ –±–∞–ª–ª—ã</b>\n\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{balance} –±–∞–ª–ª–æ–≤</b>\n"
            f"‚≠ê –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n\n"
            f"üí° –ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π!"
        )
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_balance)
        
    except Exception as e:
        logger.error(f"Error in view_balance_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üìú –ò—Å—Ç–æ—Ä–∏—è", "üìú History"]))
async def view_history_handler(message: Message, state: FSMContext):
    """Handle transaction history viewing."""
    try:
        user_id = message.from_user.id
        history = await user_cabinet_service.get_transaction_history(user_id, limit=5)
        
        if not history.get('transactions'):
            text = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."
        else:
            text = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            for txn in history['transactions']:
                amount = f"+{txn['amount']}" if txn['amount'] > 0 else str(txn['amount'])
                text += (
                    f"‚Ä¢ {txn['description']}: <b>{amount} –±–∞–ª–ª–æ–≤</b>\n"
                    f"  <i>{txn['created_at']} ‚Ä¢ {txn['status']}</i>\n\n"
                )
            
            if history['total'] > 5:
                text += f"\nüìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {history['total']}"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_history)
        
    except Exception as e:
        logger.error(f"Error in view_history_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è Back"]))
async def back_to_profile_handler(message: Message, state: FSMContext):
    """Handle back button to return to profile."""
    # This will be handled by the main menu router
    pass


def get_router():
    """Get the cabinet router with all handlers."""
    return router
