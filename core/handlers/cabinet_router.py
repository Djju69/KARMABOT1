"""
Router for user personal cabinet functionality.
Handles all user interactions with their personal account.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Union, Any, Dict
import logging

# Create router with a name
router = Router(name='cabinet_router')

# Import dependencies
from ..services.user_cabinet_service import user_cabinet_service
from ..keyboards.reply_v2 import (
    get_user_cabinet_keyboard,
    get_partner_cabinet_keyboard,
    get_return_to_main_menu
)
from ..utils.locales_v2 import get_text, get_all_texts, translations

logger = logging.getLogger(__name__)


def get_cabinet_router() -> Router:
    """Get the cabinet router with all handlers."""
    return router


def get_router() -> Router:
    """Compatibility alias for legacy imports."""
    return router


class CabinetStates(StatesGroup):
    """FSM states for user cabinet interactions."""
    viewing_profile = State()
    viewing_balance = State()
    viewing_history = State()
    viewing_cards = State()
    viewing_notifications = State()
    viewing_achievements = State()
    spending_points = State()
    viewing_settings = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
    adding_card_qr = State()
    adding_card_manual = State()
    adding_card_virtual = State()


@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üë§ Profile", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]))
async def user_cabinet_handler(message: Message, state: FSMContext):
    """Handle user cabinet entry point with detailed statistics."""
    try:
        # Get user data
        user_id = message.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # Best-effort: register loyalty user in Odoo (no UI change, silent on errors)
        try:
            from core.services import odoo_api
            if odoo_api.is_configured:
                await odoo_api.register_loyalty_user(
                    telegram_user_id=str(user_id),
                    telegram_username=message.from_user.username or None,
                )
        except Exception:
            pass

        # Get detailed user statistics
        from core.database.db_v2 import db_v2
        
        # Basic profile info
        profile = await user_cabinet_service.get_user_profile(user_id)
        
        # Statistics
        qr_codes_count = 0  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        activated_qr_count = 0
        
        # Get user's favorite categories (most visited)
        all_cards = await db_v2.get_cards_by_category('all', status='published', limit=1000)
        user_visits = {}  # This would be tracked in a visits table
        
        # Form detailed profile message with real data
        profile_text = f"""üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

üÜî <b>ID:</b> {user_id}
üë§ <b>–ò–º—è:</b> {message.from_user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± <b>Username:</b> @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üåê <b>–Ø–∑—ã–∫:</b> {lang.upper()}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üíé <b>QR-–∫–æ–¥—ã:</b> {qr_codes_count} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {activated_qr_count})
üìç <b>–ü–æ—Å–µ—â–µ–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π:</b> 0
üéØ <b>–õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> 4.5/5

üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
‚Ä¢ üéâ –ü–µ—Ä–≤—ã–π QR-–∫–æ–¥
‚Ä¢ üì± –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚Ä¢ üéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞–º–∏
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        
        # Use proper user cabinet keyboard with language button
        keyboard = get_user_cabinet_keyboard(lang)
        
        await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in user cabinet: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'cabinet_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text)

@router.message(F.text.in_([t.get('statistics', '') for t in translations.values()]))
async def handle_statistics(message: Message, state: FSMContext):
    """Handle statistics view."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        user_id = message.from_user.id
        
        from core.database.db_v2 import db_v2
        
        # Get detailed statistics
        qr_codes = []  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        active_qr = 0
        
        # Calculate usage statistics
        total_usage = 0  # This would be tracked in usage table
        favorite_category = "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"  # This would be calculated from visits
        
        stats_text = translations.get(lang, {}).get(
            'detailed_statistics',
            f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üíé <b>QR-–∫–æ–¥—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(qr_codes)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_qr}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_usage}

üìç <b>–ü–æ—Å–µ—â–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π: 0
‚Ä¢ –õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {favorite_category}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: –ù–µ –±—ã–ª–æ

üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: 1
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.5/5
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫

üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
‚Ä¢ üéâ –ü–µ—Ä–≤—ã–π QR-–∫–æ–¥
‚Ä¢ üì± –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚Ä¢ üéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"""
        )
        
        # Back button
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=translations.get(lang, {}).get('back_to_cabinet', '‚óÄÔ∏è –ö –∫–∞–±–∏–Ω–µ—Ç—É'))]
            ],
            resize_keyboard=True
        )
        
        await message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing statistics: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'statistics_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text)

@router.message(F.text.in_([t.get('settings', '') for t in translations.values()]))
async def handle_settings(message: Message, state: FSMContext):
    """Handle settings view."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        settings_text = translations.get(lang, {}).get(
            'settings_menu',
            f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üåê <b>–Ø–∑—ã–∫:</b> {lang.upper()}
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã
üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> –†–∞–∑—Ä–µ—à–µ–Ω–∞
üì± <b>QR-–∫–æ–¥—ã:</b> –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        )
        
        # Settings keyboard
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=translations.get(lang, {}).get('change_language', 'üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'))],
                [KeyboardButton(text=translations.get(lang, {}).get('notification_settings', 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')),
                 KeyboardButton(text=translations.get(lang, {}).get('privacy_settings', 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å'))],
                [KeyboardButton(text=translations.get(lang, {}).get('back_to_cabinet', '‚óÄÔ∏è –ö –∫–∞–±–∏–Ω–µ—Ç—É'))]
            ],
            resize_keyboard=True
        )
        
        await message.answer(settings_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing settings: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'settings_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text)

@router.message(F.text.in_([t.get('achievements', '') for t in translations.values()]))
async def handle_achievements(message: Message, state: FSMContext):
    """Handle achievements view."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        achievements_text = translations.get(lang, {}).get(
            'achievements_list',
            f"""üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

‚úÖ <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ:</b>
‚Ä¢ üéâ –ü–µ—Ä–≤—ã–π QR-–∫–æ–¥ - –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π QR-–∫–æ–¥
‚Ä¢ üì± –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ üéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å - –ü–æ—Å–µ—Ç–∏—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π

üîí <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ üíé –ú–∞—Å—Ç–µ—Ä —Å–∫–∏–¥–æ–∫ - –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10 —Ä–∞–∑
‚Ä¢ üåü VIP-–∫–ª–∏–µ–Ω—Ç - –ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 100,000 VND
‚Ä¢ üéñÔ∏è –õ–µ–≥–µ–Ω–¥–∞ - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ 30 –¥–Ω–µ–π

üí° <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚Ä¢ QR-–∫–æ–¥—ã: 1/1 ‚úÖ
‚Ä¢ –î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 1/7
‚Ä¢ –ó–∞–≤–µ–¥–µ–Ω–∏—è: 0/5"""
        )
        
        # Back button
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=translations.get(lang, {}).get('back_to_cabinet', '‚óÄÔ∏è –ö –∫–∞–±–∏–Ω–µ—Ç—É'))]
            ],
            resize_keyboard=True
        )
        
        await message.answer(achievements_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing achievements: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'achievements_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text)


@router.message(F.text.in_(["üìä –ú–æ—è –∫–∞—Ä–º–∞", "üìä My Karma", "üíé –ú–æ–∏ –±–∞–ª–ª—ã"]))
async def view_karma_handler(message: Message, state: FSMContext):
    """Handle karma and loyalty points viewing according to TZ."""
    try:
        user_id = message.from_user.id
        profile = await user_cabinet_service.get_user_profile(user_id)
        
        if not profile:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_cabinet_keyboard()
            )
            return
        
        karma_points = profile.get('karma_points', 0)
        level = profile.get('level', 1)
        level_progress = profile.get('level_progress', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–ª–æ–∫–∞–ª—å–Ω–æ) –∏ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–∑ Odoo
        from core.services.loyalty_service import loyalty_service
        loyalty_points = await loyalty_service.get_user_points_balance(user_id)
        try:
            from core.services import odoo_api
            if odoo_api.is_configured:
                od = await odoo_api.get_user_points(telegram_user_id=str(user_id))
                if od.get('success'):
                    # –ï—Å–ª–∏ –≤ Odoo –±–æ–ª—å—à–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ Odoo
                    loyalty_points = max(loyalty_points, int(od.get('available_points', loyalty_points) or 0))
        except Exception:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤
        points_history = await loyalty_service.get_points_history(user_id, limit=5)
        
        text = (
            f"üíé <b>–ú–æ–∏ –±–∞–ª–ª—ã –∏ –∫–∞—Ä–º–∞</b>\n\n"
            f"‚≠ê <b>–ö–∞—Ä–º–∞:</b> {karma_points}\n"
            f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level} –∏–∑ 10\n"
            f"üí∞ <b>–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {loyalty_points}\n\n"
        )
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä–º—ã
        if level_progress.get('next_threshold'):
            text += f"üìà –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {level_progress['next_threshold'] - karma_points} –∫–∞—Ä–º—ã\n"
            
            # Add progress bar
            progress_percent = level_progress.get('progress_percent', 0)
            filled_bars = int(progress_percent / 10)
            empty_bars = 10 - filled_bars
            progress_bar = "‚ñà" * filled_bars + "‚ñë" * empty_bars
            text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent:.0f}%\n\n"
        else:
            text += "üéâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–º—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n\n"
        
        # –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤
        if points_history:
            text += "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–ª–∞–º–∏:</b>\n"
            for entry in points_history[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                change_text = f"+{entry['change_amount']}" if entry['change_amount'] > 0 else str(entry['change_amount'])
                text += f"‚Ä¢ {change_text} - {entry['reason']}\n"
        else:
            text += "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –ø—É—Å—Ç–∞\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã
        text += f"\nüí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã:</b>\n"
        text += f"‚Ä¢ 1 –±–∞–ª–ª = 5000 VND —Å–∫–∏–¥–∫–∏\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        text += f"‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n"
        
        # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –±–ª–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements = await user_cabinet_service.get_user_achievements(user_id, limit=5)
        text += "\nüèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        if achievements:
            for a in achievements:
                a_type = a.get('achievement_type')
                a_data = a.get('achievement_data', {})
                if a_type == 'level_up':
                    lvl = a_data.get('level', '?')
                    text += f"‚Ä¢ ‚≠ê –î–æ—Å—Ç–∏–≥–Ω—É—Ç {lvl} —É—Ä–æ–≤–µ–Ω—å\n"
                elif a_type == 'karma_milestone':
                    km = a_data.get('karma', '?')
                    text += f"‚Ä¢ üíé {km} –∫–∞—Ä–º—ã\n"
                elif a_type == 'first_card':
                    text += "‚Ä¢ üéâ –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞\n"
                elif a_type == 'card_collector':
                    cnt = a_data.get('card_count', '?')
                    text += f"‚Ä¢ üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä ({cnt} –∫–∞—Ä—Ç)\n"
                else:
                    text += f"‚Ä¢ üèÖ {a_type}\n"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_balance)
        
    except Exception as e:
        logger.error(f"Error in view_karma_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö –∏ –∫–∞—Ä–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üìú –ò—Å—Ç–æ—Ä–∏—è", "üìú History"]))
async def view_history_handler(message: Message, state: FSMContext):
    """Handle transaction history viewing."""
    try:
        user_id = message.from_user.id
        history = await user_cabinet_service.get_transaction_history(user_id, limit=5)
        
        if not history.get('transactions'):
            text = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."
        else:
            text = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            for txn in history['transactions']:
                amount = f"+{txn['amount']}" if txn['amount'] > 0 else str(txn['amount'])
                text += (
                    f"‚Ä¢ {txn['description']}: <b>{amount} –±–∞–ª–ª–æ–≤</b>\n"
                    f"  <i>{txn['created_at']} ‚Ä¢ {txn['status']}</i>\n\n"
                )
            
            if history['total'] > 5:
                text += f"\nüìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {history['total']}"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_history)
        
    except Exception as e:
        logger.error(f"Error in view_history_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã", "üí≥ My Cards"]))
async def view_cards_handler(message: Message, state: FSMContext):
    """Handle cards viewing according to TZ."""
    try:
        user_id = message.from_user.id
        cards = await user_cabinet_service.get_user_cards(user_id)
        
        if not cards:
            text = (
                "üí≥ <b>–ú–æ–∏ –∫–∞—Ä—Ç—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.\n\n"
                "üí° <b>–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç:</b>\n"
                "‚Ä¢ üì± –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç–µ\n"
                "‚Ä¢ ‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é\n"
                "‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"
            )
            
            # –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            add_card_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", callback_data="add_card_qr"),
                    InlineKeyboardButton(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="add_card_manual")
                ],
                [
                    InlineKeyboardButton(text="üÜï –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="add_card_virtual")
                ]
            ])
            
            await message.answer(text, reply_markup=add_card_keyboard, parse_mode='HTML')
        else:
            text = f"üí≥ <b>–ú–æ–∏ –∫–∞—Ä—Ç—ã</b>\n\n"
            for i, card in enumerate(cards, 1):
                status_emoji = "‚úÖ" if not card.get('is_blocked') else "üîí"
                text += f"{status_emoji} <b>{card['card_id_printable']}</b>\n"
                text += f"   –ü—Ä–∏–≤—è–∑–∞–Ω–∞: {card['bound_at'].strftime('%d.%m.%Y')}\n"
                if card.get('is_blocked'):
                    text += f"   üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n"
                text += "\n"
            
            text += "üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
            
            # –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            manage_cards_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì± –î–æ–±–∞–≤–∏—Ç—å QR", callback_data="add_card_qr"),
                    InlineKeyboardButton(text="‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="add_card_manual")
                ],
                [
                    InlineKeyboardButton(text="üÜï –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="add_card_virtual")
                ]
            ])
            
            await message.answer(text, reply_markup=manage_cards_keyboard, parse_mode='HTML')
        
        await state.set_state(CabinetStates.viewing_cards)
        
    except Exception as e:
        logger.error(f"Error in view_cards_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîî Notifications"]))
async def view_notifications_handler(message: Message, state: FSMContext):
    """Handle notifications viewing according to TZ."""
    try:
        user_id = message.from_user.id
        notifications = await user_cabinet_service.get_user_notifications(user_id, limit=10)
        
        if not notifications:
            text = (
                "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            )
        else:
            text = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            for i, notif in enumerate(notifications, 1):
                read_status = "‚úÖ" if notif['is_read'] else "üî¥"
                text += f"{read_status} {notif['message']}\n"
                text += f"   üìÖ {notif['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_notifications)
        
    except Exception as e:
        logger.error(f"Error in view_notifications_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üèÜ Achievements"]))
async def view_achievements_handler(message: Message, state: FSMContext):
    """Handle achievements viewing according to TZ."""
    try:
        user_id = message.from_user.id
        achievements = await user_cabinet_service.get_user_achievements(user_id, limit=10)
        
        if not achievements:
            text = (
                "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n"
                "üí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
            )
        else:
            text = f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
            for i, achievement in enumerate(achievements, 1):
                achievement_type = achievement['achievement_type']
                achievement_data = achievement['achievement_data']
                
                if achievement_type == 'level_up':
                    level = achievement_data.get('level', '?')
                    text += f"‚≠ê –î–æ—Å—Ç–∏–≥–Ω—É—Ç {level} —É—Ä–æ–≤–µ–Ω—å\n"
                elif achievement_type == 'karma_milestone':
                    karma = achievement_data.get('karma', '?')
                    text += f"üíé {karma} –∫–∞—Ä–º—ã\n"
                elif achievement_type == 'first_card':
                    text += f"üéâ –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞\n"
                elif achievement_type == 'card_collector':
                    count = achievement_data.get('card_count', '?')
                    text += f"üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä ({count} –∫–∞—Ä—Ç)\n"
                else:
                    text += f"üèÖ {achievement_type}\n"
                
                text += f"   üìÖ {achievement['earned_at'].strftime('%d.%m.%Y')}\n\n"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(CabinetStates.viewing_achievements)
        
    except Exception as e:
        logger.error(f"Error in view_achievements_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", "üì± Scan QR"]))
async def scan_qr_handler(message: Message, state: FSMContext):
    """Handle QR scanning functionality."""
    try:
        await message.answer(
            "üì± <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ QR (—Ç–µ–∫—Å—Ç), –ª–∏–±–æ —Ñ–æ—Ç–æ —Å QR.\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: KARMA_QR:<...>",
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        await state.set_state(CabinetStates.viewing_profile)
    except Exception as e:
        logger.error(f"Error in scan_qr_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üí∞ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–∞—Ä–º—É", "üí∞ Spend Karma"]))
async def spend_karma_handler(message: Message, state: FSMContext):
    """Handle karma spending functionality."""
    try:
        user_id = message.from_user.id
        profile = await user_cabinet_service.get_user_profile(user_id)
        
        if not profile:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_cabinet_keyboard()
            )
            return
        
        karma_points = profile.get('karma_points', 0)
        
        if karma_points <= 0:
            text = (
                "üí∞ <b>–¢—Ä–∞—Ç–∞ –∫–∞—Ä–º—ã</b>\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä–º—ã –¥–ª—è —Ç—Ä–∞—Ç.\n\n"
                "üí° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞—Ä–º—É:\n"
                "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: +5 –∫–∞—Ä–º—ã\n"
                "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã: +25 –∫–∞—Ä–º—ã\n"
                "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π: +50 –∫–∞—Ä–º—ã"
            )
        else:
            text = (
                f"üí∞ <b>–¢—Ä–∞—Ç–∞ –±–∞–ª–ª–æ–≤</b>\n\n"
                f"‚≠ê –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: <b>{karma_points} –±–∞–ª–ª–æ–≤</b>\n\n"
                f"üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏:</b>\n"
                f"‚Ä¢ 100 –±–∞–ª–ª–æ–≤ = 5% —Å–∫–∏–¥–∫–∞\n"
                f"‚Ä¢ 200 –±–∞–ª–ª–æ–≤ = 10% —Å–∫–∏–¥–∫–∞\n"
                f"‚Ä¢ 500 –±–∞–ª–ª–æ–≤ = 20% —Å–∫–∏–¥–∫–∞\n"
                f"‚Ä¢ 1000 –±–∞–ª–ª–æ–≤ = 30% —Å–∫–∏–¥–∫–∞\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:"
            )
            
            # –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            available_amounts = []
            if karma_points >= 100:
                available_amounts.append([InlineKeyboardButton(text="100 –±–∞–ª–ª–æ–≤ (5% —Å–∫–∏–¥–∫–∞)", callback_data="spend_points_100")])
            if karma_points >= 200:
                available_amounts.append([InlineKeyboardButton(text="200 –±–∞–ª–ª–æ–≤ (10% —Å–∫–∏–¥–∫–∞)", callback_data="spend_points_200")])
            if karma_points >= 500:
                available_amounts.append([InlineKeyboardButton(text="500 –±–∞–ª–ª–æ–≤ (20% —Å–∫–∏–¥–∫–∞)", callback_data="spend_points_500")])
            if karma_points >= 1000:
                available_amounts.append([InlineKeyboardButton(text="1000 –±–∞–ª–ª–æ–≤ (30% —Å–∫–∏–¥–∫–∞)", callback_data="spend_points_1000")])
            
            # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            available_amounts.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_spend")])
            
            spend_keyboard = InlineKeyboardMarkup(inline_keyboard=available_amounts)
            
            await message.answer(text, reply_markup=spend_keyboard, parse_mode='HTML')
        await state.set_state(CabinetStates.spending_points)
        
    except Exception as e:
        logger.error(f"Error in spend_karma_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"]))
async def settings_handler(message: Message, state: FSMContext):
    """Handle settings functionality."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üåê <b>–Ø–∑—ã–∫:</b> {lang.upper()}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã\n"
            f"üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</b> –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è\n\n"
            f"üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"üöß <i>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</i>"
        )
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        await state.set_state(CabinetStates.viewing_settings)
        
    except Exception as e:
        logger.error(f"Error in settings_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üè™ –ö–∞—Ç–∞–ª–æ–≥ –º–µ—Å—Ç", "üè™ Catalog"]))
async def view_catalog_handler(message: Message, state: FSMContext):
    """Handle catalog viewing."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from core.database.db_adapter import db_v2
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = db_v2.get_categories()
        
        if not categories:
            await message.answer(
                "üè™ <b>–ö–∞—Ç–∞–ª–æ–≥ –º–µ—Å—Ç</b>\n\n"
                "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        from core.keyboards.inline_v2 import get_categories_keyboard
        keyboard = get_categories_keyboard()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        categories_text = ""
        for i, cat in enumerate(categories[:5]):
            if hasattr(cat, 'name'):
                categories_text += f"‚Ä¢ {cat.name}\n"
            elif isinstance(cat, dict):
                categories_text += f"‚Ä¢ {cat.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            else:
                categories_text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {i+1}\n"
        
        if len(categories) > 5:
            categories_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(categories) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        
        await message.answer(
            f"üè™ <b>–ö–∞—Ç–∞–ª–æ–≥ –º–µ—Å—Ç</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in view_catalog_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_(["üåê –Ø–∑—ã–∫", "üåê Language"]))
async def language_handler(message: Message, state: FSMContext):
    """Handle language selection."""
    try:
        logger.info(f"Language handler called for user {message.from_user.id}")
        from core.handlers.language import build_language_inline_kb
        logger.info("build_language_inline_kb imported successfully")
        
        keyboard = build_language_inline_kb()
        logger.info(f"Language keyboard created: {keyboard}")
        
        await message.answer(
            "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info("Language selection message sent successfully")
    except Exception as e:
        logger.error(f"Error in language_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text.in_( ["ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", "ü§ù Become Partner"]))
async def become_partner_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ç –∂–µ –º–∞—Å—Ç–µ—Ä, —á—Ç–æ –∏ /add_card: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞."""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—ã–π –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        from core.handlers.partner import start_add_card
        await start_add_card(message, state)
    except Exception as e:
        logger.error(f"Error in become_partner_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


# Help handler removed - handled by help_with_ai_router


@router.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è Back"]))
async def back_to_profile_handler(message: Message, state: FSMContext):
    """Handle back button to return to main menu."""
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        from core.keyboards.reply_v2 import get_main_menu_reply
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_reply()
        )
    except Exception as e:
        logger.error(f"Error returning to main menu from cabinet: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# Register all handlers with correct button texts according to new menu
router.message.register(user_cabinet_handler, F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
router.message.register(view_karma_handler, F.text == "üìà –ö–∞—Ä–º–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
router.message.register(view_cards_handler, F.text == "üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
router.message.register(view_karma_handler, F.text == "üíé –ú–æ–∏ –±–∞–ª–ª—ã")
router.message.register(view_karma_handler, F.text == "üìä –ú–æ—è –∫–∞—Ä–º–∞")
router.message.register(view_achievements_handler, F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
router.message.register(view_history_handler, F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è")
router.message.register(view_notifications_handler, F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
router.message.register(language_handler, F.text == "üåê –Ø–∑—ã–∫")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
@router.callback_query(F.data == "add_card_qr")
async def add_card_qr_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ QR"""
    try:
        await callback.message.edit_text(
            "üì± <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ QR-–∫–æ–¥–∞ (—Ç–µ–∫—Å—Ç) –∏–ª–∏ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç: KARMA_QR:1234567890\n"
            "‚Ä¢ –§–æ—Ç–æ: —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ\n\n"
            "‚óÄÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
            parse_mode='HTML'
        )
        await state.set_state(CabinetStates.adding_card_qr)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in add_card_qr_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")


@router.callback_query(F.data == "add_card_manual")
async def add_card_manual_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é"""
    try:
        await callback.message.edit_text(
            "‚å®Ô∏è <b>–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "üí° <b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890)\n"
            "‚Ä¢ –ò–ª–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234-5678-90)\n\n"
            "‚óÄÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
            parse_mode='HTML'
        )
        await state.set_state(CabinetStates.adding_card_manual)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in add_card_manual_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞")


@router.callback_query(F.data == "add_card_virtual")
async def add_card_virtual_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        from core.database.db_v2 import db_v2
        import uuid
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        virtual_card_number = f"V{str(uuid.uuid4())[:8].upper()}"
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        card_data = {
            'user_id': user_id,
            'card_number': virtual_card_number,
            'card_type': 'virtual',
            'status': 'active',
            'created_at': 'now()'
        }
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        await callback.message.edit_text(
            f"üÜï <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {virtual_card_number}\n"
            f"üì± <b>–¢–∏–ø:</b> –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
            f"üí° –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
            parse_mode='HTML'
        )
        
        await callback.answer("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"Error in add_card_virtual_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
@router.message(CabinetStates.adding_card_qr)
async def process_qr_card_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ QR-–∫–æ–¥–∞"""
    try:
        qr_text = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞
        if qr_text.startswith('KARMA_QR:'):
            card_number = qr_text.replace('KARMA_QR:', '')
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –ë–î
            await message.answer(
                f"‚úÖ <b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {card_number}\n"
                f"üì± <b>–¢–∏–ø:</b> QR-–∫–æ–¥\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
                f"–ö–∞—Ä—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞</b>\n\n"
                "QR-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'KARMA_QR:'\n"
                "–ü—Ä–∏–º–µ—Ä: KARMA_QR:1234567890\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode='HTML'
            )
            return
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_qr_card_input: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(CabinetStates.adding_card_manual)
async def process_manual_card_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é"""
    try:
        card_input = message.text.strip()
        
        # –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ—Ç –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        card_number = ''.join(filter(str.isdigit, card_input))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if len(card_number) < 6 or len(card_number) > 20:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã</b>\n\n"
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 20 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 1234567890 –∏–ª–∏ 1234-5678-90\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode='HTML'
            )
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –ë–î
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {card_number}\n"
            f"üì± <b>–¢–∏–ø:</b> –†—É—á–Ω–æ–π –≤–≤–æ–¥\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
            f"–ö–∞—Ä—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_manual_card_input: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_user_cabinet_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
@router.callback_query(F.data.startswith("spend_points_"))
async def spend_points_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    try:
        # –ò–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ callback_data
        amount_str = callback.data.replace("spend_points_", "")
        amount = int(amount_str)
        
        user_id = callback.from_user.id
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
        discount_map = {
            100: "5%",
            200: "10%", 
            500: "20%",
            1000: "30%"
        }
        discount = discount_map.get(amount, "5%")
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã!</b>\n\n"
            f"üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {amount} –±–∞–ª–ª–æ–≤\n"
            f"üéØ <b>–ü–æ–ª—É—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:</b> {discount}\n"
            f"üì± <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
            f"üí° –°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö!",
            parse_mode='HTML'
        )
        
        await callback.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} –±–∞–ª–ª–æ–≤!")
        
    except Exception as e:
        logger.error(f"Error in spend_points_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤")


@router.callback_query(F.data == "cancel_spend")
async def cancel_spend_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    try:
        await callback.message.edit_text(
            "‚ùå <b>–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–∞–º–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            parse_mode='HTML'
        )
        
        await callback.answer("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in cancel_spend_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
# help_handler removed - handled by help_with_ai_router
router.message.register(become_partner_handler, F.text == "ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º")
router.message.register(back_to_profile_handler, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")

# For backward compatibility
def get_cabinet_router():
    """Get the cabinet router instance."""
    return router

# Export the router
__all__ = ['router', 'get_cabinet_router']
