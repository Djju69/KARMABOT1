"""
Router for SuperAdmin panel functionality.
Handles all super administrative operations including card generation, data deletion, and system management.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Union, Any, Dict
import logging

# Create router with a name
router = Router(name='superadmin_router')

# Import dependencies
from ..services.superadmin_service import superadmin_service
from ..services.admin_service import admin_service
from ..keyboards.reply_v2 import get_superadmin_keyboard, get_return_to_main_menu
from ..utils.locales_v2 import get_text, get_all_texts

logger = logging.getLogger(__name__)


def get_superadmin_router() -> Router:
    """Get the superadmin router with all handlers."""
    return router


class SuperAdminStates(StatesGroup):
    """FSM states for superadmin panel interactions."""
    viewing_dashboard = State()
    generating_cards = State()
    deleting_user_data = State()
    managing_roles = State()
    viewing_settings = State()
    managing_test_data = State()


@router.message(F.text.in_(["üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω", "üëë SuperAdmin"]))
async def superadmin_dashboard_handler(message: Message, state: FSMContext):
    """Handle superadmin dashboard entry point."""
    try:
        # Check if user is superadmin
        user_id = message.from_user.id
        # TODO: Add role check here
        
        # Get superadmin statistics
        stats = await superadmin_service.get_superadmin_stats()
        
        text = (
            f"üëë <b>–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['active_users']}</b>\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <b>{stats['banned_users']}</b>\n"
            f"üí≥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç: <b>{stats['total_cards']}</b>\n"
            f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö: <b>{stats['bound_cards']}</b>\n"
            f"üìã –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['unbound_cards']}</b>\n\n"
            f"üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏:</b>\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{stats['total_admin_logs']}</b>\n\n"
            f"üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        )
        
        health = stats.get('system_health', {})
        health_emoji = "‚úÖ" if health.get('database_connected') else "‚ùå"
        text += f"{health_emoji} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if health.get('database_connected') else '–û—à–∏–±–∫–∞'}\n"
        
        health_emoji = "‚úÖ" if health.get('migrations_applied') else "‚ùå"
        text += f"{health_emoji} –ú–∏–≥—Ä–∞—Ü–∏–∏: {'–ü—Ä–∏–º–µ–Ω–µ–Ω—ã' if health.get('migrations_applied') else '–û—à–∏–±–∫–∞'}\n"
        
        health_emoji = "‚úÖ" if health.get('services_running') else "‚ùå"
        text += f"{health_emoji} –°–µ—Ä–≤–∏—Å—ã: {'–†–∞–±–æ—Ç–∞—é—Ç' if health.get('services_running') else '–û—à–∏–±–∫–∞'}\n"
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in superadmin_dashboard_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_to_main_menu()
        )


@router.message(F.text.in_(["üè≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç", "üè≠ Generate Cards"]))
async def generate_cards_handler(message: Message, state: FSMContext):
    """Handle card generation."""
    try:
        text = (
            "üè≠ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            "<code>/generate [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/generate 100</code> - —Å–æ–∑–¥–∞—Ç—å 100 –∫–∞—Ä—Ç\n"
            "‚Ä¢ <code>/generate 1000</code> - —Å–æ–∑–¥–∞—Ç—å 1000 –∫–∞—Ä—Ç\n\n"
            "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Ä–∞–∑: 10000 –∫–∞—Ä—Ç"
        )
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.generating_cards)
        
    except Exception as e:
        logger.error(f"Error in generate_cards_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(SuperAdminStates.generating_cards)
async def process_card_generation(message: Message, state: FSMContext):
    """Process card generation command."""
    try:
        command = message.text.strip()
        if not command.startswith('/generate'):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            return
        
        # Parse command
        parts = command.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            return
        
        try:
            count = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
            return
        
        # Generate cards
        result = await superadmin_service.generate_cards(count, message.from_user.id)
        
        if result['success']:
            text = (
                f"‚úÖ <b>–ö–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n\n"
                f"üìä –°–æ–∑–¥–∞–Ω–æ: <b>{result['created_count']}</b> –∫–∞—Ä—Ç\n"
                f"üìã –î–∏–∞–ø–∞–∑–æ–Ω: <b>{result['range']}</b>\n\n"
                f"üí° –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            )
        else:
            text = f"‚ùå {result['message']}"
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_card_generation: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(F.text.in_(["üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "üóëÔ∏è Delete Data"]))
async def delete_data_handler(message: Message, state: FSMContext):
    """Handle data deletion."""
    try:
        text = (
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "<code>/delete_user [ID]</code> - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "<code>/delete_card [ID]</code> - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/delete_user 123456789</code>\n"
            "‚Ä¢ <code>/delete_card KS12340001</code>\n\n"
            "üö® –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
        )
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.deleting_user_data)
        
    except Exception as e:
        logger.error(f"Error in delete_data_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(SuperAdminStates.deleting_user_data)
async def process_data_deletion(message: Message, state: FSMContext):
    """Process data deletion command."""
    try:
        command = message.text.strip()
        
        if command.startswith('/delete_user'):
            # Parse delete user command
            parts = command.split()
            if len(parts) < 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_user [ID]")
                return
            
            try:
                user_id = int(parts[1])
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
                return
            
            # Delete user data
            result = await superadmin_service.delete_user_data(user_id, message.from_user.id)
            
        elif command.startswith('/delete_card'):
            # Parse delete card command
            parts = command.split()
            if len(parts) < 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_card [ID]")
                return
            
            card_id = parts[1]
            
            # Delete card
            result = await superadmin_service.delete_card(card_id, message.from_user.id)
            
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_user –∏–ª–∏ /delete_card")
            return
        
        if result['success']:
            text = f"‚úÖ {result['message']}"
            if 'deleted_user' in result:
                text += f"\nüë§ –£–¥–∞–ª–µ–Ω: {result['deleted_user']}"
            elif 'deleted_card' in result:
                text += f"\nüí≥ –£–¥–∞–ª–µ–Ω–∞: {result['deleted_card']}"
        else:
            text = f"‚ùå {result['message']}"
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_data_deletion: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(F.text.in_(["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", "üë• Manage Admins"]))
async def manage_admins_handler(message: Message, state: FSMContext):
    """Handle admin management."""
    try:
        text = (
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/role [ID] [—Ä–æ–ª—å]</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n"
            "‚Ä¢ <code>user</code> - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            "‚Ä¢ <code>partner</code> - –ø–∞—Ä—Ç–Ω–µ—Ä\n"
            "‚Ä¢ <code>admin</code> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>superadmin</code> - —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/role 123456789 admin</code>\n"
            "‚Ä¢ <code>/role 123456789 user</code>"
        )
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.managing_roles)
        
    except Exception as e:
        logger.error(f"Error in manage_admins_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(SuperAdminStates.managing_roles)
async def process_role_change(message: Message, state: FSMContext):
    """Process role change command."""
    try:
        command = message.text.strip()
        if not command.startswith('/role'):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /role [ID] [—Ä–æ–ª—å]")
            return
        
        # Parse command
        parts = command.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /role [ID] [—Ä–æ–ª—å]")
            return
        
        try:
            user_id = int(parts[1])
            new_role = parts[2].lower()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
            return
        
        # Change role
        result = await superadmin_service.manage_admin_role(
            user_id, new_role, message.from_user.id
        )
        
        if result['success']:
            text = (
                f"‚úÖ <b>–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
                f"üîÑ –ë—ã–ª–æ: <b>{result['old_role']}</b>\n"
                f"üîÑ –°—Ç–∞–ª–æ: <b>{result['new_role']}</b>"
            )
        else:
            text = f"‚ùå {result['message']}"
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_role_change: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(F.text.in_(["‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è System Settings"]))
async def system_settings_handler(message: Message, state: FSMContext):
    """Handle system settings viewing."""
    try:
        # Get system settings
        settings = await superadmin_service.get_system_settings()
        
        text = (
            "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä–º—ã:</b>\n"
        )
        
        karma_config = settings.get('karma_config', {})
        text += f"üìä –ü–æ—Ä–æ–≥–∏ —É—Ä–æ–≤–Ω–µ–π: {karma_config.get('level_thresholds', [])}\n"
        text += f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –≤—Ö–æ–¥: {karma_config.get('daily_login_bonus', 0)}\n"
        text += f"üí≥ –ë–æ–Ω—É—Å –∑–∞ –∫–∞—Ä—Ç—É: {karma_config.get('card_bind_bonus', 0)}\n"
        text += f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {karma_config.get('referral_bonus', 0)}\n"
        text += f"‚ö° –õ–∏–º–∏—Ç –∞–¥–º–∏–Ω–∞: {karma_config.get('admin_karma_limit', 0)}\n"
        text += f"üè≠ –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {karma_config.get('card_generation_limit', 0)}\n"
        text += f"‚è±Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {karma_config.get('rate_limit_per_minute', 0)}/–º–∏–Ω\n\n"
        
        text += "üí≥ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç:</b>\n"
        card_config = settings.get('card_config', {})
        text += f"üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: {card_config.get('prefix', '')}\n"
        text += f"üî¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: {card_config.get('start_number', 0)}\n"
        text += f"üìù –§–æ—Ä–º–∞—Ç: {card_config.get('format', '')}\n"
        text += f"üñ®Ô∏è –ü–µ—á–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {card_config.get('printable_format', '')}\n\n"
        
        text += "üöÄ <b>–§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        features = settings.get('features', {})
        for feature, enabled in features.items():
            status = "‚úÖ" if enabled else "‚ùå"
            text += f"{status} {feature}: {'–í–∫–ª—é—á–µ–Ω–æ' if enabled else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        
        await message.answer(
            text,
            reply_markup=get_superadmin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(SuperAdminStates.viewing_settings)
        
    except Exception as e:
        logger.error(f"Error in system_settings_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_superadmin_keyboard()
        )


@router.message(F.text.in_(["üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", "üß™ Test Data"]))
async def manage_test_data_handler(message: Message, state: FSMContext):
    """Handle test data management."""
    try:
        from core.database import db_v2
        
        # Get test cards count
        test_cards = db_v2.get_cards_by_partner(123456789)  # Sample partner ID
        test_count = len(test_cards)
        
        text = (
            f"üß™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {test_count}\n"
            f"‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä-—Ç–µ—Å—Ç–µ—Ä: Sample Partner\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="test_show_cards"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="test_delete_all")
            ],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="test_add_cards"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="test_refresh")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="superadmin_back")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(SuperAdminStates.managing_test_data)
        
    except Exception as e:
        logger.error(f"Error in manage_test_data_handler: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

@router.callback_query(F.data == "test_show_cards")
async def show_test_cards_handler(callback: CallbackQuery):
    """Show test cards list."""
    try:
        from core.database import db_v2
        
        test_cards = db_v2.get_cards_by_partner(123456789)
        
        if not test_cards:
            await callback.message.edit_text("–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
            
        text = "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:</b>\n\n"
        
        for i, card in enumerate(test_cards[:10], 1):  # Show first 10
            text += f"{i}. <b>{card.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            text += f"   üìç {card.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   üìû {card.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   üìß {card.get('email', 'Email –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {card.get('status', 'unknown')}\n\n"
        
        if len(test_cards) > 10:
            text += f"... –∏ –µ—â–µ {len(test_cards) - 10} –∫–∞—Ä—Ç–æ—á–µ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="test_delete_all")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing test cards: {e}", exc_info=True)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫.")

@router.callback_query(F.data == "test_delete_all")
async def delete_test_data_handler(callback: CallbackQuery):
    """Delete all test data."""
    try:
        from core.database import db_v2
        
        # Delete test cards
        deleted_cards = db_v2.delete_cards_by_partner(123456789)
        
        # Delete test partner
        deleted_partner = db_v2.delete_partner_by_tg_id(123456789)
        
        text = (
            f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã</b>\n\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {deleted_cards}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {deleted_partner}\n\n"
            f"–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="superadmin_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error deleting test data: {e}", exc_info=True)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

@router.callback_query(F.data == "test_add_cards")
async def add_test_cards_handler(callback: CallbackQuery):
    """Add test cards."""
    try:
        from core.database.migrations import add_sample_cards
        
        # Call the function to add sample cards
        add_sample_cards()
        
        text = (
            "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:\n"
            "‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω \"–í–∫—É—Å–Ω–æ\"\n"
            "‚Ä¢ –ö–∞—Ñ–µ \"–£—é—Ç\"\n"
            "‚Ä¢ –ü–∏—Ü—Ü–µ—Ä–∏—è \"–ò—Ç–∞–ª–∏—è\"\n\n"
            "–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã\""
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="test_show_cards")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="superadmin_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error adding test cards: {e}", exc_info=True)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")

@router.callback_query(F.data == "test_back")
async def test_data_back_handler(callback: CallbackQuery, state: FSMContext):
    """Go back to test data management."""
    await manage_test_data_handler(callback.message, state)

@router.callback_query(F.data == "superadmin_back")
async def superadmin_back_handler(callback: CallbackQuery, state: FSMContext):
    """Go back to superadmin dashboard."""
    await superadmin_dashboard_handler(callback.message, state)

@router.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è Back"]))
async def back_to_main_handler(message: Message, state: FSMContext):
    """Handle back button to return to main menu."""
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        from core.keyboards.reply_v2 import get_main_menu_reply
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_reply()
        )
    except Exception as e:
        logger.error(f"Error returning to main menu from superadmin: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# Register all handlers
router.message.register(superadmin_dashboard_handler, F.text == "üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω")
router.message.register(generate_cards_handler, F.text == "üè≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç")
router.message.register(delete_data_handler, F.text == "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
router.message.register(manage_admins_handler, F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
router.message.register(system_settings_handler, F.text == "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
router.message.register(back_to_main_handler, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")

# For backward compatibility
def get_superadmin_router():
    """Get the superadmin router instance."""
    return router

# Export the router
__all__ = ['router', 'get_superadmin_router']
