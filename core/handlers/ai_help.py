"""
AI Help Handler - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Karma System
"""

import logging
from typing import Optional, Dict, List
from datetime import datetime
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from core.utils.locales_v2 import get_text, get_all_texts
from core.database.db_v2 import db_v2
from core.keyboards.inline_v2 import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from core.keyboards.reply_v2 import get_main_menu_reply

logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AI —á–∞—Ç–∞
class AIHelpStates(StatesGroup):
    waiting_question = State()
    in_chat = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
ai_help_router = Router(name="ai_help")

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (fallback)
KEYWORD_RESPONSES = {
    "—Å–∫–∏–¥–∫": {
        "keywords": ["—Å–∫–∏–¥–∫", "discount", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–≤—ã–≥–æ–¥", "—ç–∫–æ–Ω–æ–º–∏"],
        "response": "üí∞ –í Karma System –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫–∏ –æ—Ç 5% –¥–æ 30% –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö, SPA, –æ—Ç–µ–ª—è—Ö –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö. –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∏–∑ –±–æ—Ç–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ß–µ–º –±–æ–ª—å—à–µ –∫–∞—Ä–º–∞ - —Ç–µ–º –≤—ã—à–µ —Å–∫–∏–¥–∫–∞!"
    },
    "–∫–∞—Ä–º–∞": {
        "keywords": ["–∫–∞—Ä–º–∞", "karma", "–±–∞–ª–ª—ã", "–æ—á–∫–∏", "—Ä–µ–π—Ç–∏–Ω–≥"],
        "response": "‚≠ê –ö–∞—Ä–º–∞ - —ç—Ç–æ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞—Ä–º—É –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (+50), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥—ã (+10), –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (+30). –í—ã—Å–æ–∫–∞—è –∫–∞—Ä–º–∞ = –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π!"
    },
    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü": {
        "keywords": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü", "–Ω–∞—á–∞—Ç—å", "start", "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω", "–≤—Å—Ç—É–ø"],
        "response": "üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è! –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. –ó–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, –ø–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–ª—è —Å–∫–∏–¥–∫–∏."
    },
    "–ø–∞—Ä—Ç–Ω–µ—Ä": {
        "keywords": ["–ø–∞—Ä—Ç–Ω–µ—Ä", "partner", "–∑–∞–≤–µ–¥–µ–Ω", "–±–∏–∑–Ω–µ—Å", "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤"],
        "response": "ü§ù –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º? –ù–∞–∂–º–∏—Ç–µ 'ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫!"
    },
    "qr": {
        "keywords": ["qr", "–∫–æ–¥", "–∫—É–∞—Ä", "—Å–∫–∞–Ω–∏—Ä"],
        "response": "üì± QR-–∫–æ–¥ - –≤–∞—à –±–∏–ª–µ—Ç –∫ —Å–∫–∏–¥–∫–∞–º! –ù–∞–π–¥–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å QR', –ø–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –û–¥–∏–Ω QR = –æ–¥–Ω–∞ —Å–∫–∏–¥–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å —É–º–æ–º!"
    },
    "–¥—Ä—É–∑": {
        "keywords": ["–¥—Ä—É–∑", "–¥—Ä—É–≥", "–ø—Ä–∏–≥–ª–∞—Å–∏", "—Ä–µ—Ñ–µ—Ä–∞–ª", "—Å—Å—ã–ª–∫"],
        "response": "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +50 –∫–∞—Ä–º—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ! –ù–∞–∂–º–∏—Ç–µ 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å."
    },
    "–∫–∞—Ç–µ–≥–æ—Ä": {
        "keywords": ["–∫–∞—Ç–µ–≥–æ—Ä", "—Ä–∞–∑–¥–µ–ª", "—Ä–µ—Å—Ç–æ—Ä–∞", "spa", "–æ—Ç–µ–ª", "–º–∞–≥–∞–∑–∏–Ω"],
        "response": "üóÇÔ∏è –£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –†–µ—Å—Ç–æ—Ä–∞–Ω—ã üçΩÔ∏è, SPA –∏ –ö—Ä–∞—Å–æ—Ç–∞ üíÜ, –û—Ç–µ–ª–∏ üè®, –ú–∞–≥–∞–∑–∏–Ω—ã üõçÔ∏è, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üé≠, –°–ø–æ—Ä—Ç ‚öΩ, –ê–≤—Ç–æ üöó, –î—Ä—É–≥–æ–µ üì¶. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
    },
    "–ø–æ–¥–¥–µ—Ä–∂–∫": {
        "keywords": ["–ø–æ–¥–¥–µ—Ä–∂–∫", "support", "–ø–æ–º–æ—â", "–ø—Ä–æ–±–ª–µ–º", "–æ—à–∏–±–∫", "–±–∞–≥"],
        "response": "üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. –î–ª—è —Å–≤—è–∑–∏ —Å –∂–∏–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @karma_support"
    }
}

def create_help_menu_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    texts = get_all_texts(lang)
    
    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–º–æ—â–∏
    builder.row(
        InlineKeyboardButton(
            text=texts.get('btn.ai_assistant', 'ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫'),
            callback_data="help:ai_assistant"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=texts.get('btn.faq', 'üìã FAQ'),
            callback_data="help:faq"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=texts.get('btn.contact_support', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
            callback_data="help:contact_support"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=texts.get('btn.back', '‚óÄÔ∏è –ù–∞–∑–∞–¥'),
            callback_data="help:back"
        )
    )
    
    return builder.as_markup()

def create_ai_chat_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è AI —á–∞—Ç–∞"""
    builder = InlineKeyboardBuilder()
    texts = get_all_texts(lang)
    
    builder.row(
        InlineKeyboardButton(
            text=texts.get('btn.ask_another', '‚ùì –ï—â–µ –≤–æ–ø—Ä–æ—Å'),
            callback_data="ai:ask_another"
        ),
        InlineKeyboardButton(
            text=texts.get('btn.end_chat', '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å'),
            callback_data="ai:end_chat"
        )
    )
    
    return builder.as_markup()

async def get_user_lang(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = await db_v2.execute_query(
            "SELECT language_code FROM users WHERE telegram_id = %s",
            (user_id,)
        )
        if result and len(result) > 0:
            return result[0]['language_code'] or 'ru'
    except Exception as e:
        logger.error(f"Error getting user language: {e}")
    return 'ru'

def find_smart_response(text: str) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    text_lower = text.lower()
    
    for category, data in KEYWORD_RESPONSES.items():
        for keyword in data["keywords"]:
            if keyword in text_lower:
                return data["response"]
    
    return None

async def generate_ai_response(question: str, context: Dict = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI (—Å fallback –Ω–∞ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    smart_response = find_smart_response(question)
    if smart_response:
        return smart_response
    
    # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI API
    # if settings.openai_api_key:
    #     return await get_openai_response(question, context)
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return (
        "ü§î –•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∫–∞ —è —É—á—É—Å—å –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏ –∏ QR-–∫–æ–¥—ã\n"
        "‚Ä¢ –ö–∞—Ä–º–∞ –∏ –±–∞–ª–ª—ã\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @karma_support"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å" - –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–°–ï–• –Ø–ó–´–ö–û–í
@ai_help_router.message(F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "‚ùì Help", "‚ùì ÎèÑÏõÄÎßê", "‚ùì Tr·ª£ gi√∫p"]))
async def help_button_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    try:
        await state.clear()
        user_id = message.from_user.id
        lang = await get_user_lang(user_id)
        texts = get_all_texts(lang)
        
        logger.info(f"[AI_HELP] Help button pressed by user {user_id}, lang={lang}")
        
        help_text = texts.get('help.main_menu', 
            "üÜò **–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ Karma System**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:\n\n"
            "ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫** - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìã **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞** - —Å–≤—è–∑—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π"
        )
        
        await message.answer(
            help_text,
            reply_markup=create_help_menu_keyboard(lang),
            parse_mode="HTML"
        )
        
        logger.info(f"[AI_HELP] Help menu shown to user {user_id}")
        
    except Exception as e:
        logger.error(f"[AI_HELP] Error in help handler: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@ai_help_router.message(Command("help"))
async def help_command_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await help_button_handler(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ AI –ü–æ–º–æ—â–Ω–∏–∫–∞
@ai_help_router.callback_query(F.data == "help:ai_assistant")
async def ai_assistant_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        texts = get_all_texts(lang)
        
        intro_text = texts.get('ai.intro_message',
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫ Karma System.\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞—Ö –∏ QR-–∫–æ–¥–∞—Ö\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–µ –∫–∞—Ä–º—ã –∏ –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        
        await callback.message.edit_text(intro_text)
        await state.set_state(AIHelpStates.waiting_question)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.update_data(
            chat_history=[],
            start_time=datetime.now().isoformat(),
            language=lang
        )
        
        logger.info(f"AI chat started for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error starting AI chat: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ AI —á–∞—Ç–µ
@ai_help_router.message(AIHelpStates.waiting_question)
async def process_ai_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        question = message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lang = data.get('language', 'ru')
        chat_history = data.get('chat_history', [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await generate_ai_response(question, context={"history": chat_history})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({
            "question": question,
            "answer": response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(chat_history=chat_history)
        await state.set_state(AIHelpStates.in_chat)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(
            response,
            reply_markup=create_ai_chat_keyboard(lang),
            parse_mode="HTML"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        logger.info(f"AI answered question from user {user_id}: {question[:50]}...")
        
    except Exception as e:
        logger.error(f"Error processing AI question: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_ai_chat_keyboard('ru')
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ï—â–µ –≤–æ–ø—Ä–æ—Å"
@ai_help_router.callback_query(F.data == "ai:ask_another")
async def ask_another_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å"""
    try:
        await callback.answer()
        data = await state.get_data()
        lang = data.get('language', 'ru')
        texts = get_all_texts(lang)
        
        await callback.message.answer(
            texts.get('ai.ask_question', "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        )
        await state.set_state(AIHelpStates.waiting_question)
        
    except Exception as e:
        logger.error(f"Error in ask another: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
@ai_help_router.callback_query(F.data == "ai:end_chat")
async def end_chat_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç AI —á–∞—Ç"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        texts = get_all_texts(lang)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞
        data = await state.get_data()
        chat_history = data.get('chat_history', [])
        logger.info(f"AI chat ended for user {user_id}, questions asked: {len(chat_history)}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            texts.get('ai.goodbye', 
                "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
                "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
            ),
            reply_markup=None
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            texts.get('main.menu_restored', "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"),
            reply_markup=get_main_menu_reply(lang)
        )
        
    except Exception as e:
        logger.error(f"Error ending chat: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ
@ai_help_router.callback_query(F.data == "help:faq")
async def faq_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        
        faq_text = """
üìã <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É?</b>
–ù–∞–π–¥–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ‚Üí –ü–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ ‚Üí –ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ

<b>‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–º–∞?</b>
–ö–∞—Ä–º–∞ - –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥. –ß–µ–º –≤—ã—à–µ –∫–∞—Ä–º–∞, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –∏ —Å–∫–∏–¥–æ–∫.

<b>‚ùì –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä–º—É?</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: +50 –∫–∞—Ä–º—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥—ã: +10 –∫–∞—Ä–º—ã
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è: +30 –∫–∞—Ä–º—ã

<b>‚ùì –ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>
–ù–∞–∂–º–∏—Ç–µ "ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

<b>‚ùì –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR?</b>
–ö–∞–∂–¥—ã–π QR-–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π.

<b>‚ùì –í –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –ü–∞—Ä—Ç–Ω–µ—Ä—ã –µ—Å—Ç—å –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –°–ù–ì –∏ –ê–∑–∏–∏.
"""
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="help:back_to_menu"
            )
        )
        
        await callback.message.edit_text(
            faq_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing FAQ: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@ai_help_router.callback_query(F.data == "help:contact_support")
async def contact_support_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        
        support_text = """
üìû <b>–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>

<b>Telegram:</b> @karma_support
<b>Email:</b> support@karmasystem.app

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 9:00 - 21:00
–°–±-–í—Å: 10:00 - 18:00

üí¨ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.
"""
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                url="https://t.me/karma_support"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="help:back_to_menu"
            )
        )
        
        await callback.message.edit_text(
            support_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing support: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@ai_help_router.callback_query(F.data.in_(["help:back", "help:back_to_menu"]))
async def back_to_help_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    try:
        await callback.answer()
        await state.clear()
        
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        texts = get_all_texts(lang)
        
        help_text = texts.get('help.main_menu', 
            "üÜò **–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ Karma System**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:\n\n"
            "ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫** - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìã **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞** - —Å–≤—è–∑—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π"
        )
        
        await callback.message.edit_text(
            help_text,
            reply_markup=create_help_menu_keyboard(lang),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error going back: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@ai_help_router.callback_query(F.data == "help:main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        await callback.answer()
        await state.clear()
        
        user_id = callback.from_user.id
        lang = await get_user_lang(user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø–æ–º–æ—â–∏
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(
            get_text(lang, "main.menu_restored", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"),
            reply_markup=get_main_menu_reply(lang)
        )
        
        logger.info(f"[AI_HELP] User {user_id} returned to main menu")
        
    except Exception as e:
        logger.error(f"[AI_HELP] Error returning to main menu: {e}", exc_info=True)
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ in_chat
@ai_help_router.message(AIHelpStates.in_chat)
async def handle_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(AIHelpStates.waiting_question)
    await process_ai_question(message, state)

logger.info("AI Help router loaded successfully")
