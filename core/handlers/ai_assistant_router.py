"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–æ–≤
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional
import logging

from ..services.ai_assistant import ai_assistant
from ..utils.locales_v2 import get_text
from ..security.roles import get_user_role

logger = logging.getLogger(__name__)
router = Router(name='ai_assistant_router')


class AIAssistantStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    waiting_for_query = State()
    analyzing_logs = State()
    analyzing_analytics = State()
    searching_data = State()


@router.message(F.text.in_(["ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", "ü§ñ AI Assistant"]))
async def ai_assistant_handler(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    try:
        user_id = message.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_role not in ['admin', 'super_admin']:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude API
        if not ai_assistant.is_available():
            await message.answer(
                "‚ùå <b>–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "Claude API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤", callback_data="ai_analyze_logs"),
                InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="ai_analyze_analytics")
            ],
            [
                InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="ai_search_data"),
                InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ai_recommendations")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="ai_help"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_back")
            ]
        ])
        
        await message.answer(
            "ü§ñ <b>–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n"
            "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in ai_assistant_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞")


@router.callback_query(F.data == "ai_analyze_logs")
async def analyze_logs_callback(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        await callback.message.edit_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤", callback_data="ai_logs_6h"),
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", callback_data="ai_logs_24h")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="ai_logs_3d"),
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data="ai_logs_7d")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_back")
            ]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in analyze_logs_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–≥–æ–≤")


@router.callback_query(F.data.startswith("ai_logs_"))
async def process_logs_analysis(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥
        period_map = {
            "ai_logs_6h": 6,
            "ai_logs_24h": 24,
            "ai_logs_3d": 72,
            "ai_logs_7d": 168
        }
        
        period_hours = period_map.get(callback.data, 24)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            f"üîç <b>–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_hours} —á–∞—Å–æ–≤</b>\n\n"
            "‚è≥ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        result = await ai_assistant.analyze_system_logs(period_hours)
        
        if "error" in result:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n{result['error']}",
                parse_mode='HTML'
            )
        else:
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É", callback_data="ai_back")]
            ])
            
            await callback.message.edit_text(
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_hours} —á–∞—Å–æ–≤\n"
                f"üïê –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"{result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in process_logs_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–≥–æ–≤")


@router.callback_query(F.data == "ai_analyze_analytics")
async def analyze_analytics_callback(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await callback.message.edit_text(
            "üìä <b>–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="ai_analytics_3d"),
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data="ai_analytics_7d")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏", callback_data="ai_analytics_14d"),
                InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data="ai_analytics_30d")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_back")
            ]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in analyze_analytics_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@router.callback_query(F.data.startswith("ai_analytics_"))
async def process_analytics_analysis(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥
        period_map = {
            "ai_analytics_3d": 3,
            "ai_analytics_7d": 7,
            "ai_analytics_14d": 14,
            "ai_analytics_30d": 30
        }
        
        period_days = period_map.get(callback.data, 7)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π</b>\n\n"
            "‚è≥ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        result = await ai_assistant.analyze_user_analytics(period_days)
        
        if "error" in result:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n{result['error']}",
                parse_mode='HTML'
            )
        else:
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É", callback_data="ai_back")]
            ])
            
            await callback.message.edit_text(
                f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_days} –¥–Ω–µ–π\n"
                f"üïê –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"{result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in process_analytics_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@router.callback_query(F.data == "ai_search_data")
async def search_data_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    try:
        await callback.message.edit_text(
            "üîé <b>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email test@example.com\n"
            "‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã\n"
            "‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤—á–µ—Ä–∞\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–ª—å—à–µ 1000 –±–∞–ª–ª–æ–≤\n\n"
            "‚óÄÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
            parse_mode='HTML'
        )
        
        await state.set_state(AIAssistantStates.waiting_for_query)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in search_data_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞")


@router.message(AIAssistantStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        query = message.text.strip()
        
        if not query:
            await message.answer("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer(
            f"üîé <b>–ü–æ–∏—Å–∫: {query}</b>\n\n"
            "‚è≥ –ò–ò –∏—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
        result = await ai_assistant.search_database(query, "admin_search")
        
        if "error" in result:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n{result['error']}",
                parse_mode='HTML'
            )
        else:
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É", callback_data="ai_back")]
            ])
            
            await message.answer(
                f"üîé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
                f"üìù –ó–∞–ø—Ä–æ—Å: {query}\n"
                f"üïê –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"{result.get('results', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_search_query: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data == "ai_recommendations")
async def get_recommendations_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "üí° <b>–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
            "‚è≥ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result = await ai_assistant.get_system_recommendations()
        
        if "error" in result:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</b>\n\n{result['error']}",
                parse_mode='HTML'
            )
        else:
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É", callback_data="ai_back")]
            ])
            
            await callback.message.edit_text(
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
                f"üïê –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"{result.get('recommendations', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in get_recommendations_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


@router.callback_query(F.data == "ai_help")
async def ai_help_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É"""
    try:
        help_text = """
ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É</b>

<b>üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
‚Ä¢ –í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã —Ä–æ—Å—Ç–∞/—Å–Ω–∏–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

<b>üîé –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ò–ò
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_back")]
        ])
        
        await callback.message.edit_text(
            help_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in ai_help_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")


@router.callback_query(F.data == "ai_back")
async def ai_back_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    try:
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤", callback_data="ai_analyze_logs"),
                InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="ai_analyze_analytics")
            ],
            [
                InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="ai_search_data"),
                InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ai_recommendations")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="ai_help"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ai_back")
            ]
        ])
        
        await callback.message.edit_text(
            "ü§ñ <b>–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n"
            "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in ai_back_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")


def get_ai_assistant_router() -> Router:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    return router
