"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from core.services.gamification_service import gamification_service
from core.utils.locales_v2 import get_text

logger = logging.getLogger(__name__)
router = Router(name="gamification_router")

@router.message(F.text.in_([
    "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üèÜ Achievements", "üèÜ Th√†nh t·ª±u", "üèÜ ÏóÖÏ†Å"
]))
async def handle_achievements_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await gamification_service.get_user_stats(user_id)
        
        if not stats:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = f"üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üéØ –£—Ä–æ–≤–µ–Ω—å: {stats['level']}\n"
        text += f"üíé –ö–∞—Ä–º–∞: {stats['karma_points']}\n"
        text += f"‚≠ê –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {stats['loyalty_points']}\n"
        text += f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {stats['achievements_count']}\n"
        text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['referrals_count']}\n"
        text += f"üí≥ –ö–∞—Ä—Ç: {stats['cards_count']}\n"
        text += f"üî• –°–µ—Ä–∏—è: {stats['current_streak']} –¥–Ω–µ–π\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_list"),
                InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
            ],
            [
                InlineKeyboardButton(text="üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="achievements_stats"),
                InlineKeyboardButton(text="üèÖ –†–µ–π—Ç–∏–Ω–≥", callback_data="achievements_ranking")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing achievements menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

@router.callback_query(F.data == "achievements_list")
async def handle_achievements_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        achievements = await gamification_service.get_user_achievements(user_id, limit=10)
        
        if not achievements:
            text = "üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n"
            text += "üí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        else:
            text = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
            
            for i, achievement in enumerate(achievements, 1):
                rarity_color = {
                    'common': '‚ö™',
                    'rare': 'üîµ', 
                    'epic': 'üü£',
                    'legendary': 'üü°'
                }.get(achievement['rarity'], '‚ö™')
                
                text += f"{i}. {rarity_color} {achievement['icon']} <b>{achievement['name']}</b>\n"
                text += f"   {achievement['description']}\n"
                text += f"   üí∞ +{achievement['points_reward']} –±–∞–ª–ª–æ–≤\n"
                text += f"   üìÖ {achievement['earned_at'].strftime('%d.%m.%Y')}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_achievements")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

@router.callback_query(F.data == "achievements_progress")
async def handle_achievements_progress(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
    try:
        user_id = callback.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        progress = await gamification_service.get_achievement_progress(user_id)
        
        if not progress:
            text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        else:
            text = "üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:</b>\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            for achievement in progress[:10]:
                if achievement['is_earned']:
                    text += f"‚úÖ {achievement['rarity_color']} {achievement['icon']} <b>{achievement['name']}</b>\n"
                    text += f"   {achievement['description']}\n"
                    text += f"   üí∞ +{achievement['points_reward']} –±–∞–ª–ª–æ–≤\n\n"
                else:
                    text += f"‚è≥ {achievement['rarity_color']} {achievement['icon']} <b>{achievement['name']}</b>\n"
                    text += f"   {achievement['progress_bar']} {achievement['current']}/{achievement['target']} ({achievement['progress_percentage']}%)\n"
                    text += f"   {achievement['description']}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_achievements")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements progress: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

@router.callback_query(F.data == "achievements_stats")
async def handle_achievements_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        user_id = callback.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await gamification_service.get_user_stats(user_id)
        
        if not stats:
            text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        else:
            text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            
            # –£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            level = stats['level']
            karma = stats['karma_points']
            next_level_karma = 100 * (level + 1) if level < 10 else karma
            
            text += f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            text += f"üíé <b>–ö–∞—Ä–º–∞:</b> {karma}\n"
            if level < 10:
                text += f"üìà <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:</b> {next_level_karma - karma} –∫–∞—Ä–º—ã\n\n"
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            text += f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> {stats['achievements_count']}\n"
            text += f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {stats['referrals_count']}\n"
            text += f"üí≥ <b>–ö–∞—Ä—Ç:</b> {stats['cards_count']}\n"
            text += f"üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {stats['current_streak']} –¥–Ω–µ–π\n"
            text += f"‚≠ê <b>–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {stats['loyalty_points']}\n\n"
            
            # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if stats['member_since']:
                text += f"üìÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫ —Å:</b> {stats['member_since'].strftime('%d.%m.%Y')}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_achievements")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "achievements_ranking")
async def handle_achievements_ranking(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = callback.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        text = "üèÖ <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        text += "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ä–º–µ:\n"
        text += "1. ü•á –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 - 5000 –∫–∞—Ä–º—ã\n"
        text += "2. ü•à –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 - 4500 –∫–∞—Ä–º—ã\n"
        text += "3. ü•â –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 - 4000 –∫–∞—Ä–º—ã\n\n"
        text += "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:\n"
        text += "1. ü•á –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 - 25 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
        text += "2. ü•à –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 - 20 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
        text += "3. ü•â –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 - 18 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n"
        text += "üí° –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_achievements")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements ranking: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")

@router.callback_query(F.data == "back_to_achievements")
async def handle_back_to_achievements(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        user_id = callback.from_user.id
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await gamification_service.get_user_stats(user_id)
        
        if not stats:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = f"üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üéØ –£—Ä–æ–≤–µ–Ω—å: {stats['level']}\n"
        text += f"üíé –ö–∞—Ä–º–∞: {stats['karma_points']}\n"
        text += f"‚≠ê –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {stats['loyalty_points']}\n"
        text += f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {stats['achievements_count']}\n"
        text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['referrals_count']}\n"
        text += f"üí≥ –ö–∞—Ä—Ç: {stats['cards_count']}\n"
        text += f"üî• –°–µ—Ä–∏—è: {stats['current_streak']} –¥–Ω–µ–π\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_list"),
                InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
            ],
            [
                InlineKeyboardButton(text="üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="achievements_stats"),
                InlineKeyboardButton(text="üèÖ –†–µ–π—Ç–∏–Ω–≥", callback_data="achievements_ranking")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error returning to achievements menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")
