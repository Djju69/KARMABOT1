from __future__ import annotations

import logging
import os
from typing import Any, Dict, List, Optional, Union, cast

from aiogram import Bot, F, Router, html
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, Update, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from ..services.profile import profile_service
from ..utils.locales_v2 import translations, get_text
from .basic import (
    ensure_policy_accepted, feedback_user, get_file, get_hello, get_inline,
    get_location, get_photo, get_start, get_video, hiw_user, main_menu,
    on_language_select, open_cabinet, user_regional_rest
)
from .user_profile import show_profile
from ..settings import settings

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ category_handlers_v2
from .category_handlers_v2 import (
    handle_profile, on_hotels, on_hotels_submenu, on_restaurants, on_shops, on_spa,
    on_transport, on_tours, on_shops_submenu, on_tours_submenu, on_spa_submenu,
    on_transport_submenu, show_catalog_page, show_nearest_v2, show_categories_v2
)

# –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
if 'show_nearest_v2' not in globals():
    from .basic import show_nearest as show_nearest_v2  # type: ignore

if 'show_categories_v2' not in globals():
    from .basic import show_categories as show_categories_v2  # type: ignore

# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
async def show_places_page(callback_query: CallbackQuery, bot: Bot, lang: str, city_id: int, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Å—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        from core.handlers.category_handlers_v2 import show_catalog_page
        await show_catalog_page(bot, callback_query.message.chat.id, lang, 'places', 'all', page, city_id)
    except Exception as e:
        logger.error(f"Error in show_places_page: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç", show_alert=True)

async def show_offers_page(callback_query: CallbackQuery, bot: Bot, lang: str, city_id: int, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        from core.handlers.category_handlers_v2 import show_catalog_page
        await show_catalog_page(bot, callback_query.message.chat.id, lang, 'offers', 'all', page, city_id)
    except Exception as e:
        logger.error(f"Error in show_offers_page: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", show_alert=True)

async def show_place_details(callback_query: CallbackQuery, bot: Bot, lang: str, place_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞"""
    try:
        from core.database.db_v2 import db_v2
        place = db_v2.get_card_by_id(int(place_id))
        
        if not place:
            await callback_query.answer("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        details_text = f"""
üè¢ <b>{place.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>

üìç <b>–ê–¥—Ä–µ—Å:</b> {place.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {place.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {place.get('rating', '–ù/–î')}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{place.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üíé <b>–°–∫–∏–¥–∫–∞:</b> {place.get('discount', '–ù/–î')}%
        """
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"map_{place_id}")],
            [InlineKeyboardButton(text="üì± QR-–∫–æ–¥", callback_data=f"qr_{place_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
        ])
        
        await callback_query.message.edit_text(
            details_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in show_place_details: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π", show_alert=True)

async def show_offer_details(callback_query: CallbackQuery, bot: Bot, lang: str, offer_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        from core.database.db_v2 import db_v2
        offer = db_v2.get_card_by_id(int(offer_id))
        
        if not offer:
            await callback_query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        details_text = f"""
üéÅ <b>{offer.get('name', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {offer.get('price', '–ù/–î')}
üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {offer.get('valid_until', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {offer.get('rating', '–ù/–î')}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{offer.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üíé <b>–°–∫–∏–¥–∫–∞:</b> {offer.get('discount', '–ù/–î')}%
        """
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_{offer_id}")],
            [InlineKeyboardButton(text="üì± QR-–∫–æ–¥", callback_data=f"qr_{offer_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
        ])
        
        await callback_query.message.edit_text(
            details_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in show_offer_details: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)

async def show_category_items(message: Message, bot: Bot, lang: str, city_id: int, category: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        from core.handlers.category_handlers_v2 import show_catalog_page
        await show_catalog_page(bot, message.chat.id, lang, category, 'all', 1, city_id)
    except Exception as e:
        logger.error(f"Error in show_category_items: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
main_menu_router = Router(name="main_menu_router")

# --- Main Menu ---
@main_menu_router.message(CommandStart())
async def handle_start_command(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.debug(f"User {message.from_user.id} started the bot")
    await get_start(message, bot, state)


@main_menu_router.message(
    F.text.in_([
        # Common user-typed variants to open the main menu (not a button)
        "–ú–µ–Ω—é", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "Menu", "Main Menu",
        # Lowercase variants
        "–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu", "main menu",
    ])
)
async def handle_main_menu_text(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    logger.debug(f"User {message.from_user.id} requested main menu via text command")
    await get_start(message, bot, state)

@main_menu_router.message(F.text.in_([
    t.get('choose_category', '') for t in translations.values()
] + [
    t.get('menu.categories', '') for t in translations.values()
] + [
    '–ö–ê–¢–ï–ì–û–†–ò–ò', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'CATEGORIES', 'Categories', 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
]))
@main_menu_router.message(F.text == "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_choose_category(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if not await ensure_policy_accepted(message, bot, state):
        logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
    
    logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {lang}")
    
    try:
        logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–∑—ã–≤–∞–µ–º show_categories_v2 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await show_categories_v2(message, bot, lang)
        logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: show_categories_v2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error showing categories: {e}", exc_info=True)
        error_text = translations.get(lang, {}).get(
            'error_occurred', 
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")
        logger.warning(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")


@main_menu_router.message(F.text.in_([
    t.get('profile', '') for t in translations.values()
] + [
    t.get('menu.profile', '') for t in translations.values()
] + [
    'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üåê –û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
]))
@main_menu_router.message(F.text == "üåê –û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def handle_profile_button(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"User {message.from_user.id} opened profile")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from core.security.roles import get_user_role
        user_role = await get_user_role(message.from_user.id)
        
        # –°–æ–∑–¥–∞—Ç—å URL WebApp —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from core.services.webapp_integration import webapp_integration
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        cabinet_paths = {
            'user': '/user-cabinet.html',
            'partner': '/partner-cabinet.html', 
            'admin': '/admin-cabinet.html',
            'super_admin': '/admin-cabinet.html'
        }
        
        cabinet_path = cabinet_paths.get(user_role.name, '/user-cabinet.html')
        
        # –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from core.settings import settings
        webapp_base_url = settings.features.webapp_url.replace('/webapp', '')
        
        webapp_url = f"{webapp_base_url}{cabinet_path}"
        
        logger.info(f"WebApp URL created for user {message.from_user.id} ({user_role}): {webapp_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
        
        webapp_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    web_app=WebAppInfo(url=webapp_url)
                )],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        # –¢–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        role_descriptions = {
            'user': "‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ –∏ –±–∞–ª–ª–∞–º–∏\n‚Ä¢ üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n‚Ä¢ üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
            'partner': "‚Ä¢ üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π\n‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ –∏ –±–∞–ª–ª–∞–º–∏",
            'admin': "‚Ä¢ üìã –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫\n‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            'super_admin': "‚Ä¢ ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n‚Ä¢ üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\n‚Ä¢ üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        }
        
        description = role_descriptions.get(user_role.name, "‚Ä¢ üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ –∏ –±–∞–ª–ª–∞–º–∏")
        
        await message.answer(
            f"üåê <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WebApp</b>\n\n"
            f"–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:\n\n"
            f"{description}",
            reply_markup=webapp_keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in profile WebApp handling: {e}", exc_info=True)
        await message.answer("‚ùå WebApp –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@main_menu_router.message(F.text.in_(["üëë –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç", "–ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç"]))
async def handle_admin_cabinet_button(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp."""
    logger.debug(f"User {message.from_user.id} opened admin cabinet")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        from core.security.roles import get_user_role
        user_role = await get_user_role(message.from_user.id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç—É")
            return
        
        # –°–æ–∑–¥–∞—Ç—å URL WebApp —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        from core.services.webapp_integration import webapp_integration
        
        # –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from core.settings import settings
        webapp_base_url = settings.features.webapp_url.replace('/webapp', '')
        
        webapp_url = f"{webapp_base_url}/admin-cabinet.html"
        
        logger.info(f"Admin WebApp URL created for user {message.from_user.id} ({role_name}): {webapp_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
        
        webapp_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç",
                    web_app=WebAppInfo(url=webapp_url)
                )],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        # –¢–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
        if role_name == "super_admin":
            description = "‚Ä¢ ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n‚Ä¢ üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\n‚Ä¢ üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
            title = "üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç WebApp"
        else:
            description = "‚Ä¢ üìã –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫\n‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
            title = "üõ°Ô∏è –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç WebApp"
        
        await message.answer(
            f"üåê <b>{title}</b>\n\n"
            f"–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:\n\n"
            f"{description}",
            reply_markup=webapp_keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in admin cabinet WebApp handling: {e}", exc_info=True)
        await message.answer("‚ùå WebApp –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@main_menu_router.message(F.text.in_([
    t.get('help', '') for t in translations.values()
] + [
    t.get('menu.help', '') for t in translations.values()
]))
async def handle_help(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å' - –Ω–æ–≤–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞."""
    logger.debug(f"User {message.from_user.id} requested help")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ—â–∏
        from ..services.help_service import HelpService
        help_service = HelpService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        help_message = await help_service.get_help_message(message.from_user.id)
        help_message = (
            help_message.rstrip() +
            "\n\n‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü–æ–¥–¥–µ—Ä–∂–∫–∞: t.me/karma_system_official"
        )
        
        # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            help_message,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=kb
        )
        
    except Exception as e:
        logger.error(f"Error showing help: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'help_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

# Favorites (v4.2.5) ‚Äî real implementation
@main_menu_router.message(F.text.in_([
    t.get('menu.favorites', '') for t in translations.values()
] + [
    '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ'
]))
@main_menu_router.message(F.text.in_([get_text("favorites", lang) for lang in ["ru", "en", "ko", "vi"]] + ["‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ"]))
async def handle_favorites(message: Message, bot: Bot, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"User {message.from_user.id} opened favorites")
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    
    from core.database import db_v2
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    favorites = db_v2.get_user_favorites(message.from_user.id)
    
    if not favorites:
        empty_text = "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π.\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        await message.answer(empty_text, parse_mode="Markdown")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    response = "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è**\n\n"
    
    for i, fav in enumerate(favorites, 1):
        title = fav.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = fav.get('category_name', '–î—Ä—É–≥–æ–µ')
        description = fav.get('description', '')
        
        response += f"{i}. **{title}**\n"
        response += f"   üìÇ {category}\n"
        if description:
            response += f"   üìù {description}\n"
        response += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    from core.keyboards.inline_v2 import get_favorites_keyboard
    keyboard = get_favorites_keyboard(lang)
    
    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")


# Invite friends (reply menu with 3 items)
@main_menu_router.message(F.text.in_([
    t.get('menu.invite_friends', '') for t in translations.values()
] + [
    'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π'
]))
@main_menu_router.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")
async def handle_invite_friends_menu(message: Message, bot: Bot, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π" (3 –ø—É–Ω–∫—Ç–∞)."""
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    logger.debug(f"User {message.from_user.id} opened Invite Friends menu")

    back_text = translations.get(lang, {}).get('back_to_main_menu', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ"), KeyboardButton(text="üíµ –î–æ—Ö–æ–¥—ã")],
            [KeyboardButton(text=back_text)]
        ],
        resize_keyboard=True
    )

    await message.answer("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", reply_markup=kb, parse_mode="HTML")


# Real implementation for invite submenu actions
@main_menu_router.message(F.text.in_(["üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"]))
async def handle_invite_my_link(message: Message, bot: Bot, state: FSMContext) -> None:
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    
    from core.services.referral_service import referral_service
    from core.settings import settings
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = (await bot.get_me()).username
    referral_link = referral_service.generate_referral_link(message.from_user.id, bot_username)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await referral_service.get_referral_stats(message.from_user.id)
    
    response = translations.get(lang, {}).get(
        'referral_link_title',
        'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
    ) + "\n\n"
    
    response += translations.get(lang, {}).get(
        'referral_instructions',
        'üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!'
    ) + "\n\n"
    
    response += f"<a href='{referral_link}'>üéÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Karma System!</a>"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    share_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Karma System!")]
    ])
    
    await message.answer(response, parse_mode="HTML", reply_markup=share_keyboard)


@main_menu_router.message(F.text.in_(["üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ"]))
async def handle_invite_list(message: Message, bot: Bot, state: FSMContext) -> None:
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    
    from core.services.referral_service import referral_service
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
    referrals = await referral_service.get_user_referrals(message.from_user.id)
    
    if not referrals:
        empty_text = translations.get(lang, {}).get(
            'referrals_empty',
            'üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ\n\n–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!'
        )
        await message.answer(empty_text)
        return
    
    response = translations.get(lang, {}).get(
        'referrals_title',
        'üìã –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ'
    ) + "\n\n"
    
    for i, ref in enumerate(referrals, 1):
        name = ref.get('first_name', '') or ref.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        created_at = ref.get('created_at', '')
        reward = ref.get('reward_points', 0)
        
        response += f"{i}. **{name}**\n"
        response += f"   üìÖ {created_at}\n"
        response += f"   üí∞ +{reward} –±–∞–ª–ª–æ–≤\n\n"
    
    await message.answer(response, parse_mode="Markdown")


@main_menu_router.message(F.text.in_(["üíµ –î–æ—Ö–æ–¥—ã"]))
async def handle_invite_earnings(message: Message, bot: Bot, state: FSMContext) -> None:
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    
    from core.services.referral_service import referral_service
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤
    stats = await referral_service.get_referral_stats(message.from_user.id)
    
    response = translations.get(lang, {}).get(
        'earnings_title',
        'üíµ –î–æ—Ö–æ–¥—ã –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
    ) + "\n\n"
    
    response += f"üí∞ **–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {stats['total_earnings']} –±–∞–ª–ª–æ–≤\n"
    response += f"üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {stats['total_referrals']} —á–µ–ª–æ–≤–µ–∫\n"
    response += f"üî• **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {stats['active_referrals']} –∑–∞ 30 –¥–Ω–µ–π\n\n"
    
    if stats['total_referrals'] > 0:
        avg_earnings = stats['total_earnings'] / stats['total_referrals']
        response += f"üìä **–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:** {avg_earnings:.1f} –±–∞–ª–ª–æ–≤ —Å —á–µ–ª–æ–≤–µ–∫–∞\n\n"
    
    response += translations.get(lang, {}).get(
        'earnings_tip',
        'üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã!'
    )
    
    await message.answer(response, parse_mode="Markdown")


# --- Policy consent callbacks ---
@main_menu_router.callback_query(F.data == "accept_policy")
async def on_accept_policy(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """–î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —Ñ–ª–∞–≥ –≤ –ë–î.
    –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –ø–æ—Å–ª–µ \"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω\" –º–µ–Ω—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —É –≤—Å–µ—Ö.
    """
    from core.handlers.basic import handle_accept_policy as _handle_accept_policy
    await _handle_accept_policy(callback, bot, state)


@main_menu_router.callback_query(F.data == "decline_policy")
async def on_decline_policy(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=False)
    try:
        await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    except Exception:
        pass


@main_menu_router.message(F.text.in_([t.get('choose_language', '') for t in translations.values()]))
async def handle_choose_language(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    logger.debug(f"User {message.from_user.id} chose language selection")
    try:
        # Get current language from state
        user_data = await state.get_data()
        current_lang = user_data.get('lang', 'ru')
        
        # Show inline keyboard with language selection
        from core.keyboards.inline_v2 import get_language_inline
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
        lang_text = translations.get(current_lang, {}).get(
            'choose_language_text', 
            '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:'
        )
        
        await message.answer(
            lang_text,
            reply_markup=get_language_inline(active=current_lang)
        )
    except Exception as e:
        logger.error(f"Error showing language selection: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@main_menu_router.message(F.text.in_([t.get('show_nearest', '') for t in translations.values()]))
async def handle_show_nearest(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è' —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    logger.debug(f"User {message.from_user.id} requested nearest places")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        from core.keyboards.reply_v2 import get_location_request_keyboard
        location_text = translations.get(lang, {}).get(
            'request_location',
            'üìç –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:'
        )
        
        await message.answer(
            location_text,
            reply_markup=get_location_request_keyboard(lang)
        )
        
    except Exception as e:
        logger.error(f"Error requesting location: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'nearest_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.location)
async def handle_location(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude = message.location.latitude
        longitude = message.location.longitude
        
        logger.info(f"User {message.from_user.id} shared location: {latitude}, {longitude}")
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        from core.database.db_v2 import db_v2
        all_cards = db_v2.get_cards_by_category('all', status='published', limit=50)
        
        if not all_cards:
            no_places_text = translations.get(lang, {}).get(
                'no_places_found',
                '‚ùå –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω.'
            )
            await message.answer(no_places_text)
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        places_with_distance = []
        for card in all_cards:
            if card.get('latitude') and card.get('longitude'):
                distance = calculate_distance(
                    latitude, longitude,
                    card['latitude'], card['longitude']
                )
                places_with_distance.append((card, distance))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        places_with_distance.sort(key=lambda x: x[1])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –±–ª–∏–∂–∞–π—à–∏—Ö
        nearest_places = places_with_distance[:5]
        
        if not nearest_places:
            no_places_text = translations.get(lang, {}).get(
                'no_places_found',
                '‚ùå –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω.'
            )
            await message.answer(no_places_text)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_text = translations.get(lang, {}).get(
            'nearest_places_found',
            'üìç <b>–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:</b>\n\n'
        )
        
        for i, (place, distance) in enumerate(nearest_places, 1):
            distance_text = f"{distance:.1f} –∫–º" if distance >= 1 else f"{distance*1000:.0f} –º"
            result_text += f"{i}. <b>{place.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
            result_text += f"   üìç {place.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            result_text += f"   üìè {distance_text}\n"
            result_text += f"   üíé –°–∫–∏–¥–∫–∞: {place.get('discount', '–ù/–î')}%\n\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=translations.get(lang, {}).get('back_to_main_menu', '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))],
                [KeyboardButton(text=translations.get(lang, {}).get('choose_category', 'üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'))]
            ],
            resize_keyboard=True
        )
        
        await message.answer(result_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error processing location: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'location_error',
            '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        await message.answer(error_text)

def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)."""
    import math
    
    # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    R = 6371.0
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)
    
    # –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad
    
    # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    
    return R * c


@main_menu_router.message(F.text.in_([
    t.get('category_restaurants', '') for t in translations.values()
] + [
    'üçΩ restaurants', 'üçΩ Restaurants'
]))
async def handle_restaurants(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã'."""
    logger.warning(f"üîß RESTAURANTS HANDLER CALLED: user={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()
    logger.warning(f"üîß FSM STATE: {current_state}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    logger.warning(f"üîß STATE DATA: {state_data}")
    
    logger.debug(f"User {message.from_user.id} selected Restaurants category")
    if not await ensure_policy_accepted(message, bot, state):
        logger.warning(f"üîß POLICY NOT ACCEPTED for user {message.from_user.id}")
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        
        logger.warning(f"üîß CALLING on_restaurants with lang={lang}, city_id={city_id}")
        await on_restaurants(message, bot, lang, city_id)
        logger.warning(f"üîß FINISHED on_restaurants")
        
    except Exception as e:
        logger.error(f"Error in restaurants category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'restaurants_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('category_spa', '') for t in translations.values()
] + [
    'üßñ‚Äç‚ôÄ spa', 'üßñ‚Äç‚ôÄ Spa'
]))
async def handle_spa(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'SPA –∏ –£—Ö–æ–¥'."""
    logger.debug(f"User {message.from_user.id} selected SPA category")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await on_spa(message, bot, lang, city_id)
    except Exception as e:
        logger.error(f"Error in SPA category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'spa_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ SPA-—Å–∞–ª–æ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('category_hotels', '') for t in translations.values()
] + [
    'üè® hotels', 'üè® Hotels'
]))
async def handle_hotels(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–µ–ª–∏'."""
    logger.debug(f"User {message.from_user.id} selected Hotels category")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await on_hotels(message, bot, lang, city_id)
    except Exception as e:
        logger.error(f"Error in hotels category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'hotels_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('category_transport', '') for t in translations.values()
] + [
    'üöó transport', 'üöó Transport'
]))
async def handle_transport(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'."""
    logger.warning(f"üîß TRANSPORT HANDLER CALLED: user={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()
    logger.warning(f"üîß FSM STATE: {current_state}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    logger.warning(f"üîß STATE DATA: {state_data}")
    
    logger.debug(f"User {message.from_user.id} selected Transport category")
    if not await ensure_policy_accepted(message, bot, state):
        logger.warning(f"üîß POLICY NOT ACCEPTED for user {message.from_user.id}")
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        # 'on_transport' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç city_id
        
        logger.warning(f"üîß CALLING on_transport with lang={lang}")
        await on_transport(message, bot, lang)
        logger.warning(f"üîß FINISHED on_transport")
        
    except Exception as e:
        logger.error(f"Error in transport category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'transport_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('category_tours', '') for t in translations.values()
] + [
    'üö∂‚Äç‚ôÇ tours', 'üö∂‚Äç‚ôÇ Tours'
]))
async def handle_tours(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏'."""
    logger.debug(f"User {message.from_user.id} selected Tours category")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        # 'on_tours' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç city_id
        await on_tours(message, bot, lang)
    except Exception as e:
        logger.error(f"Error in tours category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'tours_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('category_shops_services', '') for t in translations.values()
] + [
    'üõç shops', 'üõç Shops'
]))
async def handle_shops(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —É—Å–ª—É–≥–∏'."""
    logger.warning(f"üîß SHOPS HANDLER CALLED: user={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()
    logger.warning(f"üîß FSM STATE: {current_state}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    logger.warning(f"üîß STATE DATA: {state_data}")
    
    logger.debug(f"User {message.from_user.id} selected Shops category")
    if not await ensure_policy_accepted(message, bot, state):
        logger.warning(f"üîß POLICY NOT ACCEPTED for user {message.from_user.id}")
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        
        logger.warning(f"üîß CALLING on_shops with lang={lang}, city_id={city_id}")
        await on_shops(message, bot, lang, city_id)
        logger.warning(f"üîß FINISHED on_shops")
        
    except Exception as e:
        logger.error(f"Error in shops category: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'shops_error', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([t.get('choose_district', '') for t in translations.values()]))
async def handle_choose_district(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ —Ä–∞–π–æ–Ω–∞–º' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º."""
    logger.debug(f"User {message.from_user.id} requested districts")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        from core.database.db_v2 import db_v2
        all_cards = db_v2.get_cards_by_category('all', status='published', limit=1000)
        
        if city_id is not None:
            all_cards = [c for c in all_cards if c.get('city_id') == city_id]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–π–æ–Ω–∞–º
        districts = {}
        for card in all_cards:
            district = card.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')
            if district not in districts:
                districts[district] = []
            districts[district].append(card)
        
        if not districts:
            no_districts_text = translations.get(lang, {}).get(
                'no_districts_found',
                '‚ùå –ó–∞–≤–µ–¥–µ–Ω–∏–π –ø–æ —Ä–∞–π–æ–Ω–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
            )
            await message.answer(no_districts_text)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–π–æ–Ω–∞–º–∏
        districts_text = translations.get(lang, {}).get(
            'districts_found',
            'üåÜ <b>–ó–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ä–∞–π–æ–Ω–∞–º:</b>\n\n'
        )
        
        for district, cards in sorted(districts.items()):
            districts_text += f"üìç <b>{district}</b> ({len(cards)} –∑–∞–≤–µ–¥–µ–Ω–∏–π)\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–π–æ–Ω–∞–º–∏
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard_rows = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        district_list = list(districts.keys())
        for i in range(0, len(district_list), 2):
            row = [KeyboardButton(text=district_list[i])]
            if i + 1 < len(district_list):
                row.append(KeyboardButton(text=district_list[i + 1]))
            keyboard_rows.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_rows.append([KeyboardButton(text=translations.get(lang, {}).get('back_to_main_menu', '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_rows,
            resize_keyboard=True
        )
        
        await message.answer(districts_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing districts: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'districts_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–π–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([t.get('qr_codes', '') for t in translations.values()]))
async def handle_qr_codes(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'QR-–∫–æ–¥—ã' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"User {message.from_user.id} requested QR codes")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from core.database.db_v2 import db_v2
        user_qr_codes = db_v2.get_user_qr_codes(message.from_user.id)
        
        if not user_qr_codes:
            no_qr_text = translations.get(lang, {}).get(
                'no_qr_codes',
                'üì± –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç QR-–∫–æ–¥–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö.'
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=translations.get(lang, {}).get('create_qr_code', 'üì± –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥'))],
                    [KeyboardButton(text=translations.get(lang, {}).get('back_to_main_menu', '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))]
                ],
                resize_keyboard=True
            )
            
            await message.answer(no_qr_text, reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–∞–º–∏
        qr_text = translations.get(lang, {}).get(
            'qr_codes_list',
            'üì± <b>–í–∞—à–∏ QR-–∫–æ–¥—ã:</b>\n\n'
        )
        
        for i, qr_code in enumerate(user_qr_codes[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            status_emoji = "‚úÖ" if qr_code.get('is_active') else "‚ùå"
            qr_text += f"{i}. {status_emoji} <b>{qr_code.get('name', 'QR-–∫–æ–¥')}</b>\n"
            qr_text += f"   üíé –°–∫–∏–¥–∫–∞: {qr_code.get('discount', '–ù/–î')}%\n"
            qr_text += f"   üìÖ –°–æ–∑–¥–∞–Ω: {qr_code.get('created_at', '–ù/–î')}\n\n"
        
        if len(user_qr_codes) > 5:
            qr_text += f"... –∏ –µ—â–µ {len(user_qr_codes) - 5} QR-–∫–æ–¥–æ–≤"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=translations.get(lang, {}).get('create_qr_code', 'üì± –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥'))],
                [KeyboardButton(text=translations.get(lang, {}).get('my_qr_codes', 'üìã –ú–æ–∏ QR-–∫–æ–¥—ã'))],
                [KeyboardButton(text=translations.get(lang, {}).get('back_to_main_menu', '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))]
            ],
            resize_keyboard=True
        )
        
        await message.answer(qr_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing QR codes: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'qr_codes_error',
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([t.get('create_qr_code', '') for t in translations.values()]))
async def handle_create_qr_code(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        import qrcode
        import io
        from aiogram.types import InputFile
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø–æ–¥–ø–∏—Å—å
        import uuid, time, hmac, hashlib, os
        qr_id = str(uuid.uuid4())[:8]
        exp_ts = int(time.time()) + 30*24*60*60  # 30 –¥–Ω–µ–π
        secret = os.getenv('SECRET_KEY', 'karmasystem-secret')
        sig_payload = f"{qr_id}:{message.from_user.id}:{exp_ts}".encode()
        sig = hmac.new(secret.encode(), sig_payload, hashlib.sha256).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        # –§–æ—Ä–º–∞—Ç: KARMA_QR:<qr_id>:<user_id>:<exp_ts>:<hmac>
        qr.add_data(f"KARMA_QR:{qr_id}:{message.from_user.id}:{exp_ts}:{sig}")
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        bio = io.BytesIO()
        img.save(bio, format='PNG')
        bio.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        qr_text = translations.get(lang, {}).get('qr_code_created', '').format(qr_id=qr_id) or (
            f'üì± <b>–í–∞—à QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n'
            f'üÜî –ö–æ–¥: {qr_id}\n'
            f'üíé –°–∫–∏–¥–∫–∞: 10%\n'
            f'üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç: 30 –¥–Ω–µ–π\n\n'
            f'–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö-–ø–∞—Ä—Ç–Ω—ë—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.'
        )
        
        await message.answer_photo(
            photo=InputFile(bio, filename=f"qr_{qr_id}.png"),
            caption=qr_text,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ –ë–î
        from core.database.db_v2 import db_v2
        try:
            ok = db_v2.create_user_qr_code(
            user_id=message.from_user.id,
            qr_id=qr_id,
            name=f"QR-–∫–æ–¥ {qr_id}",
            discount=10
            )
            if not ok:
                logger.warning("create_user_qr_code returned False user_id=%s qr_id=%s", message.from_user.id, qr_id)
        except Exception as dbe:
            logger.error("DB error creating user QR: %s", dbe)
        
    except Exception as e:
        logger.error(f"Error creating QR code: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get('qr_create_error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        await message.answer(error_text)


@main_menu_router.message(F.text.startswith("KARMA_QR:"))
async def handle_qr_text_redeem(message: Message, bot: Bot, state: FSMContext) -> None:
    """Redeem QR from text payload with HMAC+TTL check; deactivate stored user QR if matches."""
    try:
        text = (message.text or "").strip()
        parts = text.split(":")
        # Expected: KARMA_QR:<qr_id>:<user_id>:<exp_ts>:<hmac>
        if len(parts) != 5:
            await message.answer(translations.get((await state.get_data()).get('lang','ru'),{}).get('qr_invalid_format','‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR.'))
            return
        _, qr_id, owner_id, exp_ts, sig = parts
        import hmac, hashlib, os, time
        secret = os.getenv('SECRET_KEY')
        if not secret:
            await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        payload = f"{qr_id}:{owner_id}:{exp_ts}".encode()
        calc = hmac.new(secret.encode(), payload, hashlib.sha256).hexdigest()
        if not hmac.compare_digest(calc, sig):
            lang = (await state.get_data()).get('lang','ru')
            await message.answer(translations.get(lang,{}).get('qr_invalid_signature','‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å QR.'))
            return
        if int(exp_ts) < int(time.time()):
            lang = (await state.get_data()).get('lang','ru')
            await message.answer(translations.get(lang,{}).get('qr_expired','‚åõ QR –∏—Å—Ç—ë–∫.'))
            return
        # Deactivate user's stored QR if present (best-effort)
        from core.database.db_v2 import db_v2
        try:
            if not db_v2.deactivate_user_qr_code(int(owner_id), str(qr_id)):
                logger.info("No active user QR to deactivate user_id=%s qr_id=%s", owner_id, qr_id)
        except Exception as dbe:
            logger.error("Error deactivating user QR: %s", dbe)
        # Award points to the user who redeemed the QR (best-effort)
        try:
            from core.services.user_service import add_points as add_karma_points
            ok_pts = await add_karma_points(message.from_user.id, 10, description=f"QR {qr_id} redeemed")
            lang = (await state.get_data()).get('lang','ru')
            if ok_pts:
                await message.answer(translations.get(lang,{}).get('qr_accepted_points','‚úÖ QR –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.').format(points=10))
            else:
                await message.answer(translations.get(lang,{}).get('qr_accepted_plain','‚úÖ QR –ø—Ä–∏–Ω—è—Ç.'))
        except Exception as pe:
            logger.error("Error awarding points on QR redeem: %s", pe)
            lang = (await state.get_data()).get('lang','ru')
            await message.answer(translations.get(lang,{}).get('qr_accepted_plain','‚úÖ QR –ø—Ä–∏–Ω—è—Ç.'))
    except Exception as e:
        logger.error(f"Error redeeming QR: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR.")

@main_menu_router.message(F.text.in_([t.get('back_to_main_menu', '') for t in translations.values()] + ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']))
async def handle_back_to_main_menu(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    logger.debug(f"User {message.from_user.id} clicked back to main menu")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –†–æ–ª—å-–∑–∞–≤–∏—Å–∏–º—ã–π –≤–æ–∑–≤—Ä–∞—Ç (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –≤ —é–∑–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é)
        from core.settings import settings
        from core.services.admins import admins_service
        from core.keyboards.reply_v2 import get_main_menu_reply_admin, get_main_menu_reply
        user_id = message.from_user.id
        lang = await profile_service.get_lang(user_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π
        from core.security.roles import get_user_role
        user_role = await get_user_role(user_id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        is_superadmin = role_name == "super_admin"
        is_admin = False if is_superadmin else await admins_service.is_admin(user_id)
        if is_superadmin or is_admin:
            kb = get_main_menu_reply_admin(lang, is_superadmin)
        else:
            kb = get_main_menu_reply(lang)
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
@main_menu_router.message(F.text.in_([
    t.get('filter_asia', '') for t in translations.values()
    if t.get('filter_asia')
]))
async def handle_restaurants_asia(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ '–ê–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    logger.debug(f"User {message.from_user.id} selected Asian cuisine filter")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await show_catalog_page(bot, message.chat.id, lang, 'restaurants', 'asia', page=1, city_id=city_id)
    except Exception as e:
        logger.error(f"Error in Asian cuisine filter: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([
    t.get('filter_europe', '') for t in translations.values()
    if t.get('filter_europe')
]))
async def handle_restaurants_europe(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    logger.debug(f"User {message.from_user.id} selected European cuisine filter")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await show_catalog_page(bot, message.chat.id, lang, 'restaurants', 'europe', page=1, city_id=city_id)
    except Exception as e:
        logger.error(f"Error in European cuisine filter: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([
    t.get('filter_street', '') for t in translations.values()
    if t.get('filter_street')
]))
async def handle_restaurants_street(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ '–£–ª–∏—á–Ω–∞—è –µ–¥–∞' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    logger.debug(f"User {message.from_user.id} selected Street food filter")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await show_catalog_page(bot, message.chat.id, lang, 'restaurants', 'street', page=1, city_id=city_id)
    except Exception as e:
        logger.error(f"Error in Street food filter: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([
    t.get('filter_vege', '') for t in translations.values()
    if t.get('filter_vege')
]))
async def handle_restaurants_vegetarian(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    logger.debug(f"User {message.from_user.id} selected Vegetarian cuisine filter")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await show_catalog_page(bot, message.chat.id, lang, 'restaurants', 'vege', page=1, city_id=city_id)
    except Exception as e:
        logger.error(f"Error in Vegetarian cuisine filter: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([
    t.get('restaurants_show_all', '') for t in translations.values()
    if t.get('restaurants_show_all')
]))
async def handle_restaurants_show_all(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    logger.debug(f"User {message.from_user.id} selected Show all restaurants")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        await show_catalog_page(bot, message.chat.id, lang, 'restaurants', 'all', page=1, city_id=city_id)
    except Exception as e:
        logger.error(f"Error in Show all restaurants: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")

@main_menu_router.message(F.text.in_([
    t.get('back_to_categories', '') for t in translations.values()
    if t.get('back_to_categories')
]))
async def handle_back_to_categories(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    logger.debug(f"User {message.from_user.id} clicked back to categories")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        from core.handlers.category_handlers_v2 import show_categories_v2
        await show_categories_v2(message, bot, state)
    except Exception as e:
        logger.error(f"Error showing categories: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([
    t.get('back', '') for t in translations.values()
    if t.get('back')
] + [
    t.get('back_to_main_menu', '') for t in translations.values()
    if t.get('back_to_main_menu')
] + [
    '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
]))
async def handle_back_to_main_menu(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    logger.debug(f"User {message.from_user.id} clicked back to main menu")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–æ–ª—å-–∑–∞–≤–∏—Å–∏–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from core.settings import settings
        from core.services.admins import admins_service
        from core.keyboards.reply_v2 import get_main_menu_reply_admin, get_main_menu_reply
        user_id = message.from_user.id
        lang = await profile_service.get_lang(user_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π
        from core.security.roles import get_user_role
        user_role = await get_user_role(user_id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        is_superadmin = role_name == "super_admin"
        is_admin = False if is_superadmin else await admins_service.is_admin(user_id)
        if is_superadmin or is_admin:
            kb = get_main_menu_reply_admin(lang, is_superadmin)
        else:
            kb = get_main_menu_reply(lang)
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'menu_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é
@main_menu_router.message(F.text.in_([
    t.get('transport_bikes', '') for t in translations.values()
    if t.get('transport_bikes')
]))
async def handle_transport_bikes(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ê—Ä–µ–Ω–¥–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤'."""
    await handle_transport_submenu_typed(message, bot, state, 'bikes')


@main_menu_router.message(F.text.in_([
    t.get('transport_cars', '') for t in translations.values()
    if t.get('transport_cars')
]))
async def handle_transport_cars(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π'."""
    await handle_transport_submenu_typed(message, bot, state, 'cars')


@main_menu_router.message(F.text.in_([
    t.get('transport_bicycles', '') for t in translations.values()
    if t.get('transport_bicycles')
]))
async def handle_transport_bicycles(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ê—Ä–µ–Ω–¥–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤'."""
    await handle_transport_submenu_typed(message, bot, state, 'bicycles')


@main_menu_router.message(F.text.in_([
    t.get('tours_group', '') for t in translations.values()
    if t.get('tours_group')
]))
async def handle_group_tours(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ì—Ä—É–ø–ø–æ–≤—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏'."""
    await handle_tours_submenu_typed(message, bot, state, 'group')


@main_menu_router.message(F.text.in_([
    t.get('tours_private', '') for t in translations.values()
    if t.get('tours_private')
]))
async def handle_private_tours(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏'."""
    await handle_tours_submenu_typed(message, bot, state, 'private')


@main_menu_router.message(F.text.in_([
    t.get('spa_massage', '') for t in translations.values()
    if t.get('spa_massage')
]))
async def handle_massage(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ú–∞—Å—Å–∞–∂'."""
    await handle_spa_submenu_typed(message, bot, state, 'massage')


@main_menu_router.message(F.text.in_([
    t.get('spa_sauna', '') for t in translations.values()
    if t.get('spa_sauna')
]))
async def handle_sauna(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–°–∞—É–Ω–∞'."""
    await handle_spa_submenu_typed(message, bot, state, 'sauna')


@main_menu_router.message(F.text.in_([
    t.get('spa_salon', '') for t in translations.values()
    if t.get('spa_salon')
]))
async def handle_beauty_salon(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã'."""
    await handle_spa_submenu_typed(message, bot, state, 'salon')


@main_menu_router.message(F.text.in_([
    t.get('hotels_hotels', '') for t in translations.values()
    if t.get('hotels_hotels')
]))
async def handle_hotels_list(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–û—Ç–µ–ª–∏'."""
    await handle_hotels_submenu_typed(message, bot, state, 'hotels')


@main_menu_router.message(F.text.in_([
    t.get('hotels_apartments', '') for t in translations.values()
    if t.get('hotels_apartments')
]))
async def handle_apartments(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'."""
    await handle_hotels_submenu_typed(message, bot, state, 'apartments')


@main_menu_router.message(F.text.in_([
    t.get('shops_shops', '') for t in translations.values()
    if t.get('shops_shops')
]))
async def handle_shops_list(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–ú–∞–≥–∞–∑–∏–Ω—ã'."""
    await handle_shops_submenu_typed(message, bot, state, 'shops')


@main_menu_router.message(F.text.in_([
    t.get('shops_services', '') for t in translations.values()
    if t.get('shops_services')
]))
async def handle_services(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é '–£—Å–ª—É–≥–∏'."""
    await handle_shops_submenu_typed(message, bot, state, 'services')


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–º–µ–Ω—é
async def handle_transport_submenu_typed(message: Message, bot: Bot, state: FSMContext, transport_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞."""
    logger.debug(f"User {message.from_user.id} selected transport type: {transport_type}")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sub_slug –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        await on_transport_submenu(message, bot, lang, city_id, state)
    except Exception as e:
        logger.error(f"Error in {transport_type} transport: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'transport_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


async def handle_tours_submenu_typed(message: Message, bot: Bot, state: FSMContext, tour_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–π."""
    logger.debug(f"User {message.from_user.id} selected tour type: {tour_type}")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sub_slug –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        await on_tours_submenu(message, bot, lang, city_id, state)
    except Exception as e:
        logger.error(f"Error in {tour_type} tours: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'tours_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


async def handle_spa_submenu_typed(message: Message, bot: Bot, state: FSMContext, service_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é SPA –∏ —É—Ö–æ–¥–∞."""
    logger.debug(f"User {message.from_user.id} selected SPA service: {service_type}")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sub_slug –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        await on_spa_submenu(message, bot, lang, city_id, state)
    except Exception as e:
        logger.error(f"Error in {service_type} SPA service: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'spa_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


async def handle_hotels_submenu_typed(message: Message, bot: Bot, state: FSMContext, accommodation_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é –æ—Ç–µ–ª–µ–π."""
    logger.debug(f"User {message.from_user.id} selected accommodation type: {accommodation_type}")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sub_slug –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        await on_hotels_submenu(message, bot, lang, city_id, state)
    except Exception as e:
        logger.error(f"Error in {accommodation_type} accommodation: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'hotels_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


async def handle_shops_submenu_typed(message: Message, bot: Bot, state: FSMContext, shop_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ —É—Å–ª—É–≥."""
    logger.debug(f"User {message.from_user.id} selected shop type: {shop_type}")
    if not await ensure_policy_accepted(message, bot, state):
        return
        
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(message.from_user.id)
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sub_slug –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        await on_shops_submenu(message, bot, lang, city_id, state)
    except Exception as e:
        logger.error(f"Error in {shop_type} shops: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        error_text = translations.get(lang, {}).get(
            'shops_error',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        await message.answer(error_text, parse_mode="HTML")


@main_menu_router.message(F.text.in_([t.get('ai_assistant', '') for t in translations.values() if t.get('ai_assistant')]))
async def handle_ai_assistant_entry(message: Message, bot: Bot, state: FSMContext) -> None:
    """Entry point for AI assistant from admin main menu."""
    try:
        from ..services.help_service import HelpService
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        help_service = HelpService()
        base_text = await help_service.get_help_message(message.from_user.id)
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]])
        await message.answer(base_text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error opening AI assistant: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@main_menu_router.message(Command("odoo"))
async def handle_odoo_links(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û—Ç–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª Odoo –∏–∑ ODOO_BASE_URL. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Å—Ç–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞."""
    base = os.getenv("ODOO_BASE_URL")
    if not base:
        await message.answer("‚ÑπÔ∏è –ü–æ—Ä—Ç–∞–ª –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ODOO_BASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    base = base.rstrip("/")
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Ä—Ç–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞", url=f"{base}/my")],
        [InlineKeyboardButton(text="–ú–æ–∏ —Å—á–µ—Ç–∞", url=f"{base}/my/invoices")],
    ])
    await message.answer("ODoo –ø–æ—Ä—Ç–∞–ª:", reply_markup=kb)


# --- Navigation Handlers ---
@main_menu_router.callback_query(F.data.startswith('prev_page_'))
async def handle_prev_page(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(callback_query.from_user.id)
        
        # Get page type and page number from callback_data
        # Format: "page_{page_type}_{page_number}"
        _, page_type, page_number = callback_query.data.split("_")
        page_number = int(page_number)
        
        if page_type == "places":
            await show_places_page(callback_query, bot, lang, city_id, page_number)
        elif page_type == "offers":
            await show_offers_page(callback_query, bot, lang, city_id, page_number)
            
    except Exception as e:
        logger.error(f"Error in page navigation: {e}", exc_info=True)
        await callback_query.answer(
            translations.get(lang, {}).get(
                'navigation_error',
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            ),
            show_alert=True
        )


@main_menu_router.callback_query(F.data.startswith("item_"))
async def handle_item_selection(callback_query: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∑–∞–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç.–¥.)."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ ID –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: "item_{item_type}_{item_id}"
        _, item_type, item_id = callback_query.data.split("_")
        
        if item_type == "place":
            await show_place_details(callback_query, bot, lang, item_id)
        elif item_type == "offer":
            await show_offer_details(callback_query, bot, lang, item_id)
            
    except Exception as e:
        logger.error(f"Error in item selection: {e}", exc_info=True)
        await callback_query.answer(
            translations.get(lang, {}).get(
                'item_selection_error',
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            ),
            show_alert=True
        )


@main_menu_router.callback_query(F.data == "back_to_list")
async def handle_back_to_list(callback_query: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'."""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        city_id = await profile_service.get_city_id(callback_query.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_category = user_data.get('current_category')
        if not current_category:
            raise ValueError("No current category in state")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await show_category_items(callback_query.message, bot, lang, city_id, current_category)
        
    except Exception as e:
        logger.error(f"Error going back to list: {e}", exc_info=True)
        await callback_query.answer(
            translations.get(lang, {}).get(
                'back_to_list_error',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            ),
            show_alert=True
        )


@main_menu_router.callback_query(F.data == "main_menu")
async def handle_back_to_main_menu(callback_query: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    try:
        await main_menu(callback_query.message, bot, state)
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}", exc_info=True)
        await callback_query.answer(
            translations.get('ru', {}).get(
                'main_menu_error',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            ),
            show_alert=True
        )


# --- Command Handlers ---
 


 


 


 


 


 


 


 


 


 
