"""
–ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""
import logging
from typing import List, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from core.services.tariff_service import tariff_service
from core.models.tariff_models import TariffType
from core.security.roles import get_user_role

logger = logging.getLogger(__name__)
router = Router(name="tariff_admin_router")

@router.message(F.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
async def handle_tariff_management(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_role = await get_user_role(message.from_user.id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = await tariff_service.get_all_tariffs()
        
        if not tariffs:
            await message.answer("‚ùå –¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for tariff in tariffs:
            price_text = f"{tariff.price_vnd:,} VND/–º–µ—Å" if tariff.price_vnd > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            button_text = f"{tariff.name} - {price_text}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"tariff_view:{tariff.tariff_type.value}"
                )
            ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="tariff_stats"),
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="tariff_create")
        ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ])
        
        text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in tariff management: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤")

@router.callback_query(F.data.startswith("tariff_view:"))
async def handle_tariff_view(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ"""
    try:
        tariff_type_str = callback.data.split(":")[1]
        tariff_type = TariffType(tariff_type_str)
        
        tariff = await tariff_service.get_tariff_by_type(tariff_type)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = f"üí∞ <b>{tariff.name}</b>\n\n"
        text += f"üìã <b>–¢–∏–ø:</b> {tariff.tariff_type.value}\n"
        text += f"üíµ <b>–¶–µ–Ω–∞:</b> {tariff.price_vnd:,} VND/–º–µ—Å—è—Ü\n" if tariff.price_vnd > 0 else "üíµ <b>–¶–µ–Ω–∞:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        text += f"üìä <b>–õ–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {tariff.features.max_transactions_per_month} –≤ –º–µ—Å—è—Ü\n" if tariff.features.max_transactions_per_month != -1 else "üìä <b>–õ–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> –ë–µ–∑–ª–∏–º–∏—Ç\n"
        text += f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {tariff.features.commission_rate * 100:.1f}%\n"
        text += f"üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if tariff.features.analytics_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if tariff.features.priority_support else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"üîå <b>API –¥–æ—Å—Ç—É–ø:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω' if tariff.features.api_access else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
        text += f"üõ†Ô∏è <b>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if tariff.features.custom_integrations else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"üë®‚Äçüíº <b>–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω' if tariff.features.dedicated_manager else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"tariff_edit:{tariff_type.value}"),
                InlineKeyboardButton(text="üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data=f"tariff_subscribers:{tariff_type.value}")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="tariff_management")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing tariff: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∞—Ä–∏—Ñ–∞")

@router.callback_query(F.data.startswith("tariff_subscribers:"))
async def handle_tariff_subscribers(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        tariff_type_str = callback.data.split(":")[1]
        tariff_type = TariffType(tariff_type_str)
        
        tariff = await tariff_service.get_tariff_by_type(tariff_type)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ TariffService)
        text = f"üìä <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ {tariff.name}</b>\n\n"
        text += "üîç –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
        text += "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ—É", callback_data=f"tariff_view:{tariff_type.value}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing tariff subscribers: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

@router.callback_query(F.data == "tariff_stats")
async def handle_tariff_stats(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = await tariff_service.get_all_tariffs()
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        total_revenue = 0
        for tariff in tariffs:
            # –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subscribers_count = 0  # await tariff_service.get_subscribers_count(tariff.tariff_type)
            monthly_revenue = tariff.price_vnd * subscribers_count
            total_revenue += monthly_revenue
            
            text += f"üí∞ <b>{tariff.name}</b>\n"
            text += f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers_count}\n"
            text += f"   üíµ –î–æ—Ö–æ–¥/–º–µ—Å—è—Ü: {monthly_revenue:,} VND\n\n"
        
        text += f"üìà <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {total_revenue:,} VND/–º–µ—Å—è—Ü\n"
        text += f"üìä <b>–í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤:</b> {len(tariffs)}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="tariff_management")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing tariff stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "tariff_management")
async def handle_tariff_management_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = await tariff_service.get_all_tariffs()
        
        if not tariffs:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for tariff in tariffs:
            price_text = f"{tariff.price_vnd:,} VND/–º–µ—Å" if tariff.price_vnd > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            button_text = f"{tariff.name} - {price_text}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"tariff_view:{tariff.tariff_type.value}"
                )
            ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="tariff_stats"),
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="tariff_create")
        ])
        
        text = "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in tariff management callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤")
