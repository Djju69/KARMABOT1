"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..services.user_service import get_user_role
from ..services.notification_service import notification_service, NotificationType, AlertLevel

logger = logging.getLogger(__name__)
router = Router(name="notification_handler")


@router.message(Command("notifications"))
async def show_notifications(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notifications = await notification_service.get_user_notifications(user_id)
        
        if not notifications:
            await message.answer("üì± –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        report = "üì± <b>–í–ê–®–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
        
        for i, notif in enumerate(notifications[:10], 1):
            status = "‚úÖ" if notif.read else "üîî"
            report += f"{status} <b>{notif.title}</b>\n"
            report += f"   {notif.message}\n"
            report += f"   <i>{notif.created_at.strftime('%d.%m.%Y %H:%M')}</i>\n\n"
        
        if len(notifications) > 10:
            report += f"... –∏ –µ—â–µ {len(notifications) - 10} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing notifications: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.message(Command("alerts"))
async def show_alerts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts = await notification_service.get_active_alerts()
        
        if not alerts:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
            return
        
        report = "üö® <b>–°–ò–°–¢–ï–ú–ù–´–ï –ê–õ–ï–†–¢–´</b>\n\n"
        
        for i, alert in enumerate(alerts[:10], 1):
            level_emoji = {
                AlertLevel.CRITICAL: "üî¥",
                AlertLevel.HIGH: "üü†", 
                AlertLevel.MEDIUM: "üü°",
                AlertLevel.LOW: "üîµ"
            }.get(alert.level, "‚ö™")
            
            report += f"{level_emoji} <b>{alert.title}</b>\n"
            report += f"   [{alert.level.value.upper()}] {alert.message}\n"
            report += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {alert.category}\n"
            report += f"   <i>{alert.created_at.strftime('%d.%m.%Y %H:%M')}</i>\n\n"
        
        if len(alerts) > 10:
            report += f"... –∏ –µ—â–µ {len(alerts) - 10} –∞–ª–µ—Ä—Ç–æ–≤"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing alerts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")


@router.message(Command("alert_stats"))
async def show_alert_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await notification_service.get_notification_stats()
        
        report = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n"
        
        report += f"üì± <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_notifications', 0)}\n"
        report += f"‚Ä¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {stats.get('unread_notifications', 0)}\n\n"
        
        report += f"üö® <b>–ê–ª–µ—Ä—Ç—ã:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_alerts', 0)}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_alerts', 0)}\n\n"
        
        report += f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('subscribers_count', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        type_stats = stats.get('type_stats', {})
        if type_stats:
            report += f"üìà <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
            for ntype, count in type_stats.items():
                emoji = {
                    'info': '‚ÑπÔ∏è',
                    'warning': '‚ö†Ô∏è',
                    'error': '‚ùå',
                    'success': '‚úÖ',
                    'system': 'üîß'
                }.get(ntype, 'üì±')
                report += f"‚Ä¢ {emoji} {ntype}: {count}\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing alert statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.message(Command("subscribe_alerts"))
async def subscribe_to_alerts(message: Message):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∞–ª–µ—Ä—Ç—ã —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
        await notification_service.subscribe_to_alerts(user_id, AlertLevel.MEDIUM)
        await notification_service.subscribe_to_alerts(user_id, AlertLevel.HIGH)
        
        await message.answer(
            "üìß <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–∞—Ö\n"
            "‚Ä¢ üü† –í—ã—Å–æ–∫–∏—Ö –∞–ª–µ—Ä—Ç–∞—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe_alerts –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error subscribing to alerts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–ª–µ—Ä—Ç—ã")


@router.message(Command("unsubscribe_alerts"))
async def unsubscribe_from_alerts(message: Message):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        user_id = message.from_user.id
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤
        for level in [AlertLevel.LOW, AlertLevel.MEDIUM, AlertLevel.HIGH, AlertLevel.CRITICAL]:
            await notification_service.unsubscribe_from_alerts(user_id, level)
        
        await message.answer(
            "üìß <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe_alerts –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error unsubscribing from alerts: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–ª–µ—Ä—Ç–æ–≤")


@router.message(Command("send_alert"))
async def send_test_alert(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role != 'super_admin':
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç
        alert_id = await notification_service.create_alert(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤",
            level=AlertLevel.MEDIUM,
            category="test"
        )
        
        if alert_id:
            await message.answer(
                f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
                f"ID –∞–ª–µ—Ä—Ç–∞: {alert_id}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: MEDIUM\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: test",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")
        
    except Exception as e:
        logger.error(f"Error sending test alert: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")


def get_notification_router() -> Router:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return router


__all__ = ['router', 'get_notification_router']