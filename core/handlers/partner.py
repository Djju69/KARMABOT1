"""
Partner FSM handlers for adding cards
Behind FEATURE_PARTNER_FSM flag for safe deployment
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import logging

from ..settings import settings
from ..database.db_v2 import db_v2, Card
from ..utils.locales_v2 import translations

logger = logging.getLogger(__name__)

# FSM States for adding cards
class AddCardStates(StatesGroup):
    choose_category = State()
    enter_title = State()
    enter_description = State()
    enter_contact = State()
    enter_address = State()
    upload_photo = State()
    enter_discount = State()
    preview_card = State()
    confirm_submit = State()

# Router for partner handlers
partner_router = Router()

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """Keyboard with cancel option"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )

def get_skip_keyboard() -> ReplyKeyboardMarkup:
    """Keyboard with skip and cancel options"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_categories_keyboard() -> InlineKeyboardMarkup:
    """Inline keyboard with categories"""
    categories = db_v2.get_categories()
    buttons = []
    
    for category in categories:
        buttons.append([InlineKeyboardButton(
            text=f"{category.emoji} {category.name}",
            callback_data=f"partner_cat:{category.slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="partner_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_preview_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for card preview"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="partner_submit")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="partner_edit")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="partner_cancel")]
    ])

def format_card_preview(card_data: dict, category_name: str) -> str:
    """Format card preview text"""
    text = f"üìã **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
    text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if card_data.get('description'):
        text += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {card_data['description']}\n"
    
    if card_data.get('contact'):
        text += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** {card_data['contact']}\n"
    
    if card_data.get('address'):
        text += f"üìç **–ê–¥—Ä–µ—Å:** {card_data['address']}\n"
    
    if card_data.get('discount_text'):
        text += f"üé´ **–°–∫–∏–¥–∫–∞:** {card_data['discount_text']}\n"
    
    if card_data.get('photo_file_id'):
        text += f"üì∏ **–§–æ—Ç–æ:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    
    text += f"\nüí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    
    return text

# Command to start adding card
@partner_router.message(Command("add_card"))
async def start_add_card(message: Message, state: FSMContext):
    """Start adding new card (only if feature enabled)"""
    if not settings.features.partner_fsm:
        await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # Get or create partner
    partner = db_v2.get_or_create_partner(
        message.from_user.id,
        message.from_user.full_name
    )
    
    await state.update_data(partner_id=partner.id)
    await state.set_state(AddCardStates.choose_category)
    
    await message.answer(
        "üè™ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        reply_markup=get_categories_keyboard()
    )

# Category selection
@partner_router.callback_query(F.data.startswith("partner_cat:"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    """Handle category selection"""
    category_slug = callback.data.split(":")[1]
    category = db_v2.get_category_by_slug(category_slug)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.update_data(
        category_id=category.id,
        category_name=category.name
    )
    await state.set_state(AddCardStates.enter_title)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{category.name}**\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–†–µ—Å—Ç–æ—Ä–∞–Ω –£ –ú–æ—Ä—è\")*",
        reply_markup=None
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard()
    )

# Title input
@partner_router.message(AddCardStates.enter_title, F.text)
async def enter_title(message: Message, state: FSMContext):
    """Handle title input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    # Edit mode: allow skipping title change
    data = await state.get_data()
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" and data.get('edit_card_id'):
        # Keep existing title, move next
        await state.set_state(AddCardStates.enter_description)
        await message.answer(
            f"üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–∏–ª–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=get_skip_keyboard()
        )
        return

    title = message.text.strip()
    if len(title) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    if len(title) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=title)
    await state.set_state(AddCardStates.enter_description)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**\n\n"
        f"üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ)*",
        reply_markup=get_skip_keyboard()
    )

# Description input
@partner_router.message(AddCardStates.enter_description, F.text)
async def enter_description(message: Message, state: FSMContext):
    """Handle description input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    
    description = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = message.text.strip()
        if len(description) > 500:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    
    await state.update_data(description=description)
    await state.set_state(AddCardStates.enter_contact)
    
    await message.answer(
        f"üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        f"*(—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, WhatsApp, Instagram)*",
        reply_markup=get_skip_keyboard()
    )

# Contact input
@partner_router.message(AddCardStates.enter_contact, F.text)
async def enter_contact(message: Message, state: FSMContext):
    """Handle contact input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    
    contact = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        contact = message.text.strip()
        if len(contact) > 200:
            await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    
    await state.update_data(contact=contact)
    await state.set_state(AddCardStates.enter_address)
    
    await message.answer(
        f"üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(—É–ª–∏—Ü–∞, —Ä–∞–π–æ–Ω, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã)*",
        reply_markup=get_skip_keyboard()
    )

# Address input
@partner_router.message(AddCardStates.enter_address, F.text)
async def enter_address(message: Message, state: FSMContext):
    """Handle address input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    
    address = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        address = message.text.strip()
        if len(address) > 300:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    
    await state.update_data(address=address)
    await state.set_state(AddCardStates.upload_photo)
    
    await message.answer(
        f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(–∏–Ω—Ç–µ—Ä—å–µ—Ä, –±–ª—é–¥–∞, —Ñ–∞—Å–∞–¥)*",
        reply_markup=get_skip_keyboard()
    )

# Photo upload
@partner_router.message(AddCardStates.upload_photo, F.photo)
async def upload_photo(message: Message, state: FSMContext):
    """Handle photo upload"""
    photo_file_id = message.photo[-1].file_id  # Get largest photo
    
    await state.update_data(photo_file_id=photo_file_id)
    await state.set_state(AddCardStates.enter_discount)
    
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        f"üé´ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ:\n"
        f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"10% –Ω–∞ –≤—Å–µ –º–µ–Ω—é\", \"–°–∫–∏–¥–∫–∞ 15% –ø–æ QR-–∫–æ–¥—É\")*",
        reply_markup=get_skip_keyboard()
    )

@partner_router.message(AddCardStates.upload_photo, F.text)
async def skip_photo(message: Message, state: FSMContext):
    """Handle photo skip"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.set_state(AddCardStates.enter_discount)
        await message.answer(
            f"üé´ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ:\n"
            f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"10% –Ω–∞ –≤—Å–µ –º–µ–Ω—é\", \"–°–∫–∏–¥–∫–∞ 15% –ø–æ QR-–∫–æ–¥—É\")*",
            reply_markup=get_skip_keyboard()
        )
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")

# Discount input
@partner_router.message(AddCardStates.enter_discount, F.text)
async def enter_discount(message: Message, state: FSMContext):
    """Handle discount input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_add_card(message, state)
        return
    
    discount_text = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        discount_text = message.text.strip()
        if len(discount_text) > 100:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    
    await state.update_data(discount_text=discount_text)
    await state.set_state(AddCardStates.preview_card)
    
    # Show preview
    data = await state.get_data()
    preview_text = format_card_preview(data, data.get('category_name', ''))
    
    if data.get('photo_file_id'):
        await message.answer_photo(
            photo=data['photo_file_id'],
            caption=preview_text,
            reply_markup=get_preview_keyboard()
        )
    else:
        await message.answer(
            preview_text,
            reply_markup=get_preview_keyboard()
        )

# Submit card
@partner_router.callback_query(F.data == "partner_submit")
async def submit_card(callback: CallbackQuery, state: FSMContext):
    """Submit card for moderation"""
    data = await state.get_data()
    
    try:
        if data.get('edit_card_id'):
            # Update existing card (partial)
            card_id = int(data['edit_card_id'])
            fields = {
                'category_id': data.get('category_id'),
                'title': data.get('title'),
                'description': data.get('description'),
                'contact': data.get('contact'),
                'address': data.get('address'),
                'photo_file_id': data.get('photo_file_id'),
                'discount_text': data.get('discount_text'),
                'status': 'pending'  # re-moderate after edit
            }
            # Remove None to avoid overwriting with NULL unless explicitly skipped fields kept
            fields = {k: v for k, v in fields.items() if v is not None}
            db_v2.update_card_fields(card_id, **fields)

            await callback.message.edit_text(
                f"‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
                f"üìã ID –∫–∞—Ä—Ç–æ—á–∫–∏: #{card_id}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                reply_markup=None
            )
        else:
            # Create new card
            card = Card(
                id=None,
                partner_id=data['partner_id'],
                category_id=data['category_id'],
                title=data['title'],
                description=data.get('description'),
                contact=data.get('contact'),
                address=data.get('address'),
                photo_file_id=data.get('photo_file_id'),
                discount_text=data.get('discount_text'),
                status='pending'  # Waiting for moderation
            )
            
            card_id = db_v2.create_card(card)
            
            await callback.message.edit_text(
                f"‚úÖ **–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
                f"üìã ID –∫–∞—Ä—Ç–æ—á–∫–∏: #{card_id}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
                f"üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É.",
                reply_markup=None
            )
        
        # Notify admin about new card
        if settings.features.moderation:
            try:
                from aiogram import Bot
                bot = Bot.get_current()
                await bot.send_message(
                    settings.bots.admin_id,
                    f"üÜï **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é**\n\n"
                    f"ID: #{card_id}\n"
                    f"–ü–∞—Ä—Ç–Ω–µ—Ä: {callback.from_user.full_name}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name')}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /moderate –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin: {e}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Failed to create card: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Cancel adding card
@partner_router.callback_query(F.data == "partner_cancel")
async def cancel_add_card_callback(callback: CallbackQuery, state: FSMContext):
    """Cancel adding card via callback"""
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await state.clear()

async def cancel_add_card(message: Message, state: FSMContext):
    """Cancel adding card via message"""
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# Handle text messages in FSM states
@partner_router.message(AddCardStates.choose_category)
async def invalid_category_input(message: Message):
    """Handle invalid input in category selection"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")

# Register router only if feature is enabled
def get_partner_router() -> Router:
    """Get partner router if feature is enabled"""
    if settings.features.partner_fsm:
        return partner_router
    return Router()  # Empty router if disabled
