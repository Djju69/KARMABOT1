"""
Partner FSM handlers for adding cards
Behind FEATURE_PARTNER_FSM flag for safe deployment
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import logging
import re

from ..settings import settings
from ..services.profile import profile_service
from ..keyboards.reply_v2 import (
    get_profile_keyboard,
)
from ..keyboards.inline_v2 import get_cities_inline
from ..database.db_v2 import db_v2, Card
from ..utils.locales_v2 import translations

logger = logging.getLogger(__name__)

def _is_valid_gmaps(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ Google Maps."""
    if not url:
        return False
    url = url.strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        return False
    return any(h in url for h in ("google.com/maps", "goo.gl/maps", "maps.app.goo.gl", "g.page"))

# FSM States for adding cards
class AddCardStates(StatesGroup):
    choose_city = State()
    choose_category = State()
    enter_title = State()
    enter_description = State()
    enter_contact = State()
    enter_address = State()
    enter_gmaps = State()
    upload_photo = State()
    enter_discount = State()
    preview_card = State()
    confirm_submit = State()

# Router for partner handlers
partner_router = Router()

def get_inline_skip_keyboard() -> InlineKeyboardMarkup:
    """Inline keyboard with a single Skip button."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="partner_skip")]
    ])

def _valid_len(text: str, min_len: int = 0, max_len: int | None = None) -> bool:
    """Simple length validator helper."""
    if text is None:
        return False if min_len > 0 else True
    s = text.strip()
    if len(s) < min_len:
        return False
    if max_len is not None and len(s) > max_len:
        return False
    return True

def _validate_title(text: str) -> tuple[bool, str | None]:
    """Validate title: required, 3..100 symbols."""
    if not _valid_len(text, 3, 100):
        if not text or len(text.strip()) < 3:
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
    return True, None

def _validate_optional_max_len(text: str | None, max_len: int, too_long_msg: str) -> tuple[bool, str | None]:
    """Validate optional text: allow empty/None, enforce max length otherwise."""
    if text is None:
        return True, None
    if not _valid_len(text, 0, max_len):
        return False, too_long_msg
    return True, None

def _is_cancel_text(txt: str | None) -> bool:
    return txt in ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚õî –û—Ç–º–µ–Ω–∏—Ç—å")

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """Keyboard with cancel option"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )

# Callback from inline choice menu: start partner card flow
@partner_router.callback_query(F.data == "act:add_partner_card")
async def on_add_partner_card_cb(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–∞–ª–ª–±—ç–∫—É –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞."""
    try:
        await callback.answer()
    except Exception:
        pass
    # Reuse the same flow as /add_card but via callback
    await start_add_card(callback.message, state)

# Alias: start adding card via /add_partner command
@partner_router.message(Command("add_partner"))
async def start_add_partner(message: Message, state: FSMContext):
    """Alias for /add_partner to start the same add-card flow."""
    await start_add_card(message, state)

def get_skip_keyboard() -> ReplyKeyboardMarkup:
    """Keyboard with skip and cancel options"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_categories_keyboard() -> InlineKeyboardMarkup:
    """Inline keyboard with categories"""
    categories = db_v2.get_categories()
    buttons = []
    
    for category in categories:
        buttons.append([InlineKeyboardButton(
            text=f"{category.emoji} {category.name}",
            callback_data=f"partner_cat:{category.slug}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="partner_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_preview_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for card preview"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="partner_submit")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="partner_edit")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="partner_cancel")]
    ])

def get_partner_cards_inline(page: int = 0, has_prev: bool = False, has_next: bool = False) -> InlineKeyboardMarkup:
    """Inline keyboard: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫."""
    nav_row: list[InlineKeyboardButton] = []
    if has_prev:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pc:page:{max(page-1,0)}"))
    nav_row.append(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"pc:page:{page}"))
    if has_next:
        nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"pc:page:{page+1}"))
    return InlineKeyboardMarkup(inline_keyboard=[nav_row])

def _build_cards_list_text(cards: list[dict], page: int, page_size: int, total: int) -> str:
    start = page * page_size
    end = start + len(cards)
    header = f"üìÇ –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {start+1}‚Äì{end} –∏–∑ {total}:\n"
    lines = [header]
    for c in cards:
        title = (c.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')
        status = (c.get('status') or 'pending')
        cid = int(c.get('id'))
        lines.append(f"{_status_emoji(status)} {title} ‚Äî {status}  (#${cid})")
    lines.append("\nüëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
    return "\n".join(lines)

def _build_cards_list_buttons(cards: list[dict], page: int) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for c in cards:
        title = (c.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')
        cid = int(c.get('id'))
        rows.append([InlineKeyboardButton(text=f"üîé {title[:40]}", callback_data=f"pc:view:{cid}:{page}")])
    if not rows:
        rows = [[]]
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"pc:page:{page}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def _render_cards_page(message_or_cbmsg, user_id: int, full_name: str, page: int, *, edit: bool = False):
    """–û–±—â–∏–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞.
    message_or_cbmsg: –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ answer()/edit_text().
    edit=True –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ.
    """
    PAGE_SIZE = 5
    partner = db_v2.get_or_create_partner(user_id, full_name)
    logger.info("partner.render_cards_page: user=%s partner_id=%s page=%s", user_id, partner.id, page)
    with db_v2.get_connection() as conn:
        total = int(conn.execute("SELECT COUNT(*) FROM cards_v2 WHERE partner_id = ?", (partner.id,)).fetchone()[0])
        offset = max(page, 0) * PAGE_SIZE
        cur = conn.execute(
            """
            SELECT c.*, cat.name as category_name
            FROM cards_v2 c
            JOIN categories_v2 cat ON c.category_id = cat.id
            WHERE c.partner_id = ?
            ORDER BY c.updated_at DESC
            LIMIT ? OFFSET ?
            """,
            (partner.id, PAGE_SIZE, offset),
        )
        cards = [dict(r) for r in cur.fetchall()]
    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total
    if not cards:
        # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if edit:
            await message_or_cbmsg.edit_text(
                "üì≠ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç.",
                reply_markup=get_partner_cards_inline(page=page, has_prev=has_prev, has_next=has_next),
            )
        else:
            await message_or_cbmsg.answer(
                "üì≠ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç.",
                reply_markup=get_partner_cards_inline(page=page, has_prev=has_prev, has_next=has_next),
            )
        return
    text = _build_cards_list_text(cards, page=page, page_size=PAGE_SIZE, total=total)
    try:
        if edit:
            await message_or_cbmsg.edit_text(text, reply_markup=_build_cards_list_buttons(cards, page=page))
        else:
            await message_or_cbmsg.answer(text, reply_markup=_build_cards_list_buttons(cards, page=page))
    except Exception:
        # –§–æ–ª–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message_or_cbmsg.answer(text, reply_markup=_build_cards_list_buttons(cards, page=page))
    await message_or_cbmsg.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=get_partner_cards_inline(page=page, has_prev=has_prev, has_next=has_next))

def _status_emoji(status: str) -> str:
    s = (status or "").lower()
    if s == "pending":
        return "‚è≥"
    if s == "published":
        return "‚úÖ"
    if s == "rejected":
        return "‚ùå"
    if s == "draft":
        return "üìù"
    return "‚Ä¢"

def format_card_preview(card_data: dict, category_name: str) -> str:
    """Format card preview text"""
    text = f"üìã **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏**\n\n"
    text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if card_data.get('description'):
        text += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {card_data['description']}\n"
    
    if card_data.get('contact'):
        text += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** {card_data['contact']}\n"
    
    if card_data.get('address'):
        text += f"üìç **–ê–¥—Ä–µ—Å:** {card_data['address']}\n"
    
    if card_data.get('discount_text'):
        text += f"üé´ **–°–∫–∏–¥–∫–∞:** {card_data['discount_text']}\n"
    
    if card_data.get('photo_file_id'):
        text += f"üì∏ **–§–æ—Ç–æ:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    
    text += f"\nüí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    
    return text

# Command to start adding card
@partner_router.message(Command("add_card"))
async def start_add_card(message: Message, state: FSMContext):
    """Start adding new card (only if feature enabled)"""
    if not settings.features.partner_fsm:
        await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # Get or create partner
    partner = db_v2.get_or_create_partner(
        message.from_user.id,
        message.from_user.full_name
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º partner_id –∏ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ù—è—á–∞–Ω–≥ = 1)
    await state.update_data(partner_id=partner.id, city_id=1)
    await state.set_state(AddCardStates.choose_city)
    await message.answer(
        "üè™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù—è—á–∞–Ω–≥):",
        reply_markup=get_cities_inline(active_id=1, cb_prefix="pfsm:city")
    )

# ===== Reply-button entry points (no new slash commands) =====
@partner_router.message(F.text.startswith("‚ûï"))
async def start_add_card_via_button(message: Message, state: FSMContext):
    """Start add-card flow from reply keyboard button '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'."""
    if not settings.features.partner_fsm:
        await message.answer("üöß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    # Reuse the same flow as /add_card
    await start_add_card(message, state)

# ====== City selection ======
@partner_router.callback_query(F.data.startswith("pfsm:city:"))
async def on_city_selected(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    data = callback.data.split(":")
    # expected: pfsm:city:<id>
    city_id = int(data[-1]) if data and data[-1].isdigit() else 1
    await state.update_data(city_id=city_id)
    await state.set_state(AddCardStates.choose_category)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        reply_markup=get_categories_keyboard()
    )


@partner_router.message(F.text.startswith("üìÇ"))
async def show_my_cards(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∫–Ω–æ–ø–∫–∞ 'üìÇ –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏')."""
    PAGE_SIZE = 5
    try:
        # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç –≤–æ–æ–±—â–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        with db_v2.get_connection() as conn:
            total = int(conn.execute("SELECT COUNT(*) FROM cards_v2 WHERE partner_id = ?", (db_v2.get_or_create_partner(message.from_user.id, message.from_user.full_name).id,)).fetchone()[0])
        if total == 0:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é.",
                reply_markup=get_partner_cards_inline(page=0, has_prev=False, has_next=False),
            )
            return
        await _render_cards_page(message, message.from_user.id, message.from_user.full_name, page=0, edit=False)
    except Exception as e:
        logger.exception("partner.show_my_cards failed: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@partner_router.callback_query(F.data.startswith("pc:page:"))
async def partner_cards_page(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: pc:page:<page>."""
    try:
        await callback.answer()
    except Exception:
        pass
    try:
        page = int(callback.data.split(":")[2])
        await _render_cards_page(callback.message, callback.from_user.id, callback.from_user.full_name, page=page, edit=True)
    except Exception as e:
        logger.exception("partner.cards_page failed: %s", e)
        try:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@partner_router.callback_query(F.data.startswith("pc:view:"))
async def partner_card_view(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: pc:view:<id>:<page>."""
    try:
        await callback.answer()
    except Exception:
        pass
    try:
        _, _, id_str, page_str = callback.data.split(":", 3)
        card_id = int(id_str)
        page = int(page_str)
        card = db_v2.get_card_by_id(card_id)
        if not card:
            await callback.message.edit_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        title = card.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'
        status = card.get('status') or 'pending'
        cat = card.get('category_name') or ''
        discount = card.get('discount_text') or '‚Äî'
        address = card.get('address') or '‚Äî'
        contact = card.get('contact') or '‚Äî'
        text = (
            f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ #{card_id}\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
            f"‚è± –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üé´ –°–∫–∏–¥–∫–∞: {discount}\n"
            f"üìç –ê–¥—Ä–µ—Å: {address}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
        )
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        act_rows: list[list[InlineKeyboardButton]] = []
        # toggle visibility allowed for approved/published/archived
        if status in ("published", "approved", "archived"):
            toggle_label = "üëÅÔ∏è –°–∫—Ä—ã—Ç—å" if status == "published" else "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å"
            act_rows.append([InlineKeyboardButton(text=toggle_label, callback_data=f"pc:toggle:{card_id}:{page}")])
        # delete
        act_rows.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"pc:del:{card_id}:{page}")])
        # back
        act_rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"pc:page:{page}")])
        kb = InlineKeyboardMarkup(inline_keyboard=act_rows)
        await callback.message.edit_text(text, reply_markup=kb)
        logger.info("partner.card_view: user=%s card_id=%s page=%s", callback.from_user.id, card_id, page)
    except Exception as e:
        logger.exception("partner.card_view failed: %s", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")

@partner_router.callback_query(F.data.startswith("pc:toggle:"))
async def partner_card_toggle(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: published <-> archived."""
    try:
        await callback.answer()
    except Exception:
        pass
    try:
        _, _, id_str, page_str = callback.data.split(":", 3)
        card_id = int(id_str)
        page = int(page_str)
        card = db_v2.get_card_by_id(card_id)
        if not card:
            await callback.message.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        cur = (card.get('status') or 'pending').lower()
        new_status = None
        if cur == 'published':
            new_status = 'archived'
        elif cur in ('approved', 'archived'):
            new_status = 'published'
        else:
            await callback.message.answer("‚ö†Ô∏è –≠—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç).")
            return
        ok = db_v2.update_card_status(card_id, new_status)
        logger.info("partner.card_toggle: user=%s card_id=%s %s->%s ok=%s", callback.from_user.id, card_id, cur, new_status, ok)
        await _render_cards_page(callback.message, callback.from_user.id, callback.from_user.full_name, page=page, edit=True)
    except Exception as e:
        logger.exception("partner.card_toggle failed: %s", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

@partner_router.callback_query(F.data.startswith("pc:del:"))
async def partner_card_delete_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: pc:del:<id>:<page>."""
    try:
        await callback.answer()
    except Exception:
        pass
    try:
        _, _, id_str, page_str = callback.data.split(":", 3)
        card_id = int(id_str)
        page = int(page_str)
        text = (
            f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É #{card_id}?\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"pc:del:confirm:{card_id}:{page}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"pc:view:{card_id}:{page}")],
        ])
        await callback.message.edit_text(text, reply_markup=kb)
        logger.info("partner.card_delete_confirm: user=%s card_id=%s page=%s", callback.from_user.id, card_id, page)
    except Exception as e:
        logger.exception("partner.card_delete_confirm failed: %s", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è.")

@partner_router.callback_query(F.data.startswith("pc:del:confirm:"))
async def partner_card_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    try:
        await callback.answer()
    except Exception:
        pass
    try:
        parts = callback.data.split(":")
        card_id = int(parts[3])
        page = int(parts[4])
        ok = db_v2.delete_card(card_id)
        logger.info("partner.card_delete: user=%s card_id=%s ok=%s", callback.from_user.id, card_id, ok)
        await _render_cards_page(callback.message, callback.from_user.id, callback.from_user.full_name, page=page, edit=True)
    except Exception as e:
        logger.exception("partner.card_delete failed: %s", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")

# Category selection
@partner_router.callback_query(F.data.startswith("partner_cat:"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    """Handle category selection"""
    # Acknowledge callback to stop Telegram's loading state
    try:
        await callback.answer()
    except Exception:
        pass
    category_slug = callback.data.split(":")[1]
    category = db_v2.get_category_by_slug(category_slug)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.update_data(
        category_id=category.id,
        category_name=category.name
    )
    await state.set_state(AddCardStates.enter_title)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{category.name}**\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–†–µ—Å—Ç–æ—Ä–∞–Ω –£ –ú–æ—Ä—è\")*",
        reply_markup=None
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard()
    )

# Title input
@partner_router.message(AddCardStates.enter_title, F.text)
async def enter_title(message: Message, state: FSMContext):
    """Handle title input"""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    
    title = message.text.strip()
    ok, err = _validate_title(title)
    if not ok:
        await message.answer(err)
        return
    
    await state.update_data(title=title)
    await state.set_state(AddCardStates.enter_description)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç + reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π
    data = await state.get_data()
    cur_descr = data.get('description')
    base_descr_prompt = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**\n\n"
        f"üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ)*"
    )
    if cur_descr:
        base_descr_prompt += f"\n\n–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {cur_descr}"
    await message.answer(base_descr_prompt, reply_markup=get_cancel_keyboard())
    # Inline-–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=get_inline_skip_keyboard())

# Description input
@partner_router.message(AddCardStates.enter_description, F.text)
async def enter_description(message: Message, state: FSMContext):
    """Handle description input"""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    
    description = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = message.text.strip()
        ok, err = _validate_optional_max_len(description, 500, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        if not ok:
            await message.answer(err)
            return
    
    await state.update_data(description=description)
    await state.set_state(AddCardStates.enter_contact)
    
    data = await state.get_data()
    cur_contact = data.get('contact')
    contact_prompt = (
        f"üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä–∞:\n"
        f"–ü—Ä–∏–º–µ—Ä: +84 90 123 45 67"
    )
    if cur_contact:
        contact_prompt += f"\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {cur_contact}"
    await message.answer(contact_prompt, reply_markup=get_cancel_keyboard())

# Contact input
@partner_router.message(AddCardStates.enter_contact, F.text)
async def enter_contact(message: Message, state: FSMContext):
    """Handle contact input (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω)."""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    phone = (message.text or "").strip()
    # –ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ü–∏—Ñ—Ä—ã, +, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Å–∫–æ–±–∫–∏, –æ—Ç 7 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∑–Ω–∞—á–∞—â–∏—Ö
    digits = re.sub(r"[^0-9]", "", phone)
    if len(digits) < 7:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–º–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä). –ü—Ä–∏–º–µ—Ä: +84 90 123 45 67")
        return
    ok, err = _validate_optional_max_len(phone, 200, "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
    if not ok:
        await message.answer(err)
        return
    await state.update_data(contact=phone)
    await state.set_state(AddCardStates.enter_address)
    cur_addr = (await state.get_data()).get('address')
    addr_prompt = "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, —Ä–∞–π–æ–Ω, –Ω–æ–º–µ—Ä –¥–æ–º–∞):"
    if cur_addr:
        addr_prompt += f"\n\n–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {cur_addr}"
    await message.answer(addr_prompt, reply_markup=get_cancel_keyboard())

# Address input
@partner_router.message(AddCardStates.enter_address, F.text)
async def enter_address(message: Message, state: FSMContext):
    """Handle address input (—Ç—Ä–µ–±—É–µ—Ç—Å—è)."""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    address = (message.text or "").strip()
    if len(address) < 5:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞.")
        return
    ok, err = _validate_optional_max_len(address, 300, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.")
    if not ok:
        await message.answer(err)
        return
    await state.update_data(address=address)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ Google Maps
    await state.set_state(AddCardStates.enter_gmaps)
    await message.answer(
        "üó∫Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Google Maps (–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è):",
        reply_markup=get_cancel_keyboard()
    )

# Google Maps link input
@partner_router.message(AddCardStates.enter_gmaps, F.text)
async def enter_gmaps(message: Message, state: FSMContext):
    """Handle Google Maps link input (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)."""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    url = (message.text or "").strip()
    if not _is_valid_gmaps(url):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É Google Maps.")
        return
    ok, err = _validate_optional_max_len(url, 200, "‚ùå –°—Å—ã–ª–∫–∞ Google Maps —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
    if not ok:
        await message.answer(err)
        return
    await state.update_data(google_maps_url=url)
    await state.set_state(AddCardStates.upload_photo)
    await message.answer(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        "*(–∏–Ω—Ç–µ—Ä—å–µ—Ä, –±–ª—é–¥–∞, —Ñ–∞—Å–∞–¥)*",
        reply_markup=get_cancel_keyboard()
    )
    await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=get_inline_skip_keyboard())

# Photo upload
@partner_router.message(AddCardStates.upload_photo, F.photo)
async def upload_photo(message: Message, state: FSMContext):
    """Handle photo upload"""
    photo_file_id = message.photo[-1].file_id  # Get largest photo
    
    await state.update_data(photo_file_id=photo_file_id)
    await state.set_state(AddCardStates.enter_discount)
    
    data = await state.get_data()
    cur_discount = data.get('discount_text')
    discount_prompt = (
        f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        f"üé´ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ:\n"
        f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"10% –Ω–∞ –≤—Å–µ –º–µ–Ω—é\", \"–°–∫–∏–¥–∫–∞ 15% –ø–æ QR-–∫–æ–¥—É\")*"
    )
    if cur_discount:
        discount_prompt += f"\n\n–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {cur_discount}"
    await message.answer(discount_prompt, reply_markup=get_cancel_keyboard())
    await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É:", reply_markup=get_inline_skip_keyboard())

@partner_router.message(AddCardStates.upload_photo, F.text)
async def skip_photo(message: Message, state: FSMContext):
    """Handle photo skip"""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # Clear photo when skipping via text
        await state.update_data(photo_file_id=None)
        await state.set_state(AddCardStates.enter_discount)
        await message.answer(
            f"üé´ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ:\n"
            f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"10% –Ω–∞ –≤—Å–µ –º–µ–Ω—é\", \"–°–∫–∏–¥–∫–∞ 15% –ø–æ QR-–∫–æ–¥—É\")*",
            reply_markup=get_cancel_keyboard()
        )
        await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É:", reply_markup=get_inline_skip_keyboard())
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")

# Discount input
@partner_router.message(AddCardStates.enter_discount, F.text)
async def enter_discount(message: Message, state: FSMContext):
    """Handle discount input"""
    if _is_cancel_text(message.text):
        await cancel_add_card(message, state)
        return
    
    discount_text = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        discount_text = message.text.strip()
        ok, err = _validate_optional_max_len(discount_text, 100, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        if not ok:
            await message.answer(err)
            return
    
    await state.update_data(discount_text=discount_text)
    await state.set_state(AddCardStates.preview_card)
    
    # Show preview
    data = await state.get_data()
    preview_text = format_card_preview(data, data.get('category_name', ''))
    
    if data.get('photo_file_id'):
        await message.answer_photo(
            photo=data['photo_file_id'],
            caption=preview_text,
            reply_markup=get_preview_keyboard()
        )
    else:
        await message.answer(
            preview_text,
            reply_markup=get_preview_keyboard()
        )

# ===== Inline Skip callback handlers for optional steps =====
@partner_router.callback_query(AddCardStates.enter_description, F.data == "partner_skip")
async def skip_description_cb(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    # –û—á–∏—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
    await state.update_data(description=None)
    await state.set_state(AddCardStates.enter_contact)
    await callback.message.answer(
        f"üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        f"*(—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, WhatsApp, Instagram)*",
        reply_markup=get_cancel_keyboard()
    )
    await callback.message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=get_inline_skip_keyboard())

@partner_router.callback_query(AddCardStates.enter_contact, F.data == "partner_skip")
async def skip_contact_cb(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
    await state.update_data(contact=None)
    await state.set_state(AddCardStates.enter_address)
    await callback.message.answer(
        f"üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(—É–ª–∏—Ü–∞, —Ä–∞–π–æ–Ω, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã)*",
        reply_markup=get_cancel_keyboard()
    )
    await callback.message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å:", reply_markup=get_inline_skip_keyboard())

@partner_router.callback_query(AddCardStates.enter_address, F.data == "partner_skip")
async def skip_address_cb(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    # –û—á–∏—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
    await state.update_data(address=None)
    await state.set_state(AddCardStates.upload_photo)
    await callback.message.answer(
        f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n"
        f"*(–∏–Ω—Ç–µ—Ä—å–µ—Ä, –±–ª—é–¥–∞, —Ñ–∞—Å–∞–¥)*",
        reply_markup=get_cancel_keyboard()
    )
    await callback.message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=get_inline_skip_keyboard())

@partner_router.callback_query(AddCardStates.upload_photo, F.data == "partner_skip")
async def skip_photo_cb(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
    await state.update_data(photo_file_id=None)
    await state.set_state(AddCardStates.enter_discount)
    await callback.message.answer(
        f"üé´ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ:\n"
        f"*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"10% –Ω–∞ –≤—Å–µ –º–µ–Ω—é\", \"–°–∫–∏–¥–∫–∞ 15% –ø–æ QR-–∫–æ–¥—É\")*",
        reply_markup=get_cancel_keyboard()
    )
    await callback.message.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É:", reply_markup=get_inline_skip_keyboard())

@partner_router.callback_query(AddCardStates.enter_discount, F.data == "partner_skip")
async def skip_discount_cb(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except Exception:
        pass
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
    await state.update_data(discount_text=None)
    await state.set_state(AddCardStates.preview_card)
    data = await state.get_data()
    preview_text = format_card_preview(data, data.get('category_name', ''))
    await callback.message.answer(preview_text, reply_markup=get_preview_keyboard())

# Submit card
@partner_router.callback_query(F.data == "partner_submit")
async def submit_card(callback: CallbackQuery, state: FSMContext):
    """Submit card for moderation"""
    # Acknowledge callback to prevent UI lag
    try:
        await callback.answer()
    except Exception:
        pass
    data = await state.get_data()
    
    try:
        # Create card
        card = Card(
            id=None,
            partner_id=data['partner_id'],
            category_id=data['category_id'],
            title=data['title'],
            description=data.get('description'),
            contact=data.get('contact'),
            address=data.get('address'),
            google_maps_url=data.get('google_maps_url'),
            photo_file_id=data.get('photo_file_id'),
            discount_text=data.get('discount_text'),
            status='pending',  # Waiting for moderation
            # Optional taxonomy/geo
            subcategory_id=data.get('subcategory_id'),
            city_id=data.get('city_id'),
            area_id=data.get('area_id'),
        )
        
        card_id = db_v2.create_card(card)
        
        title = (data.get('title') or '').strip() or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'
        await callback.message.edit_text(
            f"‚úÖ **–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
            f"üìã ID: #{card_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
            f"üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É.",
            reply_markup=None
        )
        
        # Notify admin about new card
        if settings.features.moderation:
            try:
                from aiogram import Bot
                bot = Bot.get_current()
                await bot.send_message(
                    settings.bots.admin_id,
                    f"üÜï **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é**\n\n"
                    f"ID: #{card_id}\n"
                    f"–ü–∞—Ä—Ç–Ω–µ—Ä: {callback.from_user.full_name}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name')}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /moderate –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin: {e}")
        
        await state.clear()

        # After successful submission, restore partner cabinet reply keyboard so UI doesn't disappear.
        try:
            lang = await profile_service.get_lang(callback.from_user.id)
            # –õ–ö –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ‚Äî –±–µ–∑ QR WebApp –∫–Ω–æ–ø–∫–∏
            kb = get_profile_keyboard(lang)
            await callback.message.answer(
                "üè™ –í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞",
                reply_markup=kb,
            )
        except Exception as e:
            logger.error(f"Failed to restore partner cabinet keyboard: {e}")
        
    except Exception as e:
        logger.error(f"Failed to create card: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Edit card (restart input from title keeping current data)
@partner_router.callback_query(F.data == "partner_edit")
async def edit_card(callback: CallbackQuery, state: FSMContext):
    """Restart editing from title using current state data (non-breaking MVP)."""
    # Acknowledge callback to prevent spinner
    try:
        await callback.answer()
    except Exception:
        pass
    data = await state.get_data()
    # Ensure we have at least a category selected
    if not data.get('category_id'):
        await callback.message.edit_text(
            "‚ùå –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /add_card –∏–ª–∏ /add_partner",
            reply_markup=None,
        )
        await state.clear()
        return
    # Move to title entry state; keep existing fields in state for convenience
    await state.set_state(AddCardStates.enter_title)
    # Show current snapshot to guide the user
    cat_name = data.get('category_name', '')
    preview_text = format_card_preview(data, cat_name)
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n{preview_text}\n\nüìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data.get('title','(–Ω–µ –∑–∞–¥–∞–Ω–æ)')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –µ—â—ë —Ä–∞–∑):",
            reply_markup=None,
        )
    except Exception:
        # Fallback if editing message fails (e.g., was a photo preview)
        await callback.message.answer(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n{preview_text}\n\nüìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data.get('title','(–Ω–µ –∑–∞–¥–∞–Ω–æ)')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –µ—â—ë —Ä–∞–∑):",
        )
    # Provide cancel keyboard
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard(),
    )

# Cancel adding card
@partner_router.callback_query(F.data == "partner_cancel")
async def cancel_add_card_callback(callback: CallbackQuery, state: FSMContext):
    """Cancel adding card via callback"""
    # Acknowledge callback to prevent spinner
    try:
        await callback.answer()
    except Exception:
        pass
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await state.clear()

# --- Entry points to open Partner Cabinet ---
@partner_router.message(Command("partner"))
async def open_partner_cabinet_cmd(message: Message):
    """Open partner cabinet via /partner command."""
    try:
        # Ensure partner exists
        db_v2.get_or_create_partner(message.from_user.id, message.from_user.full_name)
        # Load language and show partner cabinet keyboard
        lang = await profile_service.get_lang(message.from_user.id)
        kb = get_profile_keyboard(lang)
        await message.answer("üè™ –í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", reply_markup=kb)
    except Exception as e:
        logger.error(f"Failed to open partner cabinet: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@partner_router.message(F.text.startswith("üßë‚Äçüíº"))
async def open_partner_cabinet_button(message: Message, state: FSMContext):
    """Become partner button ‚Üí immediately start add-card wizard (creates partner if missing)."""
    try:
        logger.info(
            "partner.open_button: user_id=%s text=%s partner_fsm=%s",
            message.from_user.id,
            (message.text or "")[:64],
            getattr(settings.features, 'partner_fsm', None),
        )
        # ensure partner exists
        partner = db_v2.get_or_create_partner(message.from_user.id, message.from_user.full_name)
        await state.update_data(partner_id=partner.id)
        # start add card flow right away
        await start_add_card(message, state)
        logger.info("partner.open_button: started add_card flow user_id=%s", message.from_user.id)
    except Exception as e:
        logger.error(f"Failed to start add-card flow via button: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cancel_add_card(message: Message, state: FSMContext):
    """Cancel adding card via message"""
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# Global cancel handler (non-breaking): reacts to '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' only if user is inside AddCardStates
@partner_router.message(F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚õî –û—Ç–º–µ–Ω–∏—Ç—å"]))
async def cancel_anywhere(message: Message, state: FSMContext):
    """Allow user to cancel from any AddCardStates step using the same button."""
    cur = await state.get_state()
    # Act only if FSM is currently within AddCardStates to avoid breaking other flows
    if cur and cur.startswith(AddCardStates.__name__ + ":"):
        await cancel_add_card(message, state)

# Handle text messages in FSM states
@partner_router.message(AddCardStates.choose_category)
async def invalid_category_input(message: Message):
    """Handle invalid input in category selection"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")

# Register router only if feature is enabled
def get_partner_router() -> Router:
    """Get partner router if feature is enabled"""
    if settings.features.partner_fsm:
        return partner_router
    return Router()  # Empty router if disabled
