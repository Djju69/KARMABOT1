"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from typing import List, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from core.services.tariff_service import tariff_service
from core.models.tariff_models import TariffType
from core.security.roles import get_user_role
from core.database.db_adapter import db_v2
from core.utils.locales_v2 import get_text

logger = logging.getLogger(__name__)
router = Router(name="tariffs_user_router")

@router.message(Command("tariffs"))
async def handle_tariffs_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /tariffs - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = tariff_service.get_all_tariffs()
        
        if not tariffs:
            await message.answer(get_text('tariffs.no_tariffs', lang))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = await get_user_role(user_id)
        is_partner = hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        current_tariff = None
        if is_partner:
            try:
                current_tariff = tariff_service.get_partner_current_tariff(user_id)
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = get_text("tariffs.title", lang) + "\n\n"
        
        if is_partner:
            text += get_text("tariffs.for_partners", lang) + "\n\n"
        else:
            text += get_text("tariffs.for_users", lang) + "\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        for tariff in tariffs:
            text += f"üìã <b>{tariff.name}</b>\n"
            
            # –¶–µ–Ω–∞
            if tariff.price_vnd > 0:
                text += f"üíµ {get_text('tariffs.price', lang)}: {tariff.price_vnd:,} VND/{get_text('tariffs.month', lang)}\n"
            else:
                text += f"üíµ {get_text('tariffs.price', lang)}: {get_text('tariffs.free', lang)}\n"
            
            # –õ–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if tariff.features.max_transactions_per_month == -1:
                text += f"üìä {get_text('tariffs.transactions_limit', lang)}: {get_text('tariffs.unlimited', lang)}\n"
            else:
                text += f"üìä {get_text('tariffs.transactions_limit', lang)}: {tariff.features.max_transactions_per_month} {get_text('tariffs.per_month', lang)}\n"
            
            # –ö–æ–º–∏—Å—Å–∏—è
            text += f"üí∏ {get_text('tariffs.commission', lang)}: {tariff.features.commission_rate * 100:.1f}%\n"
            
            # –§—É–Ω–∫—Ü–∏–∏
            features = []
            if tariff.features.analytics_enabled:
                features.append(get_text('tariffs.analytics', lang))
            if tariff.features.priority_support:
                features.append(get_text('tariffs.priority_support', lang))
            if tariff.features.api_access:
                features.append(get_text('tariffs.api_access', lang))
            if tariff.features.custom_integrations:
                features.append(get_text('tariffs.custom_integrations', lang))
            if tariff.features.dedicated_manager:
                features.append(get_text('tariffs.dedicated_manager', lang))
            
            if features:
                text += f"‚ú® {get_text('tariffs.description', lang)}: {', '.join(features)}\n"
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
            if current_tariff and current_tariff.tariff_type == tariff.tariff_type:
                text += f"‚úÖ <b>{get_text('tariffs.current_tariff', lang)}</b>\n"
            
            text += f"üìù {tariff.description}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not is_partner:
            text += f"ü§ù <b>{get_text('tariffs.become_partner', lang)}</b>\n"
            text += f"{get_text('tariffs.become_partner_text', lang)}\n\n"
            text += f"üìù {get_text('tariffs.apply_instruction', lang)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        if is_partner:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            
            for tariff in tariffs:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                price_text = f"{tariff.price_vnd:,} VND/{get_text('tariffs.month', lang)}" if tariff.price_vnd > 0 else get_text('tariffs.free', lang)
                button_text = f"{tariff.name} - {price_text}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                if current_tariff and current_tariff.tariff_type == tariff.tariff_type:
                    button_text += f" ‚úÖ"
                
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"tariff_info:{tariff.tariff_type.value}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=get_text('tariffs.help_button', lang), callback_data="tariff_help")
            ])
            
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in tariffs command: {e}")
        await message.answer(get_text('tariffs.error_no_id', lang))

@router.callback_query(F.data.startswith("tariff_info:"))
async def handle_tariff_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)"""
    try:
        user_id = callback.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä
        if not (hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ–∞–º–∏")
            return
        
        tariff_type_str = callback.data.split(":")[1]
        tariff_type = TariffType(tariff_type_str)
        
        tariff = tariff_service.get_tariff_by_type(tariff_type)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_tariff = None
        try:
            current_tariff = await tariff_service.get_partner_current_tariff(user_id)
        except:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = f"üí∞ <b>{tariff.name}</b>\n\n"
        
        # –¶–µ–Ω–∞
        if tariff.price_vnd > 0:
            text += f"üíµ <b>–¶–µ–Ω–∞:</b> {tariff.price_vnd:,} VND/–º–µ—Å—è—Ü\n"
        else:
            text += f"üíµ <b>–¶–µ–Ω–∞:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        
        # –õ–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if tariff.features.max_transactions_per_month == -1:
            text += f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> –ë–µ–∑–ª–∏–º–∏—Ç\n"
        else:
            text += f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {tariff.features.max_transactions_per_month} –≤ –º–µ—Å—è—Ü\n"
        
        # –ö–æ–º–∏—Å—Å–∏—è
        text += f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {tariff.features.commission_rate * 100:.1f}%\n\n"
        
        # –§—É–Ω–∫—Ü–∏–∏
        text += f"üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if tariff.features.analytics_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if tariff.features.priority_support else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"üîå <b>API –¥–æ—Å—Ç—É–ø:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω' if tariff.features.api_access else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
        text += f"üõ†Ô∏è <b>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if tariff.features.custom_integrations else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"üë®‚Äçüíº <b>–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω' if tariff.features.dedicated_manager else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff.description}\n\n"
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        if current_tariff and current_tariff.tariff_type == tariff.tariff_type:
            text += "‚úÖ <b>–≠—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ</b>\n"
        elif current_tariff:
            text += f"‚ÑπÔ∏è <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {current_tariff.name}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
        keyboard_buttons = []
        
        if current_tariff and current_tariff.tariff_type == tariff.tariff_type:
            # –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚ÑπÔ∏è –≠—Ç–æ –≤–∞—à —Ç–∞—Ä–∏—Ñ", callback_data="no_action")
            ])
        else:
            # –î—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
            keyboard_buttons.append([
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data=f"tariff_apply:{tariff_type.value}")
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_tariffs"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="tariff_help")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing tariff info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∞—Ä–∏—Ñ–∞")

@router.callback_query(F.data.startswith("tariff_apply:"))
async def handle_tariff_apply(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ (–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ) - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä
        if not (hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
            return
        
        tariff_type_str = callback.data.split(":")[1]
        tariff_type = TariffType(tariff_type_str)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        tariff = tariff_service.get_tariff_by_type(tariff_type)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞
        text = f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
        text += f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–∞—Ä–∏—Ñ <b>{tariff.name}</b>?\n\n"
        
        if tariff.price_vnd > 0:
            text += f"üíµ <b>–¶–µ–Ω–∞:</b> {tariff.price_vnd:,} VND/–º–µ—Å—è—Ü\n"
        else:
            text += f"üíµ <b>–¶–µ–Ω–∞:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        
        text += f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {tariff.features.commission_rate * 100:.1f}%\n"
        
        if tariff.features.max_transactions_per_month == -1:
            text += f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> –ë–µ–∑–ª–∏–º–∏—Ç\n"
        else:
            text += f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {tariff.features.max_transactions_per_month} –≤ –º–µ—Å—è—Ü\n\n"
        
        text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n"
        text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–Ω–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Ç–∞—Ä–∏—Ñ–µ."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"tariff_confirm:{tariff_type.value}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"tariff_info:{tariff_type.value}")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error applying tariff: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞")

@router.callback_query(F.data.startswith("tariff_confirm:"))
async def handle_tariff_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä
        if not (hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
            return
        
        tariff_type_str = callback.data.split(":")[1]
        tariff_type = TariffType(tariff_type_str)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        tariff = tariff_service.get_tariff_by_type(tariff_type)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ
        success = tariff_service.subscribe_partner_to_tariff(user_id, tariff_type)
        
        if success:
            text = f"‚úÖ <b>–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            text += f"–í–∞—à –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: <b>{tariff.name}</b>\n\n"
            
            if tariff.price_vnd > 0:
                text += f"üíµ –¶–µ–Ω–∞: {tariff.price_vnd:,} VND/–º–µ—Å—è—Ü\n"
            else:
                text += f"üíµ –¶–µ–Ω–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            
            text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {tariff.features.commission_rate * 100:.1f}%\n"
            
            if tariff.features.max_transactions_per_month == -1:
                text += f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –ë–µ–∑–ª–∏–º–∏—Ç\n"
            else:
                text += f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tariff.features.max_transactions_per_month} –≤ –º–µ—Å—è—Ü\n\n"
            
            text += "üéâ –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
        else:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
            text += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="back_to_tariffs")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming tariff: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞")

@router.callback_query(F.data == "back_to_tariffs")
async def handle_back_to_tariffs(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä
        if not (hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ–∞–º–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = tariff_service.get_all_tariffs()
        
        if not tariffs:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for tariff in tariffs:
            price_text = f"{tariff.price_vnd:,} VND/–º–µ—Å" if tariff.price_vnd > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            button_text = f"{tariff.name} - {price_text}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"tariff_info:{tariff.tariff_type.value}"
                )
            ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="tariff_help")
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error going back to tariffs: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç–∞—Ä–∏—Ñ–∞–º")

@router.callback_query(F.data == "tariff_help")
async def handle_tariff_help(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–º–æ—â—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        user_role = await get_user_role(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä
        if not (hasattr(user_role, 'name') and user_role.name in ['partner', 'admin', 'super_admin']):
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ–∞–º–∏")
            return
        
        text = "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º</b>\n\n"
        text += "üí∞ <b>FREE STARTER</b> - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        text += "‚Ä¢ 15 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ—Å—è—Ü\n"
        text += "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è 12%\n"
        text += "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
        
        text += "üíº <b>BUSINESS</b> - –î–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n"
        text += "‚Ä¢ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ—Å—è—Ü\n"
        text += "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è 6%\n"
        text += "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        
        text += "üè¢ <b>ENTERPRISE</b> - –î–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n"
        text += "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        text += "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è 4%\n"
        text += "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: API, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
        
        text += "üí° <b>–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ:</b>\n"
        text += "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ\n"
        text += "2. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ'\n"
        text += "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É\n\n"
        
        text += "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_tariffs")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing tariff help: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏")

# –£–±—Ä–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–∞–º

@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
