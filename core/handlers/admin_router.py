"""
Router for admin panel functionality.
Handles all administrative operations including user management, karma control, and system monitoring.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Union, Any, Dict
import logging

# Create router with a name
router = Router(name='admin_router')

# Import dependencies
from ..services.admin_service import admin_service
from ..services.user_service import karma_service
from ..keyboards.reply_v2 import get_admin_keyboard, get_return_to_main_menu
from ..utils.locales_v2 import get_text, get_all_texts

logger = logging.getLogger(__name__)


def get_admin_router() -> Router:
    """Get the admin router with all handlers."""
    return router


class AdminStates(StatesGroup):
    """FSM states for admin panel interactions."""
    viewing_dashboard = State()
    searching_users = State()
    viewing_user_details = State()
    modifying_karma = State()
    banning_user = State()
    viewing_logs = State()


@router.message(F.text.in_(["üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üõ°Ô∏è Admin Panel"]))
async def admin_dashboard_handler(message: Message, state: FSMContext):
    """Handle admin dashboard entry point."""
    try:
        # Check if user is admin
        user_id = message.from_user.id
        # TODO: Add role check here
        
        # Get admin statistics
        stats = await admin_service.get_admin_stats()
        
        text = (
            f"üõ°Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['active_users']}</b>\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <b>{stats['banned_users']}</b>\n"
            f"üìà –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{stats['recent_registrations']}</b>\n\n"
            f"‚≠ê <b>–ö–∞—Ä–º–∞ –∏ –∫–∞—Ä—Ç—ã:</b>\n"
            f"üíé –û–±—â–∞—è –∫–∞—Ä–º–∞: <b>{stats['total_karma']:,}</b>\n"
            f"üí≥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç: <b>{stats['total_cards']}</b>\n"
            f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö: <b>{stats['bound_cards']}</b>\n"
            f"üìã –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['unbound_cards']}</b>\n\n"
            f"üë• <b>–ü–æ —Ä–æ–ª—è–º:</b>\n"
        )
        
        for role, count in stats['users_by_role'].items():
            role_emoji = {
                'user': 'üë§',
                'partner': 'ü§ù',
                'admin': 'üõ°Ô∏è',
                'superadmin': 'üëë'
            }.get(role, '‚ùì')
            text += f"{role_emoji} {role}: <b>{count}</b>\n"
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in admin_dashboard_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_to_main_menu()
        )


@router.message(F.text.in_(["üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîç Search Users"]))
async def search_users_handler(message: Message, state: FSMContext):
    """Handle user search."""
    try:
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
            "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username)\n"
            "‚Ä¢ –ò–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>123456789</code>\n"
            "‚Ä¢ <code>@username</code>\n"
            "‚Ä¢ <code>–ò–≤–∞–Ω</code>"
        )
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.searching_users)
        
    except Exception as e:
        logger.error(f"Error in search_users_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(AdminStates.searching_users)
async def process_user_search(message: Message, state: FSMContext):
    """Process user search query."""
    try:
        query = message.text.strip()
        if not query:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # Search users
        users = await admin_service.search_users(query, limit=10)
        
        if not users:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> '{query}'\n\n"
            for i, user in enumerate(users, 1):
                status_emoji = "üö´" if user['is_banned'] else "‚úÖ"
                text += (
                    f"{i}. {status_emoji} <b>{user['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
                    f"   ID: <code>{user['telegram_id']}</code>\n"
                    f"   @{user['username'] or '–ù–µ—Ç username'}\n"
                    f"   ‚≠ê –ö–∞—Ä–º–∞: {user['karma_points']} (–£—Ä–æ–≤–µ–Ω—å {user['level']})\n"
                    f"   üé≠ –†–æ–ª—å: {user['role']}\n\n"
                )
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_user_search: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(F.text.in_(["‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π", "‚ö° Karma Management"]))
async def karma_management_handler(message: Message, state: FSMContext):
    """Handle karma management."""
    try:
        text = (
            "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/karma [ID] [¬±—Å—É–º–º–∞] [–ø—Ä–∏—á–∏–Ω–∞]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/karma 123456789 +100 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>\n"
            "‚Ä¢ <code>/karma 123456789 -50 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</code>\n\n"
            "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑: 1000 –∫–∞—Ä–º—ã"
        )
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.modifying_karma)
        
    except Exception as e:
        logger.error(f"Error in karma_management_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(AdminStates.modifying_karma)
async def process_karma_modification(message: Message, state: FSMContext):
    """Process karma modification command."""
    try:
        command = message.text.strip()
        if not command.startswith('/karma'):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /karma [ID] [¬±—Å—É–º–º–∞] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        # Parse command
        parts = command.split()
        if len(parts) < 4:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /karma [ID] [¬±—Å—É–º–º–∞] [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        try:
            user_id = int(parts[1])
            amount = int(parts[2])
            reason = ' '.join(parts[3:])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —Å—É–º–º—ã.")
            return
        
        # Modify karma
        result = await admin_service.modify_user_karma(
            user_id, amount, reason, message.from_user.id
        )
        
        if result['success']:
            text = (
                f"‚úÖ <b>–ö–∞—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+d}\n"
                f"‚≠ê –ë—ã–ª–æ: {result['old_karma']}\n"
                f"‚≠ê –°—Ç–∞–ª–æ: {result['new_karma']}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        else:
            text = f"‚ùå {result['message']}"
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_karma_modification: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(F.text.in_(["üö´ –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω", "üö´ Ban/Unban"]))
async def ban_management_handler(message: Message, state: FSMContext):
    """Handle ban/unban management."""
    try:
        text = (
            "üö´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/ban [ID] [–ø—Ä–∏—á–∏–Ω–∞]</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
            "<code>/unban [ID]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/ban 123456789 –°–ø–∞–º</code>\n"
            "‚Ä¢ <code>/unban 123456789</code>"
        )
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.banning_user)
        
    except Exception as e:
        logger.error(f"Error in ban_management_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(AdminStates.banning_user)
async def process_ban_command(message: Message, state: FSMContext):
    """Process ban/unban command."""
    try:
        command = message.text.strip()
        
        if command.startswith('/ban'):
            # Parse ban command
            parts = command.split()
            if len(parts) < 3:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ban [ID] [–ø—Ä–∏—á–∏–Ω–∞]")
                return
            
            try:
                user_id = int(parts[1])
                reason = ' '.join(parts[2:])
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
                return
            
            # Ban user
            result = await admin_service.ban_user(user_id, reason, message.from_user.id)
            
        elif command.startswith('/unban'):
            # Parse unban command
            parts = command.split()
            if len(parts) < 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban [ID]")
                return
            
            try:
                user_id = int(parts[1])
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
                return
            
            # Unban user
            result = await admin_service.unban_user(user_id, message.from_user.id)
            
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ban –∏–ª–∏ /unban")
            return
        
        if result['success']:
            text = f"‚úÖ {result['message']}"
            if 'reason' in result:
                text += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}"
        else:
            text = f"‚ùå {result['message']}"
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.viewing_dashboard)
        
    except Exception as e:
        logger.error(f"Error in process_ban_command: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(F.text.in_(["üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", "üìã Action Logs"]))
async def view_logs_handler(message: Message, state: FSMContext):
    """Handle admin logs viewing."""
    try:
        # Get recent admin logs
        logs = await admin_service.get_admin_logs(limit=10)
        
        if not logs:
            text = "üìã <b>–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö."
        else:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            for log in logs:
                action_emoji = {
                    'modify_karma': '‚ö°',
                    'ban_user': 'üö´',
                    'unban_user': '‚úÖ',
                    'generate_cards': 'üí≥',
                    'block_card': 'üîí'
                }.get(log['action'], 'üîß')
                
                text += (
                    f"{action_emoji} <b>{log['action']}</b>\n"
                    f"üë§ –ê–¥–º–∏–Ω: <code>{log['admin_id']}</code>\n"
                )
                
                if log['target_user_id']:
                    text += f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{log['target_user_id']}</code>\n"
                    if log['target_full_name']:
                        text += f"   {log['target_full_name']}\n"
                
                if log['target_card_id']:
                    text += f"üí≥ –ö–∞—Ä—Ç–∞: <code>{log['target_card_id']}</code>\n"
                
                if log['details']:
                    text += f"üìù {log['details']}\n"
                
                text += f"üìÖ {log['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await message.answer(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(AdminStates.viewing_logs)
        
    except Exception as e:
        logger.error(f"Error in view_logs_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_keyboard()
        )


@router.message(F.text.in_(["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è Back"]))
async def back_to_main_handler(message: Message, state: FSMContext):
    """Handle back button to return to main menu."""
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        from core.keyboards.reply_v2 import get_main_menu_reply
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_reply()
        )
    except Exception as e:
        logger.error(f"Error returning to main menu from admin: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# Register all handlers
router.message.register(admin_dashboard_handler, F.text == "üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
router.message.register(search_users_handler, F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
router.message.register(karma_management_handler, F.text == "‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º–æ–π")
router.message.register(ban_management_handler, F.text == "üö´ –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω")
router.message.register(view_logs_handler, F.text == "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
router.message.register(back_to_main_handler, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")

# For backward compatibility
def get_admin_router():
    """Get the admin router instance."""
    return router

# Export the router
__all__ = ['router', 'get_admin_router']
