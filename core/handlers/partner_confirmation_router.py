"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ FSM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from core.fsm.partner_confirmation import PartnerConfirmation, handle_confirmation_response
from core.keyboards.reply_v2 import get_user_cabinet_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(PartnerConfirmation.waiting_for_telegram_confirmation)
async def process_telegram_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram"""
    try:
        await handle_confirmation_response(message, state)
    except Exception as e:
        logger.error(f"Error in process_telegram_confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–≤
@router.message(F.text.startswith("/confirm_partner"))
async def handle_admin_confirm_partner(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from core.security.roles import get_user_role
        user_role = await get_user_role(message.from_user.id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–æ–¥—ã.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /confirm_partner <user_id> <code>
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_partner <user_id> <code>\n"
                "–ü—Ä–∏–º–µ—Ä: /confirm_partner 123456789 123456"
            )
            return
        
        try:
            user_id = int(parts[1])
            code = parts[2]
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ –∫–æ–¥–∞.")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥
        from core.fsm.partner_confirmation import confirm_partner_code
        success = await confirm_partner_code(message.from_user.id, user_id, code)
        
        if success:
            await message.answer(
                f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"
                f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
            )
        else:
            await message.answer(
                f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"
                f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            )
            
    except Exception as e:
        logger.error(f"Error in handle_admin_confirm_partner: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.message(F.text == "/pending_partners")
async def handle_pending_partners(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from core.security.roles import get_user_role
        user_role = await get_user_role(message.from_user.id)
        role_name = getattr(user_role, "name", str(user_role)).lower()
        
        if role_name not in ("admin", "super_admin"):
            await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö.")
            return
        
        from core.fsm.partner_confirmation import confirmation_codes
        
        if not confirmation_codes:
            await message.answer("üìã –ù–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        text = "üìã <b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n"
        
        for user_id, data in confirmation_codes.items():
            partner_data = data.get('partner_data', {})
            code = data.get('code', 'N/A')
            confirmed = data.get('confirmed', False)
            
            status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if confirmed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            
            text += f"üÜî <b>ID:</b> {user_id}\n"
            text += f"üè¢ <b>–ë–∏–∑–Ω–µ—Å:</b> {partner_data.get('business_name', 'N/A')}\n"
            text += f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {partner_data.get('contact_name', 'N/A')}\n"
            text += f"üîë <b>–ö–æ–¥:</b> {code}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        
        text += f"üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        text += f"‚Ä¢ /confirm_partner <user_id> <code> - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥\n"
        text += f"‚Ä¢ /pending_partners - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
        
        await message.answer(text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in handle_pending_partners: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö.")

# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ['router']
