"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from typing import Dict, Any, List
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_db
from core.services.multilevel_referral_service import multilevel_referral_service
from core.services.referral_service import referral_service
from core.utils.locales_v2 import get_text
from core.keyboards.restaurant_keyboards import select_restoran
from core.logger import get_logger

logger = get_logger(__name__)
router = Router(name="referral_handlers")

@router.message(F.text.in_(["–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", "Invite friends", "M·ªùi b·∫°n b√®", "ÏπúÍµ¨ Ï¥àÎåÄ"]))
async def show_invite_menu(message: Message, state: FSMContext):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –º–µ–Ω—é "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π" (—Ä–æ–≤–Ω–æ 3 –ø—É–Ω–∫—Ç–∞)"""
    lang = (await state.get_data()).get("lang", "ru")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text("invite.my_link", lang) or "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞", callback_data="invite_my_link")],
        [InlineKeyboardButton(text=get_text("invite.invited", lang) or "üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ", callback_data="invite_invited")],
        [InlineKeyboardButton(text=get_text("invite.earnings", lang) or "üíµ –î–æ—Ö–æ–¥—ã", callback_data="invite_earnings")],
    ])
    await message.answer(get_text("menu.invite_friends", lang) or "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", reply_markup=kb)

@router.callback_query(F.data == "invite_my_link")
async def invite_my_link(cb: CallbackQuery, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    try:
        link = await referral_service.get_referral_link(cb.from_user.id)
    except Exception:
        link = "soon://ref"
    text = (get_text("invite.my_link", lang) or "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞") + f"\n\n`{link}`"
    await cb.message.edit_text(text, parse_mode="Markdown")
    await cb.answer()

@router.callback_query(F.data == "invite_invited")
async def invite_invited(cb: CallbackQuery, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        referrals = await multilevel_referral_service.get_user_referrals(cb.from_user.id)
        
        if not referrals:
            text = get_text("invite.invited", lang) or "üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ"
            text += "\n\n–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
            await cb.message.edit_text(text)
            await cb.answer()
            return
        
        text = get_text("invite.invited", lang) or "üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ"
        text += "\n\n"
        
        for i, ref in enumerate(referrals, 1):
            name = ref.get('first_name', '') or ref.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            level = ref.get('level', 1)
            created_at = ref.get('created_at', '')
            earnings = ref.get('total_earnings', 0)
            
            text += f"{i}. **{name}** (–£—Ä–æ–≤–µ–Ω—å {level})\n"
            text += f"   üìÖ {created_at}\n"
            text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earnings} –±–∞–ª–ª–æ–≤\n\n"
        
        await cb.message.edit_text(text, parse_mode="Markdown")
        await cb.answer()
        
    except Exception as e:
        logger.error(f"Error getting referrals: {e}")
        text = get_text("invite.invited", lang) or "üìã –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ"
        text += "\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await cb.message.edit_text(text)
        await cb.answer()

@router.callback_query(F.data == "invite_earnings")
async def invite_earnings(cb: CallbackQuery, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        stats = await multilevel_referral_service.get_user_stats(cb.from_user.id)
        
        text = get_text("invite.earnings", lang) or "üíµ –î–æ—Ö–æ–¥—ã"
        text += "\n\n"
        
        text += f"üí∞ **–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {stats.get('total_earnings', 0)} –±–∞–ª–ª–æ–≤\n"
        text += f"üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {stats.get('total_referrals', 0)} —á–µ–ª–æ–≤–µ–∫\n"
        text += f"üî• **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {stats.get('active_referrals', 0)} –∑–∞ 30 –¥–Ω–µ–π\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        text += "üìä **–î–æ—Ö–æ–¥—ã –ø–æ —É—Ä–æ–≤–Ω—è–º:**\n"
        text += f"‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: {stats.get('level_1_earnings', 0)} –±–∞–ª–ª–æ–≤\n"
        text += f"‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: {stats.get('level_2_earnings', 0)} –±–∞–ª–ª–æ–≤\n"
        text += f"‚Ä¢ 3-–π —É—Ä–æ–≤–µ–Ω—å: {stats.get('level_3_earnings', 0)} –±–∞–ª–ª–æ–≤\n\n"
        
        if stats.get('total_referrals', 0) > 0:
            avg_earnings = stats.get('total_earnings', 0) / stats.get('total_referrals', 1)
            text += f"üìà **–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:** {avg_earnings:.1f} –±–∞–ª–ª–æ–≤ —Å —á–µ–ª–æ–≤–µ–∫–∞\n\n"
        
        text += "üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã!"
        
        await cb.message.edit_text(text, parse_mode="Markdown")
        await cb.answer()
        
    except Exception as e:
        logger.error(f"Error getting earnings: {e}")
        text = get_text("invite.earnings", lang) or "üíµ –î–æ—Ö–æ–¥—ã"
        text += "\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await cb.message.edit_text(text)
        await cb.answer()
async def show_referral_program(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        user_id = message.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        stats = await multilevel_referral_service.get_referral_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = await referral_service.get_referral_link(user_id)
        
        text = get_text(lang, "referral_program_title") or "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
        text += f"\n\nüìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        text += f"\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è: {stats['level_1']['count']}"
        text += f"\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è: {stats['level_2']['count']}"
        text += f"\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è: {stats['level_3']['count']}"
        text += f"\n‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earnings']:.2f} —Ä—É–±."
        
        text += f"\n\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:"
        text += f"\n`{referral_link}`"
        
        text += f"\n\nüí∞ –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:"
        text += f"\n‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: 50% –æ—Ç –ø–æ–∫—É–ø–æ–∫"
        text += f"\n‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: 30% –æ—Ç –ø–æ–∫—É–ø–æ–∫"
        text += f"\n‚Ä¢ 3-–π —É—Ä–æ–≤–µ–Ω—å: 20% –æ—Ç –ø–æ–∫—É–ø–æ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "referral_tree") or "üå≥ –î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                    callback_data="show_referral_tree"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "referral_history") or "üìà –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤",
                    callback_data="show_referral_history"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_main") or "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")

@router.callback_query(F.data == "show_referral_tree")
async def show_referral_tree(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        tree = await multilevel_referral_service.get_referral_tree(user_id)
        
        text = get_text(lang, "referral_tree_title") or "üå≥ –î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        text += f"\n\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        text += f"\n‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {tree['total_referrals']}"
        text += f"\n‚Ä¢ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {tree['total_earnings']:.2f} —Ä—É–±."
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        for level in sorted(tree['levels'].keys()):
            level_data = tree['levels'][level]
            text += f"\n\nüî∏ {level}-–π —É—Ä–æ–≤–µ–Ω—å:"
            text += f"\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {level_data['count']}"
            text += f"\n‚Ä¢ –î–æ—Ö–æ–¥—ã: {level_data['total_earnings']:.2f} —Ä—É–±."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            recent_referrals = level_data['referrals'][:3]
            if recent_referrals:
                text += f"\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:"
                for ref in recent_referrals:
                    text += f"\n  - ID: {ref['user_id']} (–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref['total_earnings']:.2f} —Ä—É–±.)"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_referrals") or "‚óÄÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º",
                    callback_data="back_to_referrals"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

@router.callback_query(F.data == "show_referral_history")
async def show_referral_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        async with get_db() as db:
            from core.models.referral_tree import ReferralBonus
            from sqlalchemy import select, desc
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–æ–Ω—É—Å–æ–≤
            result = await db.execute(
                select(ReferralBonus)
                .where(ReferralBonus.referrer_id == user_id)
                .order_by(desc(ReferralBonus.created_at))
                .limit(10)
            )
            bonuses = result.scalars().all()
        
        text = get_text(lang, "referral_history_title") or "üìà –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤"
        
        if not bonuses:
            text += "\n\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        else:
            text += f"\n\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(bonuses)} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:"
            
            for bonus in bonuses:
                text += f"\n\nüî∏ {bonus.level}-–π —É—Ä–æ–≤–µ–Ω—å:"
                text += f"\n‚Ä¢ –°—É–º–º–∞: {bonus.bonus_amount:.2f} —Ä—É–±."
                text += f"\n‚Ä¢ –û—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {bonus.referred_id}"
                text += f"\n‚Ä¢ –î–∞—Ç–∞: {bonus.created_at.strftime('%d.%m.%Y %H:%M')}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_referrals") or "‚óÄÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º",
                    callback_data="back_to_referrals"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@router.callback_query(F.data == "back_to_referrals")
async def back_to_referrals(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    await show_referral_program(callback.message, state)
    await callback.answer()

@router.message(F.text.startswith("/invite"))
async def process_invite_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /invite –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        user_id = message.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
            return
        
        try:
            referrer_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
        if user_id == referrer_id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É
        result = await multilevel_referral_service.add_referral(user_id, referrer_id)
        
        text = get_text(lang, "referral_registration_success") or "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —É—Å–ø–µ—à–Ω–∞!"
        text += f"\n\nüéâ –í—ã —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {result['level']}-–≥–æ —É—Ä–æ–≤–Ω—è"
        text += f"\nüë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = select_restoran(lang)
        await message.answer(text, reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await message.bot.send_message(
                chat_id=referrer_id,
                text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /invite: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")

@router.message(F.text == "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def show_my_referral_link(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = await referral_service.get_referral_link(user_id)
        
        text = get_text(lang, "my_referral_link") or "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
        text += f"\n\n`{referral_link}`"
        text += f"\n\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"
        text += f"\nüí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "share_link") or "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                    url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20KARMABOT1!"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_main") or "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
multilevel_referral_service = MultilevelReferralService()
