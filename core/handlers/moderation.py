"""
Moderation FSM handlers for admin card approval/rejection
Behind FEATURE_MODERATION flag for safe deployment
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import logging

from ..settings import settings
from ..database.db_v2 import db_v2
from ..services.admins import admins_service

logger = logging.getLogger(__name__)

# FSM States for moderation
class ModerationStates(StatesGroup):
    reviewing_card = State()
    entering_rejection_reason = State()

# Router for moderation handlers
moderation_router = Router()

def get_moderation_keyboard(card_id: int) -> InlineKeyboardMarkup:
    """Keyboard for card moderation"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"mod_approve:{card_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject:{card_id}")
        ],
        [
            InlineKeyboardButton(text="‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ", callback_data=f"mod_feature:{card_id}"),
            InlineKeyboardButton(text="üóÇÔ∏è –ê—Ä—Ö–∏–≤", callback_data=f"mod_archive:{card_id}")
        ],
        [
            InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="mod_next"),
            InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="mod_finish")
        ]
    ])

def get_rejection_keyboard(card_id: int) -> InlineKeyboardMarkup:
    """Keyboard for rejection reasons"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"reject_reason:{card_id}:incomplete")],
        [InlineKeyboardButton(text="üö´ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data=f"reject_reason:{card_id}:inappropriate")],
        [InlineKeyboardButton(text="üì∏ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ", callback_data=f"reject_reason:{card_id}:bad_photo")],
        [InlineKeyboardButton(text="üè∑Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"reject_reason:{card_id}:wrong_category")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É", callback_data=f"reject_custom:{card_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"mod_back:{card_id}")]
    ])

def format_card_for_moderation(card: dict) -> str:
    """Format card for moderation review"""
    text = f"üîç **–ú–û–î–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–û–ß–ö–ò #{card['id']}**\n\n"
    text += f"üë§ **–ü–∞—Ä—Ç–Ω–µ—Ä:** {card.get('partner_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {card.get('category_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card['title']}\n"
    
    if card.get('description'):
        text += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {card['description']}\n"
    
    if card.get('contact'):
        text += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** {card['contact']}\n"
    
    if card.get('address'):
        text += f"üìç **–ê–¥—Ä–µ—Å:** {card['address']}\n"
    
    if card.get('discount_text'):
        text += f"üé´ **–°–∫–∏–¥–∫–∞:** {card['discount_text']}\n"
    
    if card.get('photo_file_id'):
        text += f"üì∏ **–§–æ—Ç–æ:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    
    text += f"\nüìÖ **–°–æ–∑–¥–∞–Ω–∞:** {card.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    text += f"\n‚è≥ **–°—Ç–∞—Ç—É—Å:** {card.get('status', 'pending')}"
    
    return text

async def _ensure_admin(user_id: int) -> bool:
    return await admins_service.is_admin(user_id)

# Command to start moderation
@moderation_router.message(Command("moderate"))
async def start_moderation(message: Message, state: FSMContext):
    """Start moderation process (admin only)"""
    if not settings.features.moderation:
        await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    # Get pending cards
    pending_cards = db_v2.get_cards_pending_moderation()
    
    if not pending_cards:
        await message.answer("‚úÖ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # Show first card
    card = pending_cards[0]
    await state.update_data(
        pending_cards=pending_cards,
        current_index=0,
        total_count=len(pending_cards)
    )
    await state.set_state(ModerationStates.reviewing_card)
    
    text = format_card_for_moderation(card)
    text += f"\n\nüìä **–ö–∞—Ä—Ç–æ—á–∫–∞ 1 –∏–∑ {len(pending_cards)}**"
    
    if card.get('photo_file_id'):
        await message.answer_photo(
            photo=card['photo_file_id'],
            caption=text,
            reply_markup=get_moderation_keyboard(card['id'])
        )
    else:
        await message.answer(
            text,
            reply_markup=get_moderation_keyboard(card['id'])
        )

# Approve card
@moderation_router.callback_query(F.data.startswith("mod_approve:"))
async def approve_card(callback: CallbackQuery, state: FSMContext):
    """Approve card"""
    if not await _ensure_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    card_id = int(callback.data.split(":")[1])
    
    # Update card status
    success = db_v2.update_card_status(
        card_id, 
        'published', 
        callback.from_user.id, 
        '–û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º'
    )
    
    if success:
        await callback.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        
        # Try to notify partner
        try:
            # Get card details for notification
            with db_v2.get_connection() as conn:
                cursor = conn.execute("""
                    SELECT c.title, p.tg_user_id 
                    FROM cards_v2 c 
                    JOIN partners_v2 p ON c.partner_id = p.id 
                    WHERE c.id = ?
                """, (card_id,))
                row = cursor.fetchone()
                
                if row:
                    bot = callback.bot
                    await bot.send_message(
                        row['tg_user_id'],
                        f"‚úÖ **–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n"
                        f"üìã ID: #{card_id}\n\n"
                        f"üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!"
                    )
        except Exception as e:
            logger.error(f"Failed to notify partner: {e}")
        
        await show_next_card(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

# Reject card - show reasons
@moderation_router.callback_query(F.data.startswith("mod_reject:"))
async def show_rejection_reasons(callback: CallbackQuery, state: FSMContext):
    """Show rejection reasons"""
    if not await _ensure_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    card_id = int(callback.data.split(":")[1])
    
    await callback.message.edit_reply_markup(
        reply_markup=get_rejection_keyboard(card_id)
    )

# Handle predefined rejection reasons
@moderation_router.callback_query(F.data.startswith("reject_reason:"))
async def reject_with_reason(callback: CallbackQuery, state: FSMContext):
    """Reject card with predefined reason"""
    if not await _ensure_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    parts = callback.data.split(":")
    card_id = int(parts[1])
    reason_code = parts[2]
    
    # Map reason codes to messages
    reasons = {
        'incomplete': '–ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.',
        'inappropriate': '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
        'bad_photo': '–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
        'wrong_category': '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.'
    }
    
    reason = reasons.get(reason_code, '–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.')
    
    await reject_card_with_comment(callback, state, card_id, reason)

# Handle custom rejection reason
@moderation_router.callback_query(F.data.startswith("reject_custom:"))
async def request_custom_reason(callback: CallbackQuery, state: FSMContext):
    """Request custom rejection reason"""
    if not await _ensure_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    card_id = int(callback.data.split(":")[1])
    
    await state.update_data(rejecting_card_id=card_id)
    await state.set_state(ModerationStates.entering_rejection_reason)
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"mod_back:{card_id}")]
        ])
    )

# Handle custom rejection reason input
@moderation_router.message(ModerationStates.entering_rejection_reason, F.text)
async def handle_custom_rejection_reason(message: Message, state: FSMContext):
    """Handle custom rejection reason"""
    data = await state.get_data()
    card_id = data.get('rejecting_card_id')
    
    if not card_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    reason = message.text.strip()
    if len(reason) < 10:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # Create a fake callback for consistency
    class FakeCallback:
        def __init__(self, user_id, bot):
            self.from_user = type('User', (), {'id': user_id})()
            self.bot = bot
            self.answer = lambda text: message.answer(text)
    
    fake_callback = FakeCallback(message.from_user.id, message.bot)
    await reject_card_with_comment(fake_callback, state, card_id, reason)

async def reject_card_with_comment(callback, state: FSMContext, card_id: int, comment: str):
    """Reject card with comment"""
    # Update card status
    success = db_v2.update_card_status(
        card_id, 
        'rejected', 
        callback.from_user.id, 
        comment
    )
    
    if success:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
        # Try to notify partner
        try:
            with db_v2.get_connection() as conn:
                cursor = conn.execute("""
                    SELECT c.title, p.tg_user_id 
                    FROM cards_v2 c 
                    JOIN partners_v2 p ON c.partner_id = p.id 
                    WHERE c.id = ?
                """, (card_id,))
                row = cursor.fetchone()
                
                if row:
                    bot = callback.bot
                    await bot.send_message(
                        row['tg_user_id'],
                        f"‚ùå **–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n"
                        f"üìã ID: #{card_id}\n\n"
                        f"üí¨ **–ü—Ä–∏—á–∏–Ω–∞:** {comment}\n\n"
                        f"‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
                    )
        except Exception as e:
            logger.error(f"Failed to notify partner: {e}")
        
        await show_next_card(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

# Feature card
@moderation_router.callback_query(F.data.startswith("mod_feature:"))
async def feature_card(callback: CallbackQuery, state: FSMContext):
    """Mark card as featured"""
    if not await _ensure_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    card_id = int(callback.data.split(":")[1])
    
    # Update card status and mark as featured
    with db_v2.get_connection() as conn:
        cursor = conn.execute("""
            UPDATE cards_v2 
            SET status = 'published', is_featured = 1, priority_level = 100,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (card_id,))
        
        if cursor.rowcount > 0:
            # Log moderation action
            conn.execute("""
                INSERT INTO moderation_log (card_id, moderator_id, action, comment)
                VALUES (?, ?, 'feature', '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ')
            """, (card_id, callback.from_user.id))
            
            await callback.answer("‚≠ê –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è!")
            await show_next_card(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

# Show next card
@moderation_router.callback_query(F.data == "mod_next")
async def show_next_card_callback(callback: CallbackQuery, state: FSMContext):
    """Show next card for moderation"""
    await show_next_card(callback, state)

async def show_next_card(callback, state: FSMContext):
    """Show next card in moderation queue"""
    data = await state.get_data()
    pending_cards = data.get('pending_cards', [])
    current_index = data.get('current_index', 0)
    
    # Move to next card
    next_index = current_index + 1
    
    if next_index >= len(pending_cards):
        await callback.message.edit_text(
            "‚úÖ **–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(pending_cards)}",
            reply_markup=None
        )
        await state.clear()
        return
    
    # Show next card
    card = pending_cards[next_index]
    await state.update_data(current_index=next_index)
    
    text = format_card_for_moderation(card)
    text += f"\n\nüìä **–ö–∞—Ä—Ç–æ—á–∫–∞ {next_index + 1} –∏–∑ {len(pending_cards)}**"
    
    if card.get('photo_file_id'):
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=card['photo_file_id'],
            caption=text,
            reply_markup=get_moderation_keyboard(card['id'])
        )
    else:
        await callback.message.edit_text(
            text,
            reply_markup=get_moderation_keyboard(card['id'])
        )

# Back to card view
@moderation_router.callback_query(F.data.startswith("mod_back:"))
async def back_to_card(callback: CallbackQuery, state: FSMContext):
    """Go back to card moderation view"""
    card_id = int(callback.data.split(":")[1])
    
    await callback.message.edit_reply_markup(
        reply_markup=get_moderation_keyboard(card_id)
    )

# Finish moderation
@moderation_router.callback_query(F.data == "mod_finish")
async def finish_moderation(callback: CallbackQuery, state: FSMContext):
    """Finish moderation session"""
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    total_count = data.get('total_count', 0)
    
    await callback.message.edit_text(
        f"üèÅ **–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current_index + 1} –∏–∑ {total_count} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /moderate",
        reply_markup=None
    )
    await state.clear()

# Statistics command
@moderation_router.message(Command("mod_stats"))
async def moderation_stats(message: Message):
    """Show moderation statistics"""
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    with db_v2.get_connection() as conn:
        # Get counts by status
        cursor = conn.execute("""
            SELECT status, COUNT(*) as count 
            FROM cards_v2 
            GROUP BY status
        """)
        status_counts = dict(cursor.fetchall())
        
        # Get recent moderation actions
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count 
            FROM moderation_log 
            WHERE created_at >= date('now', '-7 days')
            GROUP BY action
        """)
        recent_actions = dict(cursor.fetchall())
    
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
    text += "**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
    text += f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {status_counts.get('pending', 0)}\n"
    text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {status_counts.get('published', 0)}\n"
    text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {status_counts.get('rejected', 0)}\n"
    text += f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {status_counts.get('draft', 0)}\n"
    text += f"üóÇÔ∏è –ê—Ä—Ö–∏–≤: {status_counts.get('archived', 0)}\n\n"
    
    if recent_actions:
        text += "**–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"
        for action, count in recent_actions.items():
            emoji = {'approve': '‚úÖ', 'reject': '‚ùå', 'feature': '‚≠ê', 'archive': 'üóÇÔ∏è'}.get(action, 'üìù')
            text += f"{emoji} {action}: {count}\n"
    
    await message.answer(text)

# Register router only if feature is enabled
def get_moderation_router() -> Router:
    """Get moderation router if feature is enabled"""
    if settings.features.moderation:
        return moderation_router
    return Router()  # Empty router if disabled
