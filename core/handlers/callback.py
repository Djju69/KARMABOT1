from aiogram import Bot, types, F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from core.keyboards.restaurant_keyboards import regional_restoran, kitchen_keyboard
from core.keyboards.language_keyboard import language_keyboard
from core.keyboards.inline_v2 import get_language_inline, get_policy_inline
from core.utils.geo import find_restaurants  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
from core.utils.locales import get_text
from core.utils.locales_v2 import get_text as get_text_v2
from core.handlers.category_handlers_v2 import show_categories_v2  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ö–µ–Ω–¥–ª–µ—Ä
from core.handlers.basic import get_start

router = Router(name="callback_router")

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@router.callback_query(F.data == "rest_near_me")
async def rest_near_me_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "please_send_location"),
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=get_text(lang, "send_location"), request_location=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(F.content_type == types.ContentType.LOCATION)
async def location_handler(message: Message, bot: Bot):
    latitude = message.location.latitude
    longitude = message.location.longitude
    lang = message.from_user.language_code or "en"

    restaurants = find_restaurants(latitude, longitude, radius=2000, lang=lang)

    if not restaurants:
        await bot.send_message(message.chat.id, get_text(lang, "no_places"))
        return

    for rest in restaurants:
        # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, —Å–∫–∏–¥–∫–∞ –∏ —Ç.–¥.
        await bot.send_message(message.chat.id, text=rest["name"])

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º ---
@router.callback_query(F.data == "rests_by_district")
async def rests_by_district_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "choose_district"),
        reply_markup=regional_restoran
    )
    await callback.answer()

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –∫—É—Ö–Ω–µ ---
@router.callback_query(F.data == "rests_by_kitchen")
async def rests_by_kitchen_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "choose_kitchen"),
        reply_markup=kitchen_keyboard
    )
    await callback.answer()

# --- –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ callback) ---
@router.callback_query(F.data == "show_categories")
async def show_categories_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    lang = (await state.get_data()).get("lang", callback.from_user.language_code or "en")
    await show_categories_v2(callback.message, bot, lang)
    await callback.answer()

# --- –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ ---
@router.callback_query(F.data == "change_language")
async def change_language_callback(callback: CallbackQuery):
    text = "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
    await callback.message.edit_text(text, reply_markup=language_keyboard)
    await callback.answer()

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ (–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫) ---
@router.callback_query(F.data.regexp(r"^lang:set:(ru|en|vi|ko)$"))
async def handle_language_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ callback_data
        lang_code = callback.data.split(":")[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ FSM
        await state.update_data(lang=lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_text = f"""{user_name} üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Karma System! 

‚ú® –ü–æ–ª—É—á–∞–π —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –≤ —É–¥–æ–±–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:  
üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ  
üßñ‚Äç‚ôÄÔ∏è SPA –∏ –º–∞—Å—Å–∞–∂  
üèçÔ∏è –ê—Ä–µ–Ω–¥–∞ –±–∞–π–∫–æ–≤  
üè® –û—Ç–µ–ª–∏  
üö∂‚Äç‚ôÇÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏
üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —É—Å–ª—É–≥–∏  

–ê –µ—Å–ª–∏ —Ç—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞ ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–π —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏! üöÄ  

–ù–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –≤—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∞–π —Å–≤–æ–∏ —Å–∫–∏–¥–∫–∏! 

–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
        policy_keyboard = get_policy_inline(lang_code)
        
        await callback.message.edit_text(
            text=welcome_text,
            reply_markup=policy_keyboard,
            parse_mode='HTML'
        )
        
        await callback.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_code}")
        
    except Exception as e:
        import logging
        logging.getLogger(__name__).error(f"Error in language selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞")

# --- –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ ---
@router.callback_query(F.data == "policy:accept")
async def handle_policy_accept(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –±–µ–∑ –≤—ã–∑–æ–≤–∞ get_start –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."""
    try:
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –≤ FSM
        await state.update_data(policy_accepted=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–ª–∞–≥ –≤ –ë–î (PG/SQLite), —á—Ç–æ–±—ã middleware –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤–∏–¥–µ–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
        try:
            import os
            database_url = os.getenv("DATABASE_URL", "")
            if database_url and database_url.lower().startswith("postgres"):
                # PostgreSQL (asyncpg)
                import asyncpg
                conn_pg = await asyncpg.connect(database_url)
                try:
                    await conn_pg.execute(
                        """
                        INSERT INTO users(telegram_id, username, first_name, last_name, language_code, policy_accepted)
                        VALUES($1,$2,$3,$4,$5, TRUE)
                        ON CONFLICT (telegram_id) DO UPDATE SET policy_accepted=EXCLUDED.policy_accepted, updated_at=NOW()
                        """,
                        int(callback.from_user.id),
                        (callback.from_user.username or None),
                        (callback.from_user.first_name or None),
                        (callback.from_user.last_name or None),
                        (getattr(callback.from_user, 'language_code', None) or 'ru'),
                    )
                finally:
                    await conn_pg.close()
            else:
                # SQLite –ø—É—Ç—å
                from core.database.db_v2 import db_v2
                conn = db_v2.get_connection()
                try:
                    conn.execute(
                        """
                        INSERT OR IGNORE INTO users(telegram_id, username, first_name, last_name, language_code, policy_accepted)
                        VALUES(?, ?, ?, ?, ?, 1)
                        """,
                        (
                            int(callback.from_user.id),
                            (callback.from_user.username or None),
                            (callback.from_user.first_name or None),
                            (callback.from_user.last_name or None),
                            (getattr(callback.from_user, 'language_code', None) or 'ru'),
                        ),
                    )
                    conn.execute(
                        "UPDATE users SET policy_accepted = 1, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = ?",
                        (int(callback.from_user.id),),
                    )
                    conn.commit()
                finally:
                    try:
                        conn.close()
                    except Exception:
                        pass
        except Exception:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
            pass
        # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
        await callback.answer("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        # –í—ã–∑—ã–≤–∞–µ–º get_start –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
        try:
            from core.handlers.basic import get_start
            from aiogram.types import Message
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ get_start
            fake_message = Message(
                message_id=callback.message.message_id + 1,
                from_user=callback.from_user,
                chat=callback.message.chat,
                date=callback.message.date,
                text="/start"
            )
            
            await get_start(fake_message, bot, state)
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error calling get_start after policy acceptance: {e}")
            
            # Fallback - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                callback.from_user.id, 
                f"‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
    except Exception as e:
        import logging
        logging.getLogger(__name__).error(f"Error in policy acceptance: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–∏—Ç–∏–∫–∏ ---
@router.callback_query(F.data == "policy:view")
async def handle_policy_view(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ FSM
        data = await state.get_data()
        lang = data.get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏
        policy_text = get_text_v2("policy_text", lang)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏
        await callback.message.edit_text(
            text=policy_text,
            reply_markup=get_policy_inline(lang)
        )
        
        await callback.answer("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
        
    except Exception as e:
        import logging
        logging.getLogger(__name__).error(f"Error in policy view: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª–∏—Ç–∏–∫–∏")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö callback (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) ---
@router.callback_query(F.data.in_({"rests_by_district", "rest_near_me", "rests_by_kitchen"}))
async def main_menu_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–±—â–µ–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.answer()


# --- Catch-all (SAFE): –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–π–º—Å–ø–µ–π—Å—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ ---
@router.callback_query(
    ~F.data.startswith("pfsm:") &
    ~F.data.startswith("pc:") &
    ~F.data.startswith("partner_cat:") &
    ~F.data.startswith("partner:") &
    ~F.data.startswith("partner") &
    ~F.data.startswith("act:") &
    ~F.data.startswith("adm:") &
    ~F.data.startswith("mod_") &
    ~F.data.startswith("pg:") &
    ~F.data.startswith("filt:") &
    ~F.data.startswith("ai_agent:") &
    ~F.data.startswith("qr") &
    ~F.data.startswith("gallery:") &
    ~F.data.startswith("catalog:") &
    ~F.data.startswith("lang:set:") &
    ~F.data.startswith("policy:") &
    ~F.data.startswith("city:set:")
)
async def handle_any_callback(callback: CallbackQuery):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö callback_query, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–∞–º."""
    try:
        import logging
        logging.getLogger(__name__).info("[CB] Received callback_query (fallback): %s from user %s", callback.data, callback.from_user.id)
    except Exception:
        pass
    await callback.answer("‚úÖ –ü–æ–ª—É—á–µ–Ω callback")
