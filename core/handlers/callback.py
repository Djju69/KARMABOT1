from aiogram import Bot, types, F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from core.keyboards.inline import regional_restoran, kitchen_keyboard, language_keyboard
from core.utils.geo import find_restaurants  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
from core.utils.locales import get_text
from core.handlers.category_handlers import show_categories  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ö–µ–Ω–¥–ª–µ—Ä

router = Router()

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@router.callback_query(F.data == "rest_near_me")
async def rest_near_me_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "please_send_location"),
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=get_text(lang, "send_location"), request_location=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(F.content_type == types.ContentType.LOCATION)
async def location_handler(message: Message, bot: Bot):
    latitude = message.location.latitude
    longitude = message.location.longitude
    lang = message.from_user.language_code or "en"

    restaurants = find_restaurants(latitude, longitude, radius=2000, lang=lang)

    if not restaurants:
        await bot.send_message(message.chat.id, get_text(lang, "no_places"))
        return

    for rest in restaurants:
        # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, —Å–∫–∏–¥–∫–∞ –∏ —Ç.–¥.
        await bot.send_message(message.chat.id, text=rest["name"])

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º ---
@router.callback_query(F.data == "rests_by_district")
async def rests_by_district_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "choose_district"),
        reply_markup=regional_restoran
    )
    await callback.answer()

# --- –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –∫—É—Ö–Ω–µ ---
@router.callback_query(F.data == "rests_by_kitchen")
async def rests_by_kitchen_handler(callback: CallbackQuery, bot: Bot):
    lang = callback.from_user.language_code or "en"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=get_text(lang, "choose_kitchen"),
        reply_markup=kitchen_keyboard
    )
    await callback.answer()

# --- –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ callback) ---
@router.callback_query(F.data == "show_categories")
async def show_categories_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    lang = (await state.get_data()).get("lang", callback.from_user.language_code or "en")
    await show_categories(callback.message, bot, state)
    await callback.answer()

# --- –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ ---
@router.callback_query(F.data == "change_language")
async def change_language_callback(callback: CallbackQuery):
    text = "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:"
    await callback.message.edit_text(text, reply_markup=language_keyboard)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö callback (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) ---
@router.callback_query(F.data.in_({"rests_by_district", "rest_near_me", "rests_by_kitchen"}))
async def main_menu_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–±—â–µ–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.answer()
