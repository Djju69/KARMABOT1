from aiogram import F, Router, html
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.services.loyalty import loyalty_service
from core.services.referral_service import referral_service
from core.services.qr_code_service import QRCodeService
from core.keyboards.profile import get_profile_keyboard, get_back_to_profile_keyboard

import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("profile"))
@router.callback_query(F.data == "profile")
async def show_profile(update: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.from_user
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            balance = await loyalty_service.get_balance(user_id)
            ref_stats = await referral_service.get_referral_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üë§ {html.escape(user.full_name)}\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: <b>{balance} –±–∞–ª–ª–æ–≤</b>\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref_stats.get('total_referrals', 0)}</b>\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{ref_stats.get('total_earned', 0)} –±–∞–ª–ª–æ–≤</b>\n"
                f"üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: <code>{ref_stats.get('referral_link', '')}</code>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_profile_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(update, CallbackQuery):
                await update.message.edit_text(
                    text,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            else:
                await update.answer(
                    text,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
                
        except Exception as e:
            logger.error(f"Error loading profile data: {e}", exc_info=True)
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if isinstance(update, CallbackQuery):
                await update.message.answer(error_text)
            else:
                await update.answer(error_text)
                
    except Exception as e:
        logger.error(f"Unexpected error in show_profile: {e}", exc_info=True)

@router.callback_query(F.data == "loyalty_history")
async def show_loyalty_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        with db_v2.get_connection() as conn:
            transactions = conn.execute(
                """
                SELECT amount, description, created_at 
                FROM loyalty_transactions 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 10
                """,
                (user_id,)
            ).fetchall()
        
        if not transactions:
            await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        history = ["üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"]
        for tx in transactions:
            amount = tx['amount']
            sign = "‚ûï" if amount > 0 else "‚ûñ"
            history.append(
                f"<b>{tx['created_at'].strftime('%d.%m.%Y %H:%M')}</b> | "
                f"{sign} {abs(amount)} –±–∞–ª–ª–æ–≤\n"
                f"<i>{tx['description']}</i>\n"
                f"{'-'*20}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_profile_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await callback.message.edit_text(
            "\n".join(history),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing loyalty history: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
