from datetime import datetime
from io import BytesIO
from typing import Dict, Any

from aiogram import F, Router, html
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.services.loyalty_service import loyalty_service
from core.services.referral_service import referral_service
from core.services.profile_service import profile_service
from core.services.qr_code_service import qr_code_service
from core.keyboards.profile import (
    get_profile_keyboard,
    get_back_to_profile_keyboard,
    get_qr_codes_keyboard
)
from core.database.db_v2 import db_v2

import logging

logger = logging.getLogger(__name__)
router = Router()

class QRCodeStates(StatesGroup):
    """States for QR code generation flow."""
    waiting_for_points = State()
    confirming_qr_creation = State()

@router.message(Command("profile"))
@router.callback_query(F.data == "profile")
async def show_profile(update: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        user = update.from_user
        user_id = str(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_data = await profile_service.get_user_profile(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            loyalty_stats = await loyalty_service.get_user_stats(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            referral_stats = await referral_service.get_referral_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            balance = loyalty_stats.get('balance', {})
            total_points = balance.get('total_points', 0)
            available_points = balance.get('available_points', 0)
            
            text = (
                f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üë§ {html.escape(user.full_name)}\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: <b>{total_points} –±–∞–ª–ª–æ–≤</b>\n"
                f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_points} –±–∞–ª–ª–æ–≤</b>\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_stats.get('total_referrals', 0)}</b>\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{referral_stats.get('total_earned', 0)} –±–∞–ª–ª–æ–≤</b>\n"
                f"üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: <code>{referral_stats.get('referral_link', '')}</code>\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å: <b>{loyalty_stats.get('level', 1)}</b>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_profile_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(update, CallbackQuery):
                await update.message.edit_text(
                    text,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            else:
                await update.answer(
                    text,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
                
        except Exception as e:
            logger.error(f"Error getting user data: {e}")
            error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if isinstance(update, CallbackQuery):
                await update.answer(error_msg, show_alert=True)
            else:
                await update.answer(error_msg)
                
    except Exception as e:
        logger.error(f"Error in show_profile: {e}")
        if isinstance(update, CallbackQuery):
            await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        else:
            await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "loyalty_history")
async def show_loyalty_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        transactions = await loyalty_service.get_user_transactions(
            user_id=user_id,
            limit=10
        )
        
        if not transactions:
            await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        history = ["üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"]
        for tx in transactions:
            points = tx.get('points', 0)
            sign = "‚ûï" if points > 0 else "‚ûñ"
            created_at = tx.get('created_at', datetime.utcnow())
            if isinstance(created_at, str):
                created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            
            history.append(
                f"<b>{created_at.strftime('%d.%m.%Y %H:%M')}</b> | "
                f"{sign} {abs(points)} –±–∞–ª–ª–æ–≤\n"
                f"<i>{tx.get('description', '–û–ø–µ—Ä–∞—Ü–∏—è')}</i>\n"
                f"{'-'*20}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_profile_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await callback.message.edit_text(
            "\n".join(history),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing loyalty history: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")

@router.callback_query(F.data == "referrals")
async def show_referrals(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        ref_stats = await referral_service.get_referral_stats(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{ref_stats.get('referral_link', '')}</code>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref_stats.get('total_referrals', 0)}</b>\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{ref_stats.get('total_earned', 0)} –±–∞–ª–ª–æ–≤</b>\n"
            f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: <b>{ref_stats.get('referrer_bonus', 100)} –±–∞–ª–ª–æ–≤</b>\n"
            f"üéÅ –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: <b>{ref_stats.get('referee_bonus', 50)} –±–∞–ª–ª–æ–≤</b>\n\n"
            f"üí° <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</i>"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_profile_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing referrals: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö")

@router.callback_query(F.data == "notifications")
async def show_notifications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = await profile_service.get_user_notifications(
            user_id=user_id,
            limit=10,
            unread_only=False
        )
        
        if not notifications:
            text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        else:
            text = "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
            for notif in notifications:
                status = "üî¥" if not notif.get('is_read', False) else "üü¢"
                created_at = notif.get('created_at', datetime.utcnow())
                if isinstance(created_at, str):
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                
                text += (
                    f"{status} <b>{notif.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')}</b>\n"
                    f"<i>{notif.get('message', '')}</i>\n"
                    f"<small>{created_at.strftime('%d.%m.%Y %H:%M')}</small>\n"
                    f"{'-'*20}\n"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_profile_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing notifications: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await profile_service.get_user_settings(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üåê –Ø–∑—ã–∫: <b>{settings.get('language', 'ru')}</b>\n"
            f"üé® –¢–µ–º–∞: <b>{settings.get('preferences', {}).get('theme', 'light')}</b>\n"
            f"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{settings.get('preferences', {}).get('timezone', 'UTC+7')}</b>\n"
            f"üí∞ –í–∞–ª—é—Ç–∞: <b>{settings.get('preferences', {}).get('currency', 'VND')}</b>\n\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            f"üìß Email: {'‚úÖ' if settings.get('notifications', {}).get('email', True) else '‚ùå'}\n"
            f"üì± Push: {'‚úÖ' if settings.get('notifications', {}).get('push', True) else '‚ùå'}\n"
            f"üì± SMS: {'‚úÖ' if settings.get('notifications', {}).get('sms', False) else '‚ùå'}\n\n"
            f"üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</b>\n"
            f"üë§ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {'‚úÖ' if settings.get('privacy', {}).get('show_profile', True) else '‚ùå'}\n"
            f"üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {'‚úÖ' if settings.get('privacy', {}).get('show_activities', False) else '‚ùå'}\n"
            f"üí¨ –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if settings.get('privacy', {}).get('allow_messages', True) else '‚ùå'}\n\n"
            f"üí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏</i>"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_profile_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing settings: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
