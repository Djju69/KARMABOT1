"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ help —Å –∫–Ω–æ–ø–∫–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
import logging
from aiogram import Router, F
from typing import Dict
import time
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.ui.kb_support_ai import kb_support_ai
from core.services.user_service import get_user_role
from core.services.help_service import HelpService
from core.utils.locales_v2 import get_text

logger = logging.getLogger(__name__)
router = Router()


class AIState(StatesGroup):
    waiting_question = State()

# 60-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –æ–∫–Ω–æ AI-—Å–µ—Å—Å–∏–∏ –±–µ–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è FSM
SESSION_TTL_SEC = 60
AI_SESSIONS: Dict[int, int] = {}
MENU_TEXTS = {
    "‚ùì –ü–æ–º–æ—â—å",
    "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "‚óÄÔ∏è –ù–∞–∑–∞–¥",
    "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
    "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ",
    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
    "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
}

def _generate_ai_response_text(q: str) -> str:
    text = (q or "").strip().lower()
    if any(k in text for k in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "hi", "hello", "hey", "–π–æ—É", "—Ö–∞–∏"]):
        return (
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞–≥–µ–Ω—Ç Karma System. –ü–æ–º–æ–≥—É —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, QR –∏ –∫–∞—Ä–º–æ–π. "
            "–°–ø—Ä–æ—Å–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏; –∫–∞–∫ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã; –≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å QR."
        )
    if ("–∫–∞—Ä—Ç–∞" in text or "–ª–æ—è–ª—å–Ω" in text):
        if any(k in text for k in ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–æ–º–∞–ª", "–Ω–µ–∞–∫—Ç–∏–≤", "–Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è", "–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è", "–æ—à–∏–±"]):
            return (
                "–ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∏ –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
                "–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ /start. "
                "–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –¥–∞–ª—å—à–µ."
            )
        return (
            "–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. "
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º ‚Äî –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ QR. "
            "–ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë —Å—é–¥–∞, –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å."
        )
    if any(k in text for k in ["–±–∞–ª–ª", "–æ—á–∫–∏", "–∫–∞—Ä–º", "–Ω–∞—á–∏—Å–ª", "–ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª", "–Ω–∞—á–∏—Å–ª–∏—Ç—å"]):
        return (
            "–ë–∞–ª–ª—ã/–∫–∞—Ä–º–∞ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ QR, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à QR –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ ‚Äî —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
            "–ï—Å–ª–∏ –±–∞–ª–ª—ã –Ω–µ –ø—Ä–∏—à–ª–∏ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ."
        )
    if any(k in text for k in ["—Å–∫–∏–¥", "qr", "–∫—É–∞—Ä–∫–æ–¥", "–∫—å—é–∞—Ä", "–∫–æ–¥"]):
        return (
            "–°–∫–∏–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ QR –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö. "
            "–û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ª—É—á–∏—Ç–µ QR –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. "
            "–ö–∞–∂–¥—ã–π QR —Ä–∞–∑–æ–≤—ã–π. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        )
    if any(k in text for k in ["–ø–∞—Ä—Ç–Ω–µ—Ä", "–ø–∞—Ä—Ç–Ω—ë—Ä", "–±–∏–∑–Ω–µ—Å", "–∑–∞–≤–µ–¥–µ–Ω", "–ø–æ–¥–∫–ª—é—á", "–≤–ª–∞–¥–µ–ª–µ—Ü"]):
        return (
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É. "
            "–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ QR-–ø—Ä–æ–¥–∞–∂–µ. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–æ—Ä–æ–¥, –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
    return (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å: ‚Äò{q}‚Äô. "
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, QR, –∫–∞—Ä–º–æ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤. "
        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ ‚Äî –¥–∞–º —Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º."
    )


@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –∫–Ω–æ–ø–∫–æ–π AI"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = await get_user_role(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –¥–ª—è —Ä–æ–ª–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        help_service = HelpService()
        base_text = await help_service.get_help_message(message.from_user.id)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç –∏–∑ HelpService (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ /static/docs)
        text = base_text

        # –ö–Ω–æ–ø–∫–∞ AI –∞–≥–µ–Ω—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]])
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb_support_ai()
        )


@router.message(F.text.casefold() == "–ø–æ–º–æ—â—å")
async def txt_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ø–æ–º–æ—â—å' —Å –∫–Ω–æ–ø–∫–æ–π AI"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = await get_user_role(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –¥–ª—è —Ä–æ–ª–∏
        help_service = HelpService()
        base_text = await help_service.get_help_message(message.from_user.id)
        text = base_text
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]])
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in help text: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb_support_ai()
        )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def txt_help_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚ùì –ü–æ–º–æ—â—å' —Å –∫–Ω–æ–ø–∫–æ–π AI"""
    try:
        logger.info(f"üîç Help button pressed by user {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = await get_user_role(message.from_user.id)
        logger.info(f"üîç User role: {user_role}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
        help_service = HelpService()
        base_text = await help_service.get_help_message(message.from_user.id)
        text = base_text
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞", callback_data="ai_agent:start")]])
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        logger.info("‚úÖ Help message sent successfully")
        
    except Exception as e:
        logger.error(f"Error in help button: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb_support_ai()
        )


# AI agent callbacks
@router.callback_query(F.data.startswith("ai_agent:"))
async def ai_agent_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data.split(":", 1)[1]
    if action == "start":
        ai_text = (
            "ü§ñ <b>AI –ê–≥–µ–Ω—Ç Karma System</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å:\n"
            "‚Ä¢ üéØ –ü–æ–∏—Å–∫–æ–º —Å–∫–∏–¥–æ–∫\n"
            "‚Ä¢ üìç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π\n"
            "‚Ä¢ üí∞ –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –∫–∞—Ä–º–µ\n"
            "‚Ä¢ üè™ –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ai_agent:ask")],
            [InlineKeyboardButton(text="üè™ –ù–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è", callback_data="ai_agent:find_places")],
            [InlineKeyboardButton(text="üí∞ –°–æ–≤–µ—Ç—ã –ø–æ karma", callback_data="ai_agent:karma_tips")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help:back_to_menu")],
        ])
        await callback.message.edit_text(ai_text, reply_markup=kb, parse_mode="HTML")
    elif action == "ask":
        await state.set_state(AIState.waiting_question)
        # –°—Ç–∞—Ä—Ç—É–µ–º 60-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –æ–∫–Ω–æ AI-—Å–µ—Å—Å–∏–∏
        AI_SESSIONS[user_id] = int(time.time()) + SESSION_TTL_SEC
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ AI", callback_data="ai_agent:start")]])
        await callback.message.edit_text("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ—Ç–≤–µ—á—É!", reply_markup=kb)
    elif action == "find_places":
        places_text = (
            "üè™ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
            "‚Ä¢ üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã\n‚Ä¢ üßñ‚Äç‚ôÄÔ∏è SPA\n‚Ä¢ üèçÔ∏è –ë–∞–π–∫–∏\n‚Ä¢ üè® –û—Ç–µ–ª–∏\n‚Ä¢ üö∂‚Äç‚ôÇÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏\n‚Ä¢ üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω—ã"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ AI", callback_data="ai_agent:start")]])
        await callback.message.edit_text(places_text, reply_markup=kb, parse_mode="HTML")
    elif action == "karma_tips":
        tips = (
            "üí∞ <b>–°–æ–≤–µ—Ç—ã –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é Karma</b>\n\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: +5\n‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã: +25\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: +50\n‚Ä¢ QR-–∫–æ–¥—ã: +1‚Äì10\n"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ AI", callback_data="ai_agent:start")]])
        await callback.message.edit_text(tips, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.message(AIState.waiting_question)
async def process_ai_question(message: Message, state: FSMContext):
    q = (message.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–∞–ª —è–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º AI-—Ä–µ–∂–∏–º –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if q.startswith('/') or q in {"‚ùì –ü–æ–º–æ—â—å", "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "‚óÄÔ∏è –ù–∞–∑–∞–¥", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"}:
        await state.clear()
        return

    # –ü—Ä–æ—Å—Ç—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ä—É—Å—Å–∫–∏–π), 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
    text = q.lower()
    response = None

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(k in text for k in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "hi", "hello", "hey", "–π–æ—É", "—Ö–∞–∏"]):
        response = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞–≥–µ–Ω—Ç Karma System. –ü–æ–º–æ–≥—É —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, QR –∏ –∫–∞—Ä–º–æ–π. "
            "–°–ø—Ä–æ—Å–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏; –∫–∞–∫ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã; –≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å QR."
        )

    # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    if response is None and ("–∫–∞—Ä—Ç–∞" in text or "–ª–æ—è–ª—å–Ω" in text):
        if any(k in text for k in ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–æ–º–∞–ª", "–Ω–µ–∞–∫—Ç–∏–≤", "–Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è", "–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è", "–æ—à–∏–±"]):
            response = (
                "–ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∏ –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É. "
                "–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ /start. "
                "–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –¥–∞–ª—å—à–µ."
            )
        else:
            response = (
                "–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. "
                "–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º ‚Äî –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ QR. "
                "–ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë —Å—é–¥–∞, –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å."
            )

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤/–∫–∞—Ä–º—ã
    if response is None and any(k in text for k in ["–±–∞–ª–ª", "–æ—á–∫–∏", "–∫–∞—Ä–º", "–Ω–∞—á–∏—Å–ª", "–ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª", "–Ω–∞—á–∏—Å–ª–∏—Ç—å"]):
        response = (
            "–ë–∞–ª–ª—ã/–∫–∞—Ä–º–∞ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ QR, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à QR –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ ‚Äî —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
            "–ï—Å–ª–∏ –±–∞–ª–ª—ã –Ω–µ –ø—Ä–∏—à–ª–∏ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ."
        )

    # –°–∫–∏–¥–∫–∏ –∏ QR
    if response is None and any(k in text for k in ["—Å–∫–∏–¥", "qr", "–∫—É–∞—Ä–∫–æ–¥", "–∫—å—é–∞—Ä", "–∫–æ–¥"]):
        response = (
            "–°–∫–∏–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ QR –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö. "
            "–û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ª—É—á–∏—Ç–µ QR –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. "
            "–ö–∞–∂–¥—ã–π QR —Ä–∞–∑–æ–≤—ã–π. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        )

    # –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    if response is None and any(k in text for k in ["–ø–∞—Ä—Ç–Ω–µ—Ä", "–ø–∞—Ä—Ç–Ω—ë—Ä", "–±–∏–∑–Ω–µ—Å", "–∑–∞–≤–µ–¥–µ–Ω", "–ø–æ–¥–∫–ª—é—á", "–≤–ª–∞–¥–µ–ª–µ—Ü"]):
        response = (
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É. "
            "–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ QR-–ø—Ä–æ–¥–∞–∂–µ. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–æ—Ä–æ–¥, –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if response is None:
        response = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å: ‚Äò{q}‚Äô. "
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ —Å–∫–∏–¥–∫–∞–º–∏, QR, –∫–∞—Ä–º–æ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤. "
            "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ ‚Äî –¥–∞–º —Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º."
        )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ai_agent:ask")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ AI", callback_data="ai_agent:start")],
        ]
    )
    await message.answer(f"ü§ñ <b>AI –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{response}", reply_markup=kb, parse_mode="HTML")
    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –º–µ–Ω—é –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–º
    AI_SESSIONS[message.from_user.id] = int(time.time()) + SESSION_TTL_SEC
    await state.clear()


# Follow-up: –ª—é–±—ã–µ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é) –≤ –æ–∫–Ω–µ AI-—Å–µ—Å—Å–∏–∏
@router.message(
F.text,
lambda message: (
    AI_SESSIONS.get(message.from_user.id, 0) > int(time.time())
    and not ((message.text or "").startswith("/") or (message.text or "") in MENU_TEXTS)
),
)
async def ai_followup_session(message: Message, state: FSMContext):
    try:
        text = (message.text or "")
        # –û—Ç–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text.startswith('/') or text in MENU_TEXTS:
            return
        exp = AI_SESSIONS.get(message.from_user.id, 0)
        if int(time.time()) > int(exp or 0):
            return  # –æ–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        response = _generate_ai_response_text(text)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ai_agent:ask")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ AI", callback_data="ai_agent:start")],
            ]
        )
        await message.answer(f"ü§ñ <b>AI –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{response}", reply_markup=kb, parse_mode="HTML")
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–∫–Ω–æ –µ—â—ë –Ω–∞ TTL
        AI_SESSIONS[message.from_user.id] = int(time.time()) + SESSION_TTL_SEC
    except Exception as e:
        logger.error(f"AI follow-up error: {e}", exc_info=True)
