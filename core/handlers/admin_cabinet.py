"""
Admin cabinet: inline menu and callbacks under adm:* namespace.
Conditioned by FEATURE_MODERATION and admin whitelist (settings.bots.admin_id for MVP).
"""
import logging
import logging
import contextlib
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from core.settings import settings
from core.utils.locales_v2 import get_text, translations
from core.services import admins_service, profile_service
from core.keyboards.inline_v2 import (
    get_admin_cabinet_inline, 
    get_superadmin_inline, 
    get_superadmin_delete_inline
)
from ..keyboards.reply_v2 import get_main_menu_reply, get_admin_keyboard, get_superadmin_keyboard
from ..database.db_v2 import db_v2

logger = logging.getLogger(__name__)

router = Router(name=__name__)

# Simple in-memory rate limit for search (per admin)
_search_last_at: dict[int, float] = {}
import time

# Simple anti-spam for superadmin prompt flows
_su_last_at: dict[int, float] = {}

def _su_allowed(user_id: int, window: float = 2.5) -> bool:
    now = time.time()
    last = _su_last_at.get(user_id, 0.0)
    if now - last < window:
        return False
    _su_last_at[user_id] = now
    return True

def _search_allowed(user_id: int, window: float = 2.5) -> bool:
    now = time.time()
    last = _search_last_at.get(user_id, 0.0)
    if now - last < window:
        return False
    _search_last_at[user_id] = now
    return True

def _search_keyboard() -> 'InlineKeyboardMarkup':
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –í –æ—á–µ—Ä–µ–¥–∏", callback_data="adm:search:status:pending"),
         InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã", callback_data="adm:search:status:published")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã", callback_data="adm:search:status:rejected"),
         InlineKeyboardButton(text="üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20", callback_data="adm:search:recent")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:queue")],
    ])

def _queue_nav_keyboard(page: int, has_prev: bool, has_next: bool) -> 'InlineKeyboardMarkup':
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    row = []
    if has_prev:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"adm:q:page:{page-1}"))
    row.append(InlineKeyboardButton(text=f"{page+1}", callback_data="noop"))
    if has_next:
        row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"adm:q:page:{page+1}"))
    return InlineKeyboardMarkup(inline_keyboard=[row, [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", callback_data="adm:search")]])

def _build_queue_list_buttons(cards: list[dict], page: int) -> 'InlineKeyboardMarkup':
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    rows: list[list[InlineKeyboardButton]] = []
    for c in cards:
        cid = int(c.get('id'))
        title = (c.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')
        rows.append([InlineKeyboardButton(text=f"üîé #{cid} ¬∑ {title[:40]}", callback_data=f"adm:q:view:{cid}:{page}")])
    if not rows:
        rows = [[]]
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ö –º–µ–Ω—é", callback_data="adm:queue")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _build_queue_list_text(cards: list[dict], page: int, page_size: int, total: int) -> str:
    start = page * page_size + 1
    end = min((page + 1) * page_size, total)
    lines = [f"üóÇÔ∏è –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {start}‚Äì{end} –∏–∑ {total}"]
    for c in cards:
        lines.append(f"‚Ä¢ #{c.get('id')} ‚Äî {(c.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')} ‚Äî {c.get('category_name') or ''}")
    return "\n".join(lines)

async def _render_queue_page(message_or_cbmsg, admin_id: int, page: int, *, edit: bool = False):
    PAGE_SIZE = 5
    logger.info("admin.queue_render: admin=%s page=%s", admin_id, page)
    with db_v2.get_connection() as conn:
        total = int(conn.execute("SELECT COUNT(*) FROM cards_v2 WHERE status = 'pending' ").fetchone()[0])
        offset = max(page, 0) * PAGE_SIZE
        cur = conn.execute(
            """
            SELECT c.id, c.title, cat.name as category_name
            FROM cards_v2 c
            JOIN categories_v2 cat ON c.category_id = cat.id
            WHERE c.status = 'pending'
            ORDER BY c.created_at ASC
            LIMIT ? OFFSET ?
            """,
            (PAGE_SIZE, offset),
        )
        cards = [dict(r) for r in cur.fetchall()]
    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total
    if total == 0:
        text = "‚úÖ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
        kb = _queue_nav_keyboard(page=0, has_prev=False, has_next=False)
        if edit:
            try:
                await message_or_cbmsg.edit_text(text, reply_markup=kb)
            except Exception:
                await message_or_cbmsg.answer(text, reply_markup=kb)
        else:
            await message_or_cbmsg.answer(text, reply_markup=kb)
        return
    if not cards:
        text = "üì≠ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç."
        kb = _queue_nav_keyboard(page=page, has_prev=has_prev, has_next=has_next)
        if edit:
            try:
                await message_or_cbmsg.edit_text(text, reply_markup=kb)
            except Exception:
                await message_or_cbmsg.answer(text, reply_markup=kb)
        else:
            await message_or_cbmsg.answer(text, reply_markup=kb)
        return
    text = _build_queue_list_text(cards, page=page, page_size=PAGE_SIZE, total=total)
    try:
        if edit:
            await message_or_cbmsg.edit_text(text, reply_markup=_build_queue_list_buttons(cards, page=page))
        else:
            await message_or_cbmsg.answer(text, reply_markup=_build_queue_list_buttons(cards, page=page))
    except Exception:
        await message_or_cbmsg.answer(text, reply_markup=_build_queue_list_buttons(cards, page=page))
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message_or_cbmsg.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=_queue_nav_keyboard(page=page, has_prev=has_prev, has_next=has_next))

def _build_card_view_text(card: dict) -> str:
    lines = [f"üîç –ö–∞—Ä—Ç–æ—á–∫–∞ #{card['id']}"]
    lines.append(f"üìù {card.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'}")
    if card.get('category_name'):
        lines.append(f"üìÇ {card['category_name']}")
    if card.get('partner_name'):
        lines.append(f"üë§ {card['partner_name']}")
    if card.get('description'):
        lines.append(f"üìÑ {card['description']}")
    if card.get('contact'):
        lines.append(f"üìû {card['contact']}")
    if card.get('address'):
        lines.append(f"üìç {card['address']}")
    if card.get('discount_text'):
        lines.append(f"üé´ {card['discount_text']}")
    return "\n".join(lines)

def _build_card_view_kb(card_id: int, page: int):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"adm:q:approve:{card_id}:{page}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm:q:reject:{card_id}:{page}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"adm:q:del:{card_id}:{page}"),
         InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"adm:q:page:{page}")],
    ])

def _format_cards_rows(rows) -> str:
    lines = ["üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–¥–æ 20):"]
    if not rows:
        lines.append("(–ø—É—Å—Ç–æ)")
        return "\n".join(lines)
    for r in rows:
        title = r.get('title') or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'
        status = r.get('status') or ''
        cid = r.get('id')
        cat = r.get('category_name') or ''
        lines.append(f"‚Ä¢ #{cid} ‚Äî {title} ‚Äî {status} ‚Äî {cat}")
    return "\n".join(lines)


@router.message(Command("admin"))
async def open_admin_cabinet(message: Message, bot: Bot, state: FSMContext):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"open_admin_cabinet called by user {message.from_user.id}")
        logger.info(f"Moderation feature enabled: {settings.features.moderation}")
        
        if not settings.features.moderation:
            logger.warning("Moderation feature is disabled")
            await message.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        is_admin = await admins_service.is_admin(message.from_user.id)
        logger.info(f"User {message.from_user.id} is admin: {is_admin}")
        
        if not is_admin:
            logger.warning(f"Access denied for user {message.from_user.id}")
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
            
        lang = await profile_service.get_lang(message.from_user.id)
        logger.info(f"User language: {lang}")
        
        # Top-level: use Reply keyboard (superadmin has crown in main menu; here use dedicated keyboard)
        is_superadmin = (int(message.from_user.id) == int(settings.bots.admin_id))
        logger.info(f"Is superadmin: {is_superadmin}, admin_id: {settings.bots.admin_id}")
        
        kb = get_superadmin_keyboard(lang) if is_superadmin else get_admin_keyboard(lang)
        
        # Debug: Log the admin_cabinet_title text
        admin_title = get_text('admin_cabinet_title', lang)
        logger.info(f"Admin title text: {admin_title}")
        
        response_text = f"{admin_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        logger.info(f"Full response text: {response_text}")
        
        logger.info(f"Sending response with keyboard: {kb}")
        await message.answer(
            response_text,
            reply_markup=kb,
        )
        logger.info("Response sent successfully")
        
    except Exception as e:
        logger.error(f"Error in open_admin_cabinet: {e}", exc_info=True)
        # Re-raise to see the full traceback in test output
        raise
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- Inline callbacks ---
@router.message(F.text == "üëë –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç")
async def open_admin_cabinet_by_button(message: Message, bot: Bot, state: FSMContext):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    try:
        if not settings.features.moderation:
            await message.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        if not await admins_service.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
            
        lang = await profile_service.get_lang(message.from_user.id)
        kb = get_superadmin_keyboard(lang) if (message.from_user.id == settings.bots.admin_id) else get_admin_keyboard(lang)
        await message.answer(
            f"{get_text('admin_cabinet_title', lang)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=kb,
        )
    except Exception as e:
        logger.error(f"Error in open_admin_cabinet_by_button: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "adm:back")
async def admin_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    try:
        lang = await profile_service.get_lang(callback.from_user.id)
        await callback.message.edit_text(get_text('main_menu_title', lang))
        await callback.message.answer(
            get_text('main_menu_title', lang), 
            reply_markup=get_main_menu_reply(lang)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in admin_back: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- Reply-based admin menu entries ---
@router.message(F.text.in_([t.get('admin_menu_queue', '') for t in translations.values()]))
async def admin_menu_queue_entry(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    try:
        if not settings.features.moderation:
            await message.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        if not await admins_service.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
            
        await _render_queue_page(message, message.from_user.id, 0)
    except Exception as e:
        logger.error(f"Error in admin_menu_queue_entry: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.in_([t.get('admin_menu_reports', '') for t in translations.values()]))
async def admin_menu_reports_entry(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    try:
        if not settings.features.moderation:
            await message.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        if not await admins_service.is_admin(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
            
        lang = await profile_service.get_lang(message.from_user.id)
        with db_v2.get_connection() as conn:
            cur = conn.execute("""
                SELECT status, COUNT(*) as cnt
                FROM cards_v2
                GROUP BY status
            """)
            by_status = {row[0] or 'unknown': int(row[1]) for row in cur.fetchall()}

            cur = conn.execute("SELECT COUNT(*) FROM cards_v2")
            total_cards = int(cur.fetchone()[0])

            cur = conn.execute("SELECT COUNT(*) FROM partners_v2")
            total_partners = int(cur.fetchone()[0])

            try:
                cur = conn.execute(
                    """
                    SELECT action, COUNT(*) as cnt
                    FROM moderation_log
                    WHERE created_at >= datetime('now','-7 days')
                    GROUP BY action
                    """
                )
                recent_actions = {row[0]: int(row[1]) for row in cur.fetchall()}
            except Exception:
                recent_actions = {}

        lines = [
            "üìä –û—Ç—á—ë—Ç—ã (—Å–≤–æ–¥–∫–∞)",
            f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}",
            f"–í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {total_partners}",
            "",
            "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:",
            f"‚è≥ pending: {by_status.get('pending', 0)}",
            f"‚úÖ published: {by_status.get('published', 0)}",
            f"‚ùå rejected: {by_status.get('rejected', 0)}",
            f"üóÇÔ∏è archived: {by_status.get('archived', 0)}",
            f"üìù draft: {by_status.get('draft', 0)}",
        ]
        if recent_actions:
            lines += [
                "",
                "–ó–∞ 7 –¥–Ω–µ–π:",
                *[f"‚Ä¢ {k}: {v}" for k, v in recent_actions.items()],
            ]
        text = "\n".join(lines)
        # Keep user in reply-based admin menu
        kb = get_superadmin_keyboard(lang) if (message.from_user.id == settings.bots.admin_id) else get_admin_keyboard(lang)
        await message.answer(text, reply_markup=kb)
    except Exception as e:
        logger.error(f"Error in admin_menu_reports_entry: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.in_([t.get('back_to_main_menu', '') for t in translations.values()]))
async def admin_menu_back_to_main(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    try:
        lang = await profile_service.get_lang(message.from_user.id)
        await message.answer(
            get_text('main_menu_title', lang), 
            reply_markup=get_main_menu_reply(lang)
        )
    except Exception as e:
        logger.error(f"Error in admin_menu_back_to_main: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "adm:su:del")
async def su_menu_delete(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if not _is_super_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        lang = await profile_service.get_lang(callback.from_user.id)
        try:
            await callback.message.edit_text(
                "üóë –£–¥–∞–ª–µ–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", 
                reply_markup=get_superadmin_delete_inline(lang)
            )
        except Exception:
            await callback.message.answer(
                "üóë –£–¥–∞–ª–µ–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", 
                reply_markup=get_superadmin_delete_inline(lang)
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in su_menu_delete: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


@router.callback_query(F.data == "adm:queue")
async def admin_queue(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        await _render_queue_page(callback.message, callback.from_user.id, page=0, edit=True)
    except Exception as e:
        logger.error(f"Error in admin_queue: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    finally:
        with contextlib.suppress(Exception):
            await callback.answer()

@router.callback_query(F.data.startswith("adm:q:page:"))
async def admin_queue_page(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        try:
            page = int(callback.data.split(":")[3])
            await _render_queue_page(callback.message, callback.from_user.id, page=page, edit=True)
        except (IndexError, ValueError) as e:
            logger.error(f"Invalid page number in callback data: {callback.data}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        except Exception as e:
            raise e
    except Exception as e:
        logger.error(f"Error in admin_queue_page: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

@router.callback_query(F.data.startswith("adm:q:view:"))
async def admin_queue_view(callback: CallbackQuery) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        try:
            parts = callback.data.split(":")
            if len(parts) < 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
                
            card_id = int(parts[3])
            page = int(parts[4])
            
            card = db_v2.get_card_by_id(card_id)
            if not card:
                await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                await _render_queue_page(callback.message, callback.from_user.id, page=page, edit=True)
                return
                
            text = _build_card_view_text(card)
            try:
                await callback.message.edit_text(
                    text, 
                    reply_markup=_build_card_view_kb(card_id, page)
                )
            except Exception as e:
                logger.warning(f"Failed to edit message, sending new one: {e}")
                await callback.message.answer(
                    text, 
                    reply_markup=_build_card_view_kb(card_id, page)
                )
            
            await callback.answer()
            
        except (IndexError, ValueError) as e:
            logger.error(f"Invalid callback data format: {callback.data}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in admin_queue_approve: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


async def _notify_partner_about_approval(bot: Bot, card_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏."""
    try:
        with db_v2.get_connection() as conn:
            cur = conn.execute("""
                SELECT c.title, p.tg_user_id
                FROM cards_v2 c 
                JOIN partners_v2 p ON c.partner_id = p.id
                WHERE c.id = ?
            """, (card_id,))
            row = cur.fetchone()
            
            if row and row['tg_user_id'] and str(row['tg_user_id']).isdigit():
                try:
                    await bot.send_message(
                        int(row['tg_user_id']), 
                        f"‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n#{card_id} ‚Äî {row['title']}"
                    )
                except Exception as e:
                    logger.error(
                        f"Failed to send notification to partner {row['tg_user_id']} "
                        f"about approval of card {card_id}: {e}"
                    )
    except Exception as e:
        logger.error(f"Error in _notify_partner_about_approval for card {card_id}: {e}")

@router.callback_query(F.data.startswith("adm:q:del:confirm:"))
async def admin_queue_delete(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        try:
            parts = callback.data.split(":")
            if len(parts) < 6:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
                
            card_id = int(parts[4])
            page = int(parts[5])
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            ok = db_v2.delete_card(card_id)
            logger.info(
                "admin.delete: moderator=%s card=%s ok=%s", 
                callback.from_user.id, 
                card_id, 
                ok
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
            await _render_queue_page(callback.message, callback.from_user.id, page=page, edit=True)
            await callback.answer("üóë –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=False)
            
        except (IndexError, ValueError) as e:
            logger.error(f"Invalid callback data format: {callback.data}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in admin_queue_delete: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


@router.callback_query(F.data == "adm:search")
async def admin_search(callback: CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        lang = await profile_service.get_lang(callback.from_user.id)
        text = (
            f"{get_text('admin_cabinet_title', lang)}\n\n"
            f"{get_text('admin_hint_search', lang)}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
        try:
            await callback.message.edit_text(
                text, 
                reply_markup=_search_keyboard()
            )
        except Exception as e:
            logger.warning(f"Failed to edit message, sending new one: {e}")
            await callback.message.answer(
                text, 
                reply_markup=_search_keyboard()
            )
            
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_search: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


@router.callback_query(F.data.startswith("adm:search:status:"))
async def admin_search_by_status(callback: CallbackQuery) -> None:
    """
    –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        if not _search_allowed(callback.from_user.id):
            await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º‚Ä¶", show_alert=False)
            return
            
        try:
            status = callback.data.split(":")[-1]
            if not status:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
                
            with db_v2.get_connection() as conn:
                cur = conn.execute(
                    """
                    SELECT c.id, c.title, c.status, cat.name as category_name
                    FROM cards_v2 c
                    JOIN categories_v2 cat ON c.category_id = cat.id
                    WHERE c.status = ?
                    ORDER BY c.updated_at DESC
                    LIMIT 20
                    """,
                    (status,)
                )
                rows = [dict(r) for r in cur.fetchall()]
                
            if not rows:
                text = f"üîç –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = _format_cards_rows(rows)
                
            try:
                await callback.message.edit_text(
                    text, 
                    reply_markup=_search_keyboard()
                )
            except Exception as e:
                logger.warning(f"Failed to edit message, sending new one: {e}")
                await callback.message.answer(
                    text, 
                    reply_markup=_search_keyboard()
                )
                
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in admin_search_by_status: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Unexpected error in admin_search_by_status: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


@router.callback_query(F.data == "adm:search:recent")
async def admin_search_recent(callback: CallbackQuery) -> None:
    """
    –ü–æ–∏—Å–∫ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        if not settings.features.moderation:
            await callback.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        if not _search_allowed(callback.from_user.id):
            await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º‚Ä¶", show_alert=False)
            return
            
        try:
            with db_v2.get_connection() as conn:
                cur = conn.execute(
                    """
                    SELECT c.id, c.title, c.status, cat.name as category_name
                    FROM cards_v2 c
                    JOIN categories_v2 cat ON c.category_id = cat.id
                    ORDER BY c.created_at DESC
                    LIMIT 20
                    """
                )
                rows = [dict(r) for r in cur.fetchall()]
                
            if not rows:
                text = "üîç –ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = _format_cards_rows(rows)
                
            try:
                await callback.message.edit_text(
                    text, 
                    reply_markup=_search_keyboard()
                )
            except Exception as e:
                logger.warning(f"Failed to edit message, sending new one: {e}")
                await callback.message.answer(
                    text, 
                    reply_markup=_search_keyboard()
                )
                
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in admin_search_recent: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Unexpected error in admin_search_recent: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


@router.callback_query(F.data == "adm:reports")
async def admin_reports(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        if not await admins_service.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
            
        lang = await profile_service.get_lang(callback.from_user.id)
        
        try:
            with db_v2.get_connection() as conn:
                # Cards by status
                cur = conn.execute("""
                    SELECT status, COUNT(*) as cnt
                    FROM cards_v2
                    GROUP BY status
                """)
                by_status = {row[0] or 'unknown': int(row[1]) for row in cur.fetchall()}

                # Totals
                cur = conn.execute("SELECT COUNT(*) FROM cards_v2")
                total_cards = int(cur.fetchone()[0])

                cur = conn.execute("SELECT COUNT(*) FROM partners_v2")
                total_partners = int(cur.fetchone()[0])

                # Recent moderation actions (7 days)
                try:
                    cur = conn.execute(
                        """
                        SELECT action, COUNT(*) as cnt
                        FROM moderation_log
                        WHERE created_at >= datetime('now','-7 days')
                        GROUP BY action
                        """
                    )
                    recent_actions = {row[0]: int(row[1]) for row in cur.fetchall()}
                except Exception as e:
                    logger.warning(f"Failed to get recent actions: {e}")
                    recent_actions = {}

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
            lines = [
                "üìä <b>–û—Ç—á—ë—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ</b>",
                "",
                f"<b>–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫:</b> {total_cards}",
                f"<b>–í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:</b> {total_partners}",
                "",
                "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>",
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {by_status.get('pending', 0)}",
                f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {by_status.get('published', 0)}",
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {by_status.get('rejected', 0)}",
                f"üóÇÔ∏è –í –∞—Ä—Ö–∏–≤–µ: {by_status.get('archived', 0)}",
                f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {by_status.get('draft', 0)}",
            ]
            
            if recent_actions:
                lines += [
                    "",
                    "<b>–î–µ–π—Å—Ç–≤–∏—è –∑–∞ 7 –¥–Ω–µ–π:</b>",
                    *[f"‚Ä¢ {k}: {v}" for k, v in recent_actions.items()],
                ]
                
            text = "\n".join(lines)
            
            try:
                await callback.message.edit_text(
                    text, 
                    reply_markup=get_admin_cabinet_inline(lang),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"Failed to edit message, sending new one: {e}")
                await callback.message.answer(
                    text, 
                    reply_markup=get_admin_cabinet_inline(lang),
                    parse_mode="HTML"
                )
                
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error generating reports: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Unexpected error in admin_reports: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )


def get_admin_cabinet_router() -> Router:
    """Return admin cabinet router (enabled with moderation feature)."""
    if settings.features.moderation:
        return router
    return Router()


# --- Superadmin inline UI & flows (no slash commands) ---
def _is_super_admin(user_id: int) -> bool:
    return int(user_id) == int(settings.bots.admin_id)


@router.callback_query(F.data == "adm:su")
async def su_menu(callback: CallbackQuery):
    if not _is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    lang = await profile_service.get_lang(callback.from_user.id)
    try:
        await callback.message.edit_text("üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=get_superadmin_inline(lang))
    except Exception:
        await callback.message.answer("üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=get_superadmin_inline(lang))
    await callback.answer()


# Simple in-memory state for prompt flows
_su_pending: dict[int, dict] = {}


def _su_set(uid: int, action: str):
    _su_pending[uid] = {"action": action, "ts": time.time()}


def _su_pop(uid: int) -> dict | None:
    return _su_pending.pop(uid, None)


@router.callback_query(F.data.startswith("adm:su:"))
async def su_action(callback: CallbackQuery):
    if not _is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    # Simple anti-spam window for opening prompt
    if not _su_allowed(callback.from_user.id):
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶", show_alert=False)
        return
    action = callback.data.split(":", 2)[-1]
    prompts = {
        "ban": "–í–≤–µ–¥–∏—Ç–µ: <tg_id> [–ø—Ä–∏—á–∏–Ω–∞]",
        "unban": "–í–≤–µ–¥–∏—Ç–µ: <tg_id>",
        "deluser": "–û–ø–∞—Å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ: <tg_id> –î–ê",
        "delcard": "–û–ø–∞—Å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ: <card_id> –î–ê",
        "delcards_by_tg": "–û–ø–∞—Å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ: <partner_tg_id> –î–ê",
        "delallcards": "–û–ø–∞—Å–Ω–æ! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: –î–ê",
        "addcard": "–í–≤–µ–¥–∏—Ç–µ: <partner_tg_id> <category_slug> <title> [–æ–ø–∏—Å–∞–Ω–∏–µ]",
    }
    if action not in prompts:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=False)
        return
    _su_set(callback.from_user.id, action)
    await callback.message.answer("‚úçÔ∏è " + prompts[action])
    await callback.answer()


@router.message()
async def su_message_prompt_handler(message: Message):
    # Handle only pending superadmin prompts
    st = _su_pop(message.from_user.id)
    if not st:
        return  # not for us
    if not _is_super_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω")
        return
    # Simple anti-spam window for submitting prompt
    if not _su_allowed(message.from_user.id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π‚Ä¶")
        return
    action = st.get("action")
    text = (message.text or "").strip()
    try:
        if action == "ban":
            parts = text.split(maxsplit=1)
            if not parts or not parts[0].isdigit():
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <tg_id> [–ø—Ä–∏—á–∏–Ω–∞]")
                return
            uid = int(parts[0])
            reason = parts[1] if len(parts) > 1 else ""
            db_v2.ban_user(uid, reason)
            await message.answer(f"üö´ –ó–∞–±–∞–Ω–µ–Ω: {uid}. {('–ü—Ä–∏—á–∏–Ω–∞: '+reason) if reason else ''}")
        elif action == "unban":
            if not text.isdigit():
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <tg_id>")
                return
            uid = int(text)
            db_v2.unban_user(uid)
            await message.answer(f"‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: {uid}")
        elif action == "deluser":
            parts = text.split()
            if len(parts) < 2 or not parts[0].isdigit() or parts[-1].upper() != "–î–ê":
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <tg_id> –î–ê")
                return
            uid = int(parts[0])
            stats = db_v2.delete_user_cascade_by_tg_id(uid)
            await message.answer(
                "üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
                f"partners_v2: {stats.get('partners_v2',0)}, cards_v2: {stats.get('cards_v2',0)}, qr_codes_v2: {stats.get('qr_codes_v2',0)}, moderation_log: {stats.get('moderation_log',0)}\n"
                f"loyalty_wallets: {stats.get('loyalty_wallets',0)}, loy_spend_intents: {stats.get('loy_spend_intents',0)}, user_cards: {stats.get('user_cards',0)}, loyalty_transactions: {stats.get('loyalty_transactions',0)}"
            )
        elif action == "delcard":
            parts = text.split()
            if len(parts) < 2 or not parts[0].isdigit() or parts[-1].upper() != "–î–ê":
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <card_id> –î–ê")
                return
            cid = int(parts[0])
            ok = db_v2.delete_card(cid)
            await message.answer("üóë –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞" if ok else "‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        elif action == "delcards_by_tg":
            parts = text.split()
            if len(parts) < 2 or not parts[0].isdigit() or parts[-1].upper() != "–î–ê":
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <partner_tg_id> –î–ê")
                return
            pid = int(parts[0])
            n = db_v2.delete_cards_by_partner_tg(pid)
            await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {n}")
        elif action == "delallcards":
            if text.strip().upper() != "–î–ê":
                await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏: –î–ê")
                return
            n = db_v2.delete_all_cards()
            await message.answer(f"üóë –£–¥–∞–ª–µ–Ω—ã –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {n}")
        elif action == "addcard":
            parts = text.split(maxsplit=3)
            if len(parts) < 3 or not parts[0].isdigit():
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: <partner_tg_id> <category_slug> <title> [–æ–ø–∏—Å–∞–Ω–∏–µ]")
                return
            partner_tg = int(parts[0])
            cat = parts[1]
            title = parts[2]
            desc = parts[3] if len(parts) > 3 else None
            new_id = db_v2.admin_add_card(partner_tg, cat, title, description=desc, status="draft")
            if new_id:
                await message.answer(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ID={new_id} (draft)")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)")
    except Exception as e:
        logger.error(f"su_message_prompt_handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
