"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..services.user_service import get_user_role
from ..services.analytics_service import analytics_service

logger = logging.getLogger(__name__)
router = Router(name="analytics_handler")


@router.message(Command("analytics"))
async def show_analytics_dashboard(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return
        
        await message.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = await analytics_service.get_dashboard_data()
        
        if not dashboard_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä <b>–î–ê–®–ë–û–†–î –ê–ù–ê–õ–ò–¢–ò–ö–ò</b>\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = dashboard_data.get('users', {})
        report += "üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {users.get('total_users', 0)}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {users.get('active_users_7d', 0)}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {users.get('active_users_30d', 0)}\n"
        report += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users.get('new_users_today', 0)}\n"
        report += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users.get('new_users_7d', 0)}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã: {users.get('avg_points_per_user', 0):.1f}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        partners = dashboard_data.get('partners', {})
        report += "ü§ù <b>–ü–ê–†–¢–ù–ï–†–´</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {partners.get('total_partners', 0)}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {partners.get('active_partners', 0)}\n"
        report += f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {partners.get('pending_partners', 0)}\n"
        report += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {partners.get('rejected_partners', 0)}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—Ä—Ç –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partners.get('avg_cards_per_partner', 0):.1f}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = dashboard_data.get('transactions', {})
        report += "üí∞ <b>–¢–†–ê–ù–ó–ê–ö–¶–ò–ò</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {transactions.get('total_transactions', 0)}\n"
        report += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {transactions.get('transactions_today', 0)}\n"
        report += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {transactions.get('transactions_7d', 0)}\n"
        report += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {transactions.get('transactions_30d', 0)}\n"
        report += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {transactions.get('total_points_earned', 0)}\n"
        report += f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {transactions.get('total_points_spent', 0)}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transactions.get('avg_transaction_value', 0):.1f}\n\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        business = dashboard_data.get('business', {})
        top_categories = business.get('top_categories', [])
        if top_categories:
            report += "üèÜ <b>–¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ò</b>\n"
            for i, cat in enumerate(top_categories[:5], 1):
                report += f"{i}. {cat.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {cat.get('card_count', 0)} –∫–∞—Ä—Ç\n"
        
        report += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {dashboard_data.get('generated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19]}"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing analytics dashboard: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@router.message(Command("user_stats"))
async def show_user_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        await message.answer("üë• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_metrics = await analytics_service.get_user_metrics()
        
        report = "üë• <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        
        report += f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_metrics.total_users}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {user_metrics.active_users_7d}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {user_metrics.active_users_30d}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã: {user_metrics.avg_points_per_user:.1f}\n\n"
        
        report += f"üìà <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        report += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {user_metrics.new_users_today}\n"
        report += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {user_metrics.new_users_7d}\n"
        report += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {user_metrics.new_users_30d}\n\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if user_metrics.top_users_by_points:
            report += "üèÜ <b>–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û –ë–ê–õ–õ–ê–ú</b>\n"
            for i, user in enumerate(user_metrics.top_users_by_points[:10], 1):
                name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                username = f"@{user.get('username', '')}" if user.get('username') else ""
                points = user.get('points_balance', 0)
                report += f"{i}. {name} {username}: {points} –±–∞–ª–ª–æ–≤\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing user statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.message(Command("partner_stats"))
async def show_partner_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")
            return
        
        await message.answer("ü§ù –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        partner_metrics = await analytics_service.get_partner_metrics()
        
        report = "ü§ù <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–¢–ù–ï–†–û–í</b>\n\n"
        
        report += f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {partner_metrics.total_partners}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {partner_metrics.active_partners}\n"
        report += f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {partner_metrics.pending_partners}\n"
        report += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {partner_metrics.rejected_partners}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—Ä—Ç –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_metrics.avg_cards_per_partner:.1f}\n\n"
        
        # –¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä—ã
        if partner_metrics.top_partners_by_cards:
            report += "üèÜ <b>–¢–û–ü –ü–ê–†–¢–ù–ï–†–´ –ü–û –ö–ê–†–¢–ê–ú</b>\n"
            for i, partner in enumerate(partner_metrics.top_partners_by_cards[:10], 1):
                name = partner.get('display_name', '–ü–∞—Ä—Ç–Ω–µ—Ä')
                cards = partner.get('card_count', 0)
                report += f"{i}. {name}: {cards} –∫–∞—Ä—Ç\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing partner statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")


@router.message(Command("transaction_stats"))
async def show_transaction_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_role = await get_user_role(message.from_user.id)
        
        if user_role not in ['admin', 'super_admin']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return
        
        await message.answer("üí∞ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_metrics = await analytics_service.get_transaction_metrics()
        
        report = "üí∞ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>\n\n"
        
        report += f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_metrics.total_transactions}\n"
        report += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {transaction_metrics.transactions_today}\n"
        report += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {transaction_metrics.transactions_7d}\n"
        report += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {transaction_metrics.transactions_30d}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction_metrics.avg_transaction_value:.1f} –±–∞–ª–ª–æ–≤\n\n"
        
        report += f"üíé <b>–ë–∞–ª–ª—ã:</b>\n"
        report += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {transaction_metrics.total_points_earned}\n"
        report += f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {transaction_metrics.total_points_spent}\n"
        report += f"‚Ä¢ –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {transaction_metrics.total_points_earned - transaction_metrics.total_points_spent}\n\n"
        
        # –¢–æ–ø —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if transaction_metrics.top_transaction_types:
            report += "üèÜ <b>–¢–û–ü –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>\n"
            for i, tx_type in enumerate(transaction_metrics.top_transaction_types[:10], 1):
                tx_name = tx_type.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                count = tx_type.get('count', 0)
                report += f"{i}. {tx_name}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing transaction statistics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")


def get_analytics_router() -> Router:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return router


__all__ = ['router', 'get_analytics_router']
