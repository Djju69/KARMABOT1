"""
Personal cabinet uses REPLY keyboards only (no inline menu).
Handlers here render profile and process Settings/Stats/Add card/My cards/
Become partner, Language, and Notifications toggle as reply actions.
"""
import os
import re
import time
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..database.db_v2 import db_v2
from ..utils.locales_v2 import get_text, translations
from ..services.user_cabinet_service import UserCabinetService
from ..services.cache import cache_service
from ..services.loyalty import loyalty_service
from ..services.cards import card_service
from ..keyboards.reply_v2 import (
    get_profile_keyboard,
    get_profile_settings_keyboard,
    get_partner_keyboard,
    get_admin_keyboard,
    get_superadmin_keyboard,
)
from ..keyboards.inline_v2 import get_add_card_choice_inline
from ..settings import settings
from ..services.profile import profile_service

profile_router = Router(name="profile_router")
logger = logging.getLogger(__name__)


def _notify_key(user_id: int) -> str:
    return f"notify:{user_id}"


def _report_rl_key(user_id: int) -> str:
    return f"report_rl:{user_id}"


async def _is_notify_on(user_id: int) -> bool:
    v = await cache_service.get(_notify_key(user_id))
    return v != "off"


def _texts(key: str) -> list[str]:
    return [t.get(key, '') for t in translations.values()]


async def render_profile(message: Message):
    user_id = message.from_user.id
    lang = "ru"  # Default language
    
    try:
        # Get user profile from user cabinet service
        user_cabinet_service = UserCabinetService()
        profile = await user_cabinet_service.get_user_profile(user_id)
        
        if not profile:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_profile_keyboard(lang)
            )
            return
        
        # Format profile text
        text = f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        text += f"üëã –ü—Ä–∏–≤–µ—Ç, {profile.get('full_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
        text += f"üìä <b>–ö–∞—Ä–º–∞:</b> {profile.get('balance', 0)} –æ—á–∫–æ–≤\n"
        text += f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {profile.get('level', 'Member')}\n"
        text += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {profile.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üåê <b>–Ø–∑—ã–∫:</b> {profile.get('language', 'ru')}\n"
        
        logger.info("profile.render user_id=%s profile=%s", user_id, profile)
        
        # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ë–ï–ó QR WebApp –∫–Ω–æ–ø–∫–∏
        kb = get_profile_keyboard(lang)
        await message.answer(text, reply_markup=kb, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error rendering profile for user {user_id}: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_profile_keyboard(lang)
        )


@profile_router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def on_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await render_profile(message)

@profile_router.message(F.text.in_(_texts('profile_settings')))
async def on_profile_settings(message: Message):
    lang = "ru"  # Default language
    await message.answer(get_text('profile_settings', lang), reply_markup=get_profile_settings_keyboard(lang))


@profile_router.message(F.text.in_(_texts('profile_stats')))
async def on_profile_stats(message: Message):
    lang = "ru"  # Default language
    # Placeholder: combined Stats + Report
    await message.answer(get_text('profile_stats', lang) + "\n\n" + get_text('report_building', lang), reply_markup=get_profile_keyboard(lang))


@profile_router.message(F.text.in_(_texts('add_card')))
async def on_add_card(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä: –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π."""
    lang = await profile_service.get_lang(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_add_card_choice_inline(lang)
    )

@profile_router.callback_query(F.data == "act:bind_plastic")
async def on_bind_plastic_cb(callback: CallbackQuery):
    """–°—Ç–∞—Ä—Ç –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø–æ –∫–∞–ª–ª–±—ç–∫—É –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞."""
    try:
        await callback.answer()
    except Exception:
        pass
    lang = await profile_service.get_lang(callback.from_user.id)
    await cache_service.set(f"card_bind_wait:{callback.from_user.id}", "1", ex=300)
    try:
        await callback.message.edit_text(
            get_text('card.bind.options', lang) + "\n\n" + get_text('card.bind.prompt', lang),
            reply_markup=None
        )
    except Exception:
        await callback.message.answer(
            get_text('card.bind.options', lang) + "\n\n" + get_text('card.bind.prompt', lang)
        )


@profile_router.message(F.text.in_(_texts('my_cards')))
async def on_my_cards(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.database.db_v2 import db_v2
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        user_id = message.from_user.id
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "üí≥ <b>–ú–æ–∏ –∫–∞—Ä—Ç—ã</b>\n\n"
            "üìã <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:</b>\n"
            "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç\n\n"
            "üí° <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É:</b>\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in on_my_cards: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@profile_router.message(F.text.in_(_texts('my_points')))
async def on_my_points(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "üíé <b>–ú–æ–∏ –±–∞–ª–ª—ã</b>\n\n"
            "üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> 0 –±–∞–ª–ª–æ–≤\n\n"
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:</b>\n"
            "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "üéØ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã:</b>\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: +5 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã: +25 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã: +50 –±–∞–ª–ª–æ–≤",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in on_my_points: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@profile_router.message(F.text.in_(_texts('btn.partner.become')))
async def on_become_partner(message: Message, state: FSMContext):
    """Open partner cabinet instead of sending external link.
    Keeps UX consistent with partner.open_partner_cabinet_button.
    """
    try:
        # Ensure partner exists
        partner = db_v2.get_or_create_partner(message.from_user.id, message.from_user.full_name)

        # If Partner FSM enabled ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        if settings.features.partner_fsm:
            try:
                # Lazy import to avoid potential circular deps
                from .partner import start_add_card
            except Exception as e:
                logger.error(f"Failed to import start_add_card: {e}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º partner_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä
                await state.update_data(partner_id=partner.id)
                await start_add_card(message, state)
                try:
                    logger.info("profile.become_partner: started add_card flow user_id=%s", message.from_user.id)
                except Exception:
                    pass
                return

        # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–±–µ–∑ FSM)
        lang = await profile_service.get_lang(message.from_user.id)
        # –£—Å–ª–æ–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ/–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        show_qr = False
        try:
            cards = db_v2.get_partner_cards(partner.id)
            for c in cards:
                if str(c.get('status')) in ('approved', 'published'):
                    show_qr = True
                    break
        except Exception:
            show_qr = False
        kb = get_partner_keyboard(lang, show_qr=show_qr)
        await message.answer("üè™ –í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", reply_markup=kb)
        try:
            logger.info("profile.become_partner: opened cabinet user_id=%s", message.from_user.id)
        except Exception:
            pass
    except Exception as e:
        logger.error(f"Failed to handle become partner: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@profile_router.message(F.text.regexp(r"^\d{12}$"))
async def on_card_uid_entered(m: Message):
    # Proceed only if user is in bind-await state
    if not (await cache_service.get(f"card_bind_wait:{m.from_user.id}")):
        return
    lang = await profile_service.get_lang(m.from_user.id)
    uid = m.text
    res = card_service.bind_card(m.from_user.id, uid)
    await cache_service.delete(f"card_bind_wait:{m.from_user.id}")
    if not res.ok:
        reason = res.reason or "invalid"
        if reason == "blocked":
            await m.answer("‚ùå –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
        elif reason == "taken":
            await m.answer("‚ùå –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π UID –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 12 —Ü–∏—Ñ—Ä.")
        return
    await m.answer(f"‚úÖ –ö–∞—Ä—Ç–∞ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º {res.last4} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.")


# Temporary: accept photo during bind flow and ask for manual input until QR decoding is implemented
@profile_router.message(F.photo)
async def on_card_photo(message: Message):
    # Proceed only if user is in bind-await state
    if not (await cache_service.get(f"card_bind_wait:{message.from_user.id}")):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    await message.answer(
        "üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ QR —Å —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (12 —Ü–∏—Ñ—Ä) —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


# Note: language selection via reply button is handled centrally in
# core/handlers/main_menu_router.py to avoid double responses.
@profile_router.message(F.text.in_(_texts('choose_language')))
async def on_choose_language(message: Message):
    return


@profile_router.message(F.text.in_(_texts('btn.notify.on')))
async def on_notify_on(message: Message):
    await cache_service.set(_notify_key(message.from_user.id), "on", ex=7*24*3600)
    await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=get_profile_settings_keyboard(await profile_service.get_lang(message.from_user.id)))


@profile_router.message(F.text.in_(_texts('btn.notify.off')))
async def on_notify_off(message: Message):
    await cache_service.set(_notify_key(message.from_user.id), "off", ex=7*24*3600)
    await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=get_profile_settings_keyboard(await profile_service.get_lang(message.from_user.id)))


def get_profile_router() -> Router:
    return profile_router


# Admin cabinet entry from main menu button "üëë –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç"
@profile_router.message(F.text == "üëë –ê–¥–º–∏–Ω –∫–∞–±–∏–Ω–µ—Ç")
async def on_admin_cabinet(message: Message):
    user_id = message.from_user.id
    lang = await profile_service.get_lang(user_id)
    # Simple role detection: superadmin is OWNER (ADMIN_ID), others are admins
    if user_id == settings.bots.admin_id:
        kb = get_superadmin_keyboard(lang)
        title = get_text('admin_cabinet_title', lang)
    else:
        kb = get_admin_keyboard(lang)
        title = get_text('admin_cabinet_title', lang)
    await message.answer(title, reply_markup=kb)
