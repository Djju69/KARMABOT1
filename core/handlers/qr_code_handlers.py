#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
QR Code handlers for KARMABOT1 Telegram Bot
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from typing import Dict, Any, List
import json

from core.services.qr_code_service import QRCodeService
from core.database import get_db
from core.logger import get_logger
def _back_to_main_menu_keyboard():
    # Inline back button to main menu (existing handler listens to callback_data="main_menu").
    try:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
    except Exception:
        return None

logger = get_logger(__name__)

router = Router()


class QRCodeStates(StatesGroup):
    """States for QR code generation"""
    waiting_for_discount_type = State()
    waiting_for_discount_value = State()
    waiting_for_expiration = State()
    waiting_for_description = State()


@router.message(Command("qr_codes"))
async def show_qr_codes_menu(message: Message, state: FSMContext):
    """Show QR codes menu"""
    try:
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ú–æ–∏ QR-–∫–æ–¥—ã", callback_data="qr_my_codes")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="qr_create")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="qr_stats")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="qr_help")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            "üé´ <b>QR-–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å QR-–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ QR-–∫–æ–¥—ã\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing QR codes menu: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é QR-–∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data == "qr_my_codes")
async def show_my_qr_codes(callback: CallbackQuery, state: FSMContext):
    """Show user's QR codes"""
    try:
        await callback.answer()
        
        db = next(get_db())
        qr_service = QRCodeService(db)
        user_id = callback.from_user.id
        
        # Get user's QR codes
        qr_codes = await qr_service.get_user_qr_codes(
            user_id=user_id,
            limit=10,
            include_used=True
        )
        
        if not qr_codes:
            await callback.message.edit_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç QR-–∫–æ–¥–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="qr_create")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            return
        
        # Format QR codes list
        text = "üé´ <b>–í–∞—à–∏ QR-–∫–æ–¥—ã</b>\n\n"
        
        for i, qr in enumerate(qr_codes[:5], 1):  # Show first 5
            status_emoji = "‚úÖ" if qr["is_used"] else "‚è∞" if not qr["is_used"] else "‚ùå"
            status_text = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if qr["is_used"] else "–ê–∫—Ç–∏–≤–µ–Ω"
            
            text += f"{i}. {status_emoji} <b>{qr['description']}</b>\n"
            text += f"   üí∞ –°–∫–∏–¥–∫–∞: {qr['discount_value']} {qr['discount_type']}\n"
            text += f"   üìÖ –°–æ–∑–¥–∞–Ω: {qr['created_at'][:10]}\n"
            text += f"   ‚è∞ –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        
        if len(qr_codes) > 5:
            text += f"... –∏ –µ—â–µ {len(qr_codes) - 5} QR-–∫–æ–¥–æ–≤\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="qr_create")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="qr_my_codes")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing user QR codes: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data == "qr_create")
async def start_qr_creation(callback: CallbackQuery, state: FSMContext):
    """Start QR code creation process"""
    try:
        await callback.answer()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data="qr_type_loyalty_points")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏", callback_data="qr_type_percentage")],
            [InlineKeyboardButton(text="üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞", callback_data="qr_type_fixed_amount")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            "üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error starting QR creation: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data.regexp(r"^qr_create:[0-9]+$"))
async def start_qr_creation_for_card(callback: CallbackQuery, state: FSMContext):
    """Start QR code creation process for specific card"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏
        card_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        from core.database import db_v2
        card = db_v2.get_card_by_id(card_id)
        
        if not card:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(card_id=card_id, card_title=card.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data="qr_type_loyalty_points")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏", callback_data="qr_type_percentage")],
            [InlineKeyboardButton(text="üíµ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞", callback_data="qr_type_fixed_amount")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data=f"act:view:{card_id}")]
        ])
        
        await callback.message.edit_text(
            f"üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏</b>\n\n"
            f"üìã <b>–ö–∞—Ä—Ç–æ—á–∫–∞:</b> {card.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(QRStates.selecting_type)
        
    except Exception as e:
        logger.error(f"Error starting QR creation for card: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞", show_alert=True)


@router.callback_query(F.data.startswith("qr_type_"))
async def select_discount_type(callback: CallbackQuery, state: FSMContext):
    """Select discount type"""
    try:
        await callback.answer()
        
        discount_type = callback.data.split("_")[2]  # loyalty_points, percentage, fixed_amount
        
        # Store discount type in state
        await state.update_data(discount_type=discount_type)
        await state.set_state(QRCodeStates.waiting_for_discount_value)
        
        # Set appropriate message based on type
        if discount_type == "loyalty_points":
            text = "üí∞ <b>–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–∫–∏–¥–∫–∏:"
        elif discount_type == "percentage":
            text = "üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (1-100):"
        else:  # fixed_amount
            text = "üíµ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="qr_codes")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error selecting discount type: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.message(QRCodeStates.waiting_for_discount_value)
async def process_discount_value(message: Message, state: FSMContext):
    """Process discount value input"""
    try:
        # Get discount value
        try:
            discount_value = int(message.text)
            if discount_value <= 0:
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # Store discount value
        await state.update_data(discount_value=discount_value)
        await state.set_state(QRCodeStates.waiting_for_expiration)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="qr_exp_1")],
            [InlineKeyboardButton(text="6 —á–∞—Å–æ–≤", callback_data="qr_exp_6")],
            [InlineKeyboardButton(text="24 —á–∞—Å–∞", callback_data="qr_exp_24")],
            [InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="qr_exp_72")],
            [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="qr_exp_168")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="qr_codes")]
        ])
        
        await message.answer(
            "‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è QR-–∫–æ–¥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–≥–æ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å QR-–∫–æ–¥:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error processing discount value: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data.startswith("qr_exp_"))
async def select_expiration(callback: CallbackQuery, state: FSMContext):
    """Select expiration time"""
    try:
        await callback.answer()
        
        hours = int(callback.data.split("_")[2])  # 1, 6, 24, 72, 168
        
        # Store expiration
        await state.update_data(expires_in_hours=hours)
        await state.set_state(QRCodeStates.waiting_for_description)
        
        await callback.message.edit_text(
            "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ QR-–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –∫–æ—Ñ–µ'):",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error selecting expiration: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.message(QRCodeStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """Process description and create QR code"""
    try:
        description = message.text.strip()
        
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # Get all data from state
        data = await state.get_data()
        discount_type = data.get("discount_type")
        discount_value = data.get("discount_value")
        expires_in_hours = data.get("expires_in_hours")
        
        # Create QR code
        db = next(get_db())
        qr_service = QRCodeService(db)
        user_id = message.from_user.id
        
        qr_code = await qr_service.generate_qr_code(
            user_id=user_id,
            discount_type=discount_type,
            discount_value=discount_value,
            expires_in_hours=expires_in_hours,
            description=description
        )
        
        # Clear state
        await state.clear()
        
        # Send QR code image
        await message.answer_photo(
            photo=qr_code["qr_image"],
            caption=f"üé´ <b>QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                   f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                   f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {discount_value} {discount_type}\n"
                   f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> {expires_in_hours} —á–∞—Å–æ–≤\n"
                   f"üÜî <b>ID:</b> {qr_code['qr_id']}\n\n"
                   f"–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏!",
            parse_mode="HTML"
        )
        
        # Show menu
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ú–æ–∏ QR-–∫–æ–¥—ã", callback_data="qr_my_codes")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="qr_create")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error creating QR code: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data == "qr_stats")
async def show_qr_stats(callback: CallbackQuery, state: FSMContext):
    """Show QR code statistics"""
    try:
        await callback.answer()
        
        db = next(get_db())
        qr_service = QRCodeService(db)
        user_id = callback.from_user.id
        
        stats = await qr_service.get_qr_code_stats(user_id)
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤</b>\n\n"
        text += f"üé´ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_codes']}\n"
        text += f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_codes']}\n"
        text += f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_codes']}\n"
        text += f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {stats['expired_codes']}\n"
        text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {stats['usage_rate']:.1f}%\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ú–æ–∏ QR-–∫–æ–¥—ã", callback_data="qr_my_codes")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="qr_create")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing QR stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )


@router.callback_query(F.data == "qr_help")
async def show_qr_help(callback: CallbackQuery, state: FSMContext):
    """Show QR code help"""
    try:
        await callback.answer()
        
        text = "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ QR-–∫–æ–¥–∞–º</b>\n\n"
        text += "üé´ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ QR-–∫–æ–¥—ã?</b>\n"
        text += "QR-–∫–æ–¥—ã - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö.\n\n"
        text += "üí∞ <b>–¢–∏–ø—ã —Å–∫–∏–¥–æ–∫:</b>\n"
        text += "‚Ä¢ –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ - —Å–∫–∏–¥–∫–∞ –≤ –±–∞–ª–ª–∞—Ö\n"
        text += "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ - —Å–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\n"
        text += "‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ - —Å–∫–∏–¥–∫–∞ –≤ —Ä—É–±–ª—è—Ö\n\n"
        text += "‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        text += "QR-–∫–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (1 —á–∞—Å - 7 –¥–Ω–µ–π)\n\n"
        text += "üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        text += "1. –°–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥\n"
        text += "2. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É\n"
        text += "3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É!\n\n"
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö QR-–∫–æ–¥–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ú–æ–∏ QR-–∫–æ–¥—ã", callback_data="qr_my_codes")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="qr_create")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing QR help: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=_back_to_main_menu_keyboard()
        )
