"""
Router for plastic cards and karma functionality.
Handles card binding, unbinding, management, and karma operations.
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Union, Any, Dict
import logging
import re

# Create router with a name
router = Router(name='plastic_cards_router')

# Import dependencies
from ..services.plastic_cards_service import plastic_cards_service
from ..services.user_service import karma_service
from ..keyboards.reply_v2 import get_user_cabinet_keyboard, get_return_to_main_menu
from ..utils.locales_v2 import get_text

logger = logging.getLogger(__name__)


def get_plastic_cards_router() -> Router:
    """Get the plastic cards router with all handlers."""
    return router


class PlasticCardsStates(StatesGroup):
    """FSM states for plastic cards interactions."""
    waiting_for_card_id = State()
    viewing_cards = State()


class KarmaStates(StatesGroup):
    """FSM states for karma interactions."""
    waiting_for_karma_amount = State()
    waiting_for_karma_reason = State()


@router.message(F.text == "üìä –ö–∞—Ä–º–∞")
async def show_karma_handler(message: Message, state: FSMContext):
    """Show user's karma information."""
    try:
        user_id = message.from_user.id
        
        # Get karma information
        karma_points = await karma_service.get_user_karma(user_id)
        karma_level = await karma_service.get_user_level(user_id)
        reputation = await karma_service.get_user_reputation(user_id)
        
        text = (
            f"üìä <b>–í–∞—à–∞ –∫–∞—Ä–º–∞</b>\n\n"
            f"üíé <b>–û—á–∫–∏ –∫–∞—Ä–º—ã:</b> {karma_points}\n"
            f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {karma_level}\n"
            f"‚≠ê <b>–†–µ–ø—É—Ç–∞—Ü–∏—è:</b> {reputation['reputation_score']}\n"
            f"   üëç –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {reputation['thanks']}\n"
            f"   üëé –ñ–∞–ª–æ–±—ã: {reputation['complaints']}\n\n"
            f"–ö–∞—Ä–º–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø–æ—Å—Ç—É–ø–∫–∏ –∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è."
        )
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in show_karma_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä–º–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_karma_history_handler(message: Message, state: FSMContext):
    """Show user's karma history."""
    try:
        user_id = message.from_user.id
        history = await karma_service.get_karma_history(user_id, limit=10)
        
        if not history:
            await message.answer(
                "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã.",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
            return
        
        text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä–º—ã</b>\n\n"
        for i, transaction in enumerate(history, 1):
            amount = transaction['amount']
            reason = transaction['reason'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            date = transaction['created_at'][:10]  # Show only date
            
            if amount > 0:
                text += f"{i}. ‚ûï +{amount} –∫–∞—Ä–º—ã\n"
            else:
                text += f"{i}. ‚ûñ {amount} –∫–∞—Ä–º—ã\n"
            
            text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   üìÖ –î–∞—Ç–∞: {date}\n\n"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in show_karma_history_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä–º—ã.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text == "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements_handler(message: Message, state: FSMContext):
    """Show user's achievements based on karma."""
    try:
        user_id = message.from_user.id
        karma_points = await karma_service.get_user_karma(user_id)
        karma_level = await karma_service.get_user_level(user_id)
        
        # Calculate achievements
        achievements = []
        
        if karma_points >= 100:
            achievements.append("ü•â –ü–µ—Ä–≤—ã–µ 100 –æ—á–∫–æ–≤ –∫–∞—Ä–º—ã")
        if karma_points >= 500:
            achievements.append("ü•à 500 –æ—á–∫–æ–≤ –∫–∞—Ä–º—ã")
        if karma_points >= 1000:
            achievements.append("ü•á 1000 –æ—á–∫–æ–≤ –∫–∞—Ä–º—ã")
        if karma_points >= 5000:
            achievements.append("üíé 5000 –æ—á–∫–æ–≤ –∫–∞—Ä–º—ã")
        if karma_points >= 10000:
            achievements.append("üëë 10000 –æ—á–∫–æ–≤ –∫–∞—Ä–º—ã")
        
        if karma_level == "Bronze":
            achievements.append("ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å")
        elif karma_level == "Silver":
            achievements.append("ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
        elif karma_level == "Gold":
            achievements.append("ü•á –ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å")
        elif karma_level == "Platinum":
            achievements.append("üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å")
        
        text = f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        text += f"üíé <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {karma_level}\n"
        text += f"üìä <b>–û—á–∫–∏ –∫–∞—Ä–º—ã:</b> {karma_points}\n\n"
        
        if achievements:
            text += "<b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
            for achievement in achievements:
                text += f"‚úÖ {achievement}\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Ä–º—É!"
        
        await message.answer(
            text,
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in show_achievements_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text == "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É")
async def bind_card_handler(message: Message, state: FSMContext):
    """Handle card binding request."""
    try:
        user_id = message.from_user.id
        
        # Check if user already has cards
        cards = await plastic_cards_service.get_user_cards(user_id)
        
        if len(cards) >= 5:  # Limit to 5 cards per user
            await message.answer(
                "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n\n"
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
                reply_markup=get_user_cabinet_keyboard()
            )
            return
        
        await message.answer(
            "üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã</b>\n\n"
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é.\n\n"
            "üì± <b>–°–ø–æ—Å–æ–± 1:</b> –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
            "‚å®Ô∏è <b>–°–ø–æ—Å–æ–± 2:</b> –í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: KS12340001)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã:",
            reply_markup=get_return_to_main_menu(),
            parse_mode='HTML'
        )
        
        await state.set_state(PlasticCardsStates.waiting_for_card_id)
        
    except Exception as e:
        logger.error(f"Error in bind_card_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(PlasticCardsStates.waiting_for_card_id)
async def process_card_id_handler(message: Message, state: FSMContext):
    """Process card ID input."""
    try:
        user_id = message.from_user.id
        card_id = message.text.strip()
        
        # Validate card ID format
        if not await plastic_cards_service.validate_card_id(card_id):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ä—Ç—ã.\n\n"
                "ID –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
                "–î–ª–∏–Ω–∞: –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_return_to_main_menu()
            )
            return
        
        # Try to bind the card
        result = await plastic_cards_service.bind_card_to_user(
            telegram_id=user_id,
            card_id=card_id,
            card_id_printable=card_id
        )
        
        if result['success']:
            await message.answer(
                f"‚úÖ {result['message']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ùå {result['message']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_card_id_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )
        await state.clear()


@router.message(F.text == "üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR")
async def scan_qr_handler(message: Message, state: FSMContext):
    """Handle QR code scanning request."""
    try:
        user_id = message.from_user.id
        
        # Check if user already has a card
        cards = await plastic_cards_service.get_user_cards(user_id)
        
        if len(cards) >= 1:  # –õ–∏–º–∏—Ç 1 –∫–∞—Ä—Ç–∞
            await message.answer(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞.\n\n"
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìã –ú–æ—è –∫–∞—Ä—Ç–∞¬ª.",
                reply_markup=get_user_cabinet_keyboard()
            )
            return
        
        await message.answer(
            "üì± <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</b>\n\n"
            "–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç–µ.\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é:",
            reply_markup=get_return_to_main_menu(),
            parse_mode='HTML'
        )
        
        await state.set_state(PlasticCardsStates.waiting_for_card_id)
        
    except Exception as e:
        logger.error(f"Error in scan_qr_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text == "üìã –ú–æ—è –∫–∞—Ä—Ç–∞")
async def view_single_card_handler(message: Message, state: FSMContext):
    """Handle viewing user's single card."""
    try:
        user_id = message.from_user.id
        cards = await plastic_cards_service.get_user_cards(user_id)
        
        if not cards:
            await message.answer(
                "üìã <b>–ú–æ—è –∫–∞—Ä—Ç–∞</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ¬´üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR¬ª —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É.",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
            return
        
        card = cards[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) –∫–∞—Ä—Ç—É
        text = (
            f"üìã <b>–ú–æ—è –∫–∞—Ä—Ç–∞</b>\n\n"
            f"üÜî <b>ID –∫–∞—Ä—Ç—ã:</b> {card['card_id_printable'] or card['card_id']}\n"
            f"üìÖ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–∞:</b> {card['bound_at'][:10]}\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
            f"–î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤—è–∑–∫–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîì –û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"unbind_card:{card['card_id']}")]
        ])
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in view_single_card_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(F.text == "üí∞ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–∞—Ä–º—É")
async def spend_karma_handler(message: Message, state: FSMContext):
    """Handle karma spending for discount."""
    try:
        user_id = message.from_user.id
        karma_points = await karma_service.get_user_karma(user_id)
        
        if karma_points <= 0:
            await message.answer(
                "üí∞ <b>–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–∞—Ä–º—É</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä–º—ã –¥–ª—è —Ç—Ä–∞—Ç—ã.\n\n"
                "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞—Ä–º—É –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø–æ—Å—Ç—É–ø–∫–∏!",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
            return
        
        await message.answer(
            f"üí∞ <b>–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–∞—Ä–º—É</b>\n\n"
            f"–£ –≤–∞—Å: {karma_points} –±–∞–ª–ª–æ–≤ –∫–∞—Ä–º—ã\n\n"
            f"üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            f"‚Ä¢ 1 –±–∞–ª–ª –∫–∞—Ä–º—ã = +1% –∫ —Å–∫–∏–¥–∫–µ\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å: {min(karma_points, 50)} –±–∞–ª–ª–æ–≤\n"
            f"‚Ä¢ –°–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ –≤–∞—à —Å—á–µ—Ç\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Ç—Ä–∞—Ç—ã (1-{min(karma_points, 50)}):",
            reply_markup=get_return_to_main_menu(),
            parse_mode='HTML'
        )
        
        await state.set_state(KarmaStates.waiting_for_karma_amount)
        
    except Exception as e:
        logger.error(f"Error in spend_karma_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


@router.message(KarmaStates.waiting_for_karma_amount)
async def process_karma_spending_handler(message: Message, state: FSMContext):
    """Process karma spending amount."""
    try:
        user_id = message.from_user.id
        karma_points = await karma_service.get_user_karma(user_id)
        
        try:
            amount = int(message.text.strip())
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –∫–∞—Ä–º—ã.",
                reply_markup=get_return_to_main_menu()
            )
            return
        
        if amount <= 0 or amount > min(karma_points, 50):
            await message.answer(
                f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {min(karma_points, 50)}.",
                reply_markup=get_return_to_main_menu()
            )
            return
        
        # –¢—Ä–∞—Ç–∏–º –∫–∞—Ä–º—É
        result = await karma_service.spend_karma_for_discount(user_id, amount)
        
        if result['success']:
            await message.answer(
                f"‚úÖ {result['message']}\n\n"
                f"üéâ –°–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {amount}%!\n"
                f"üí≥ –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ùå {result['message']}",
                reply_markup=get_user_cabinet_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_karma_spending_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞—Ç–µ –∫–∞—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )
        await state.clear()


@router.callback_query(F.data.startswith("unbind_card:"))
async def unbind_card_callback_handler(callback: CallbackQuery, state: FSMContext):
    """Handle card unbinding via callback."""
    try:
        user_id = callback.from_user.id
        card_id = callback.data.split(":", 1)[1]
        
        result = await plastic_cards_service.unbind_card(user_id, card_id)
        
        if result['success']:
            await callback.message.edit_text(
                f"‚úÖ {result['message']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                f"‚ùå {result['message']}",
                reply_markup=None
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in unbind_card_callback_handler: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∫–∞—Ä—Ç—ã.")


@router.message(F.text.regexp(r'^–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É \d+$'))
async def unbind_card_handler(message: Message, state: FSMContext):
    """Handle card unbinding."""
    try:
        user_id = message.from_user.id
        
        # Extract card number from message
        match = re.search(r'–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É (\d+)', message.text)
        if not match:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        card_number = int(match.group(1))
        cards = await plastic_cards_service.get_user_cards(user_id)
        
        if card_number < 1 or card_number > len(cards):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
            return
        
        card = cards[card_number - 1]
        result = await plastic_cards_service.unbind_card(user_id, card['card_id'])
        
        if result['success']:
            await message.answer(
                f"‚úÖ {result['message']}",
                reply_markup=get_user_cabinet_keyboard()
            )
        else:
            await message.answer(
                f"‚ùå {result['message']}",
                reply_markup=get_user_cabinet_keyboard()
            )
        
    except Exception as e:
        logger.error(f"Error in unbind_card_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_cabinet_keyboard()
        )


# Register all handlers
router.message.register(show_karma_handler, F.text == "üìä –ö–∞—Ä–º–∞")
router.message.register(show_karma_history_handler, F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
router.message.register(show_achievements_handler, F.text == "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
router.message.register(scan_qr_handler, F.text == "üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR")
router.message.register(view_single_card_handler, F.text == "üìã –ú–æ—è –∫–∞—Ä—Ç–∞")
router.message.register(spend_karma_handler, F.text == "üí∞ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–∞—Ä–º—É")
router.callback_query.register(unbind_card_callback_handler, F.data.startswith("unbind_card:"))

# Export the router
__all__ = ['router', 'get_plastic_cards_router']
