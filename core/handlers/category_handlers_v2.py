"""
Enhanced category handlers with unified card rendering
Backward compatible with existing functionality
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram import Bot
import logging

from ..database.db_v2 import db_v2
from ..services.card_renderer import card_service
from ..keyboards.reply_v2 import (
    get_return_to_main_menu, 
    get_location_request_keyboard,
    get_categories_keyboard,
    get_transport_reply_keyboard,
    get_tours_reply_keyboard
)
from ..keyboards.inline_v2 import (
    get_pagination_row,
    get_catalog_item_row,
    get_restaurant_filters_inline,
)
from ..utils.locales_v2 import get_text, get_all_texts
from ..settings import settings

logger = logging.getLogger(__name__)

# Router for category handlers
category_router = Router()

async def show_categories_v2(message: Message, bot: Bot, lang: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
    try:
        await message.answer(
            text="üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_categories_keyboard(lang)
        )
    except Exception as e:
        logger.error(f"Error in show_categories_v2: {e}")
        await message.answer(
            get_text('catalog_error', lang),
            reply_markup=get_return_to_main_menu(lang)
        )


# --- –≠—Ç–∞–ø 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –∫–∞—Ç–∞–ª–æ–≥–∞ ---

async def show_catalog_page(bot: Bot, chat_id: int, lang: str, slug: str, sub_slug: str = "all", page: int = 1, city_id: int | None = None, message_id: int | None = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ sub_slug.
    """
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        all_cards = db_v2.get_cards_by_category(slug, status='published', limit=100)
        if city_id is not None and all_cards and 'city_id' in all_cards[0]:
            all_cards = [c for c in all_cards if c.get('city_id') == city_id]
        if sub_slug != "all" and all_cards and 'sub_slug' in all_cards[0]:
             all_cards = [c for c in all_cards if str(c.get('sub_slug') or '').lower() == sub_slug]

        # 2. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 5
        total_items = len(all_cards)
        total_pages = max(1, (total_items + per_page - 1) // per_page)
        page = max(1, min(page, total_pages))
        cards_page = all_cards[(page - 1) * per_page:page * per_page]

        # 3. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if not cards_page:
            text = get_text('catalog_empty_sub', lang)
            kb = None
        else:
            header = f"{get_text('catalog_found', lang)}: {total_items} | {get_text('catalog_page', lang)}. {page}/{total_pages}"
            text = header + "\n\n" + card_service.render_cards_list(cards_page, lang, max_cards=per_page)
            
            # 4. –°–±–æ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            inline_rows = [get_catalog_item_row(c.get('id'), c.get('google_maps_url'), lang) for c in cards_page]
            pagination_row = [get_pagination_row(slug, page, total_pages, sub_slug)]
            kb_rows = inline_rows + pagination_row
            kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id:
            await bot.edit_message_text(text, chat_id, message_id, reply_markup=kb)
        else:
            await bot.send_message(chat_id, text, reply_markup=kb)

    except Exception as e:
        logger.error(f"show_catalog_page error for slug={slug}, sub_slug={sub_slug}: {e}")
        await bot.send_message(chat_id, get_text('catalog_error', lang))


async def on_restaurants(message: Message, bot: Bot, lang: str, city_id: int | None):
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –∞ –Ω–µ —Å–∞–º –∫–∞—Ç–∞–ª–æ–≥
    from ..keyboards.inline_v2 import get_restaurant_filters_inline
    await message.answer(
        text=get_text('restaurants_choose_cuisine', lang),
        reply_markup=get_restaurant_filters_inline(lang=lang)
    )

async def on_spa(message: Message, bot: Bot, lang: str, city_id: int | None):
    await show_catalog_page(bot, message.chat.id, lang, 'spa', page=1, city_id=city_id)

async def on_hotels(message: Message, bot: Bot, lang: str, city_id: int | None):
    await show_catalog_page(bot, message.chat.id, lang, 'hotels', page=1, city_id=city_id)

async def on_transport(message: Message, lang: str):
    await message.answer(get_text('transport_choose', lang), reply_markup=get_transport_reply_keyboard(lang))

async def on_tours(message: Message, lang: str):
    await message.answer(get_text('tours_choose', lang), reply_markup=get_tours_reply_keyboard(lang))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é --- 

async def on_transport_submenu(message: Message, bot: Bot, lang: str, city_id: int | None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–º–µ–Ω—é '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'."""
    sub_slug_map = {
        get_text('transport_bikes', lang): 'bikes',
        get_text('transport_cars', lang): 'cars',
        get_text('transport_bicycles', lang): 'bicycles'
    }
    sub_slug = sub_slug_map.get(message.text, "all")
    await show_catalog_page(bot, message.chat.id, lang, 'transport', sub_slug, page=1, city_id=city_id)

async def on_tours_submenu(message: Message, bot: Bot, lang: str, city_id: int | None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–º–µ–Ω—é '–≠–∫—Å–∫—É—Ä—Å–∏–∏'."""
    sub_slug_map = {
        get_text('tours_group', lang): 'group',
        get_text('tours_private', lang): 'private'
    }
    sub_slug = sub_slug_map.get(message.text, "all")
    await show_catalog_page(bot, message.chat.id, lang, 'tours', sub_slug, page=1, city_id=city_id)

async def show_nearest_v2(message: Message, bot: Bot, lang: str, city_id: int | None):
    """Enhanced nearest places handler"""
    t = get_all_texts(lang)
    
    city_hint = f" (–≥–æ—Ä–æ–¥ #{city_id})" if city_id else ""
    await message.answer(
        "üìç **–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è**" + city_hint + "\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –≤–∞–º–∏ üó∫Ô∏è",
        reply_markup=get_location_request_keyboard(lang)
    )

async def handle_location_v2(message: Message, bot: Bot, lang: str, city_id: int | None):
    """Enhanced location handler with actual nearby search"""
    
    try:
        latitude = message.location.latitude
        longitude = message.location.longitude
        
        logger.info(f"Received location: {latitude}, {longitude}")
        
        # TODO: Implement actual geospatial search
        # For now, show all published cards as "nearby"
        nearby_cards = []
        categories = db_v2.get_categories(active_only=True)
        
        for category in categories[:3]:  # Limit to first 3 categories
            cards = db_v2.get_cards_by_category(category.slug, status='published', limit=2)
            nearby_cards.extend(cards)
        
        if nearby_cards:
            response = "üìç **–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:**\n\n"
            response += card_service.render_cards_list(nearby_cards, lang, max_cards=5)
            response += "\n\nüí° *–§—É–Ω–∫—Ü–∏—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ*"
        else:
            response = "üì≠ **–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π**\n\n"
            response += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!"
        
        await message.answer(response)
        
        # Return to main menu
        from ..windows.main_menu import main_menu_text
        await bot.send_message(
            chat_id=message.chat.id, 
            text=main_menu_text(lang), 
            reply_markup=get_return_to_main_menu(lang)
        )
        
    except Exception as e:
        logger.error(f"Error in handle_location_v2: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_to_main_menu(lang)
        )

async def category_selected_v2(message: Message, bot: Bot, lang: str):
    """Enhanced category selection with unified card rendering"""
    category_text = message.text
    
    try:
        # Extract category name (remove emoji if present)
        category_name = category_text
        if ' ' in category_text:
            parts = category_text.split(' ', 1)
            if len(parts[0]) <= 2:  # Likely emoji
                category_name = parts[1]
        
        # Find category by name
        categories = db_v2.get_categories()
        matching_category = None
        
        for category in categories:
            if category.name == category_text or category.name == category_name:
                matching_category = category
                break
        
        if not matching_category:
            # Fallback to legacy handling for backward compatibility
            await handle_legacy_category(message, bot, category_text)
            return
        
        # Get cards for this category
        cards = db_v2.get_cards_by_category(
            matching_category.slug, 
            status='published', 
            limit=10
        )
        
        if cards:
            response = f"üóÇÔ∏è **{matching_category.name}**\n\n"
            response += card_service.render_cards_list(cards, lang)
            
            # Add category-specific actions
            if matching_category.slug == 'restaurants':
                response += "\n\nüí° *–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É!*"
            
        else:
            response = f"üì≠ **{matching_category.name}**\n\n"
            response += "–ó–∞–≤–µ–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!\n\n"
            
            if settings.features.partner_fsm:
                response += "ü§ù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_card"
        
        await message.answer(response)
        
        # Return to main menu after showing results
        from ..windows.main_menu import main_menu_text
        await bot.send_message(
            chat_id=message.chat.id,
            text=main_menu_text(lang),
            reply_markup=get_return_to_main_menu(lang)
        )
        
    except Exception as e:
        logger.error(f"Error in category_selected_v2: {e}")
        await handle_legacy_category(message, bot, category_text)

async def handle_legacy_category(message: Message, bot: Bot, category_text: str):
    """Fallback to legacy category handling for backward compatibility"""
    lang = 'ru'
    
    # Legacy category responses (preserved exactly)
    if category_text == 'üçú –†–µ—Å—Ç–æ—Ä–∞–Ω—ã':
        await message.answer(
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–∫–∏–¥–æ–∫: üçΩÔ∏è\n\n"
            "1. H·∫£i s·∫£n M·ªôc qu√°n Nha Trang\n"
            "2. Test —Ä–µ—Å—Ç\n\n"
            "–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É!"
        )
    elif category_text == 'üßò SPA –∏ –º–∞—Å—Å–∞–∂':
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤ SPA –∏ –º–∞—Å—Å–∞–∂–µ–π –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ üíÜ‚Äç‚ôÄÔ∏è")
    elif category_text == 'üõµ –ê—Ä–µ–Ω–¥–∞ –±–∞–π–∫–æ–≤':
        await message.answer("–°–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –±–∞–π–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üõµ")
    elif category_text == 'üè® –û—Ç–µ–ª–∏':
        await message.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç–µ–ª–µ–π üè®")
    elif category_text == 'üó∫Ô∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏':
        await message.answer("–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ç—É—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã üó∫Ô∏è")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")

# Profile handler (new feature)
async def handle_profile(message: Message, bot: Bot, lang: str):
    """Handle profile button press"""
    if not settings.features.partner_fsm:
        await message.answer(
            "üöß **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üîî"
        )
        return
    
    t = get_all_texts(lang)
    
    # Get partner info
    partner = db_v2.get_partner_by_tg_id(message.from_user.id)
    
    if not partner:
        # New user
        response = f"üë§ **{t['profile_main']}**\n\n"
        response += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ:\n\n"
        response += f"‚ûï {t['add_card']} - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ\n"
        response += f"üìã {t['my_cards']} - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        response += f"üìä {t['profile_stats']} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        response += "–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_card"
    else:
        # Existing partner
        cards = db_v2.get_partner_cards(partner.id)
        
        response = f"üë§ **{t['profile_main']}**\n\n"
        response += f"–ü—Ä–∏–≤–µ—Ç, {partner.display_name or '–ü–∞—Ä—Ç–Ω–µ—Ä'}! üëã\n\n"
        response += f"üìä **{t['profile_stats']}:**\n"
        response += f"   ‚Ä¢ {t['cards_count']}: {len(cards)}\n"
        
        # Count by status
        status_counts = {}
        for card in cards:
            status = card['status']
            status_counts[status] = status_counts.get(status, 0) + 1
        
        if status_counts:
            response += "\nüìã **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
            for status, count in status_counts.items():
                status_emoji = {
                    'draft': 'üìù',
                    'pending': '‚è≥', 
                    'published': '‚úÖ',
                    'rejected': '‚ùå',
                    'archived': 'üóÇÔ∏è'
                }.get(status, 'üìÑ')
                response += f"   ‚Ä¢ {status_emoji} {status}: {count}\n"
    
    from ..keyboards.reply_v2 import get_profile_keyboard
    await message.answer(response, reply_markup=get_profile_keyboard(lang))

 


@category_router.callback_query(F.data.regexp(r"^pg:(restaurants|spa|transport|hotels|tours):([a-zA-Z0-9_]+):[0-9]+$"))
async def on_catalog_pagination(callback: CallbackQuery, bot: Bot, lang: str, city_id: int | None):
    """–•–µ–Ω–¥–ª–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –§–æ—Ä–º–∞—Ç: pg:<slug>:<sub_slug>:<page>"""
    try:
        _, slug, sub_slug, page_str = callback.data.split(":")
        page = int(page_str)

        # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_catalog_page(bot, callback.message.chat.id, lang, slug, sub_slug, page, city_id, callback.message.message_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"on_catalog_pagination error: {e}")
        await callback.answer(get_text('catalog_error', lang), show_alert=False)


@category_router.callback_query(F.data.regexp(r"^filt:restaurants:(asia|europe|street|vege|all)$"))
async def on_restaurants_filter(callback: CallbackQuery, bot: Bot, lang: str, city_id: int | None):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ pg:restaurants:1.
    –§–æ—Ä–º–∞—Ç: filt:restaurants:<filter>
    """
    try:
        _, _, filt = callback.data.split(":")
        slug = 'restaurants'
        page = 1

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (5 —à—Ç.)
        all_cards = db_v2.get_cards_by_category(slug, status='published', limit=50)
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if city_id is not None and all_cards and 'city_id' in all_cards[0]:
            all_cards = [c for c in all_cards if (c.get('city_id') == city_id)]
        if filt != 'all':
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ sub_slug, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            cards = [c for c in all_cards if str(c.get('sub_slug') or '').lower() == filt]
        else:
            cards = all_cards

        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        per_page = 5
        count = len(cards)
        pages = max(1, (count + per_page - 1) // per_page)
        cards_page = cards[:per_page]

        # –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Ä—è–¥ = [‚ÑπÔ∏è, (–∫–∞—Ä—Ç–∞)])
        inline_rows = []
        for c in cards_page:
            listing_id = c.get('id') if isinstance(c, dict) else getattr(c, 'id', None)
            gmaps = c.get('google_maps_url') if isinstance(c, dict) else getattr(c, 'google_maps_url', None)
            inline_rows.append(get_catalog_item_row(listing_id, gmaps, lang))

        # –ë–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Å –∞–∫—Ç–∏–≤–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        filter_block = get_restaurant_filters_inline(active=filt, lang=lang)
        kb_rows = filter_block.inline_keyboard + [get_pagination_row(slug, page, pages)]
        kb = inline_rows + kb_rows

        header = f"–ù–∞–π–¥–µ–Ω–æ {count}. –°—Ç—Ä. {page}/{pages}"
        await callback.message.edit_text(
            text=header + "\n\n" + card_service.render_cards_list(cards_page, lang, max_cards=5),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"on_restaurants_filter error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=False)


@category_router.callback_query(F.data.regexp(r"^act:view:[0-9]+$"))
async def on_card_view(callback: CallbackQuery, bot: Bot, lang: str):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ id. –§–æ—Ä–º–∞—Ç: act:view:<id>"""
    try:
        _, _, id_str = callback.data.split(":")
        listing_id = int(id_str)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É; –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É.
        card = None
        try:
            card = db_v2.get_card_by_id(listing_id)
        except Exception:
            card = None

        if card:
            text = card_service.render_card(card if isinstance(card, dict) else dict(card), lang)
        else:
            text = (
                "–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "ID: " + str(listing_id)
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: –∫–∞—Ä—Ç–∞/–∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        gmaps = card.get('google_maps_url') if isinstance(card, dict) else getattr(card, 'google_maps_url', None) if card else None
        kb = [get_catalog_item_row(listing_id, gmaps, lang)]

        await callback.message.edit_text(text=text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        await callback.answer()
    except Exception as e:
        logger.error(f"on_card_view error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=False)

def get_category_router() -> Router:
    """Get category router (always enabled)"""
    return category_router

# Export handlers for registration
__all__ = [
    'show_categories_v2',
    'show_nearest_v2',
    'handle_location_v2',
    'category_selected_v2',
    'handle_profile',
    'get_category_router',
    # -- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≠—Ç–∞–ø–∞ 1 --
    'on_restaurants',
    'on_spa',
    'on_hotels',
    'on_transport',
    'on_tours',
    'on_transport_submenu',
    'on_tours_submenu'
]
