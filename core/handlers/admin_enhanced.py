"""
Enhanced Admin Handlers
Advanced admin functionality with comprehensive management features
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.settings import settings
from core.utils.locales_v2 import get_text, translations
from core.services import admins_service, profile_service
from core.keyboards.inline_v2 import get_admin_cabinet_inline
from core.database.db_v2 import db_v2
from core.models import User, Card, Transaction, ModerationLog
from core.logger import get_logger

logger = get_logger(__name__)

router = Router(name=__name__)

class AdminStates(StatesGroup):
    waiting_for_user_search = State()
    waiting_for_role_change = State()
    waiting_for_bulk_action = State()
    waiting_for_system_command = State()

# Enhanced admin commands
@router.message(Command("admin"))
async def open_enhanced_admin_cabinet(message: Message, bot: Bot, state: FSMContext):
    """Open enhanced admin cabinet with comprehensive features"""
    logger.info(f"Enhanced admin cabinet accessed by user {message.from_user.id}")
    
    try:
        if not settings.features.moderation:
            await message.answer("üöß –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
            
        is_admin = await admins_service.is_admin(message.from_user.id)
        if not is_admin:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
            
        lang = await profile_service.get_lang(message.from_user.id)
        is_superadmin = (int(message.from_user.id) == int(settings.bots.admin_id))
        
        # Get system statistics
        stats = await get_system_statistics()
        
        # Create enhanced keyboard
        keyboard = create_enhanced_admin_keyboard(is_superadmin, lang)
        
        # Enhanced welcome message with stats
        welcome_text = f"""
üõ°Ô∏è **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üè™ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {stats['active_partners']}
üìÑ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_moderation']}
üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['today_transactions']}
üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:,} ‚ÇΩ

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        """
        
        await message.answer(welcome_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in enhanced admin cabinet: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def get_system_statistics() -> Dict[str, Any]:
    """Get comprehensive system statistics"""
    try:
        with db_v2.get_session() as session:
            total_users = session.query(User).count()
            active_partners = session.query(User).filter(
                User.role == "partner", 
                User.is_active == True
            ).count()
            pending_moderation = session.query(Card).filter(Card.status == "pending").count()
            
            today = datetime.utcnow().date()
            today_transactions = session.query(Transaction).filter(
                Transaction.created_at >= today
            ).count()
            
            total_revenue = session.query(Transaction.amount).all()
            total_revenue = sum(t.amount for t in total_revenue) if total_revenue else 0
            
            return {
                "total_users": total_users,
                "active_partners": active_partners,
                "pending_moderation": pending_moderation,
                "today_transactions": today_transactions,
                "total_revenue": total_revenue
            }
    except Exception as e:
        logger.error(f"Error getting system statistics: {e}")
        return {
            "total_users": 0,
            "active_partners": 0,
            "pending_moderation": 0,
            "today_transactions": 0,
            "total_revenue": 0
        }

def create_enhanced_admin_keyboard(is_superadmin: bool, lang: str) -> InlineKeyboardMarkup:
    """Create enhanced admin keyboard with comprehensive features"""
    keyboard = []
    
    # User Management
    keyboard.append([
        InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            callback_data="admin:users"
        )
    ])
    
    # Moderation
    keyboard.append([
        InlineKeyboardButton(
            text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            callback_data="admin:moderation"
        )
    ])
    
    # Analytics
    keyboard.append([
        InlineKeyboardButton(
            text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
            callback_data="admin:analytics"
        )
    ])
    
    # System Monitoring
    keyboard.append([
        InlineKeyboardButton(
            text="üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
            callback_data="admin:monitoring"
        )
    ])
    
    # Financial Management
    keyboard.append([
        InlineKeyboardButton(
            text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç",
            callback_data="admin:finance"
        )
    ])
    
    # Super Admin features
    if is_superadmin:
        keyboard.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data="admin:system_settings"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                callback_data="admin:security"
            )
        ])
    
    # Quick Actions
    keyboard.append([
        InlineKeyboardButton(
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            callback_data="admin:quick_actions"
        )
    ])
    
    # WebApp Dashboard
    keyboard.append([
        InlineKeyboardButton(
            text="üåê WebApp –¥–∞—à–±–æ—Ä–¥",
            callback_data="admin:webapp_dashboard"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data.startswith("admin:"))
async def handle_admin_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """Handle admin callback queries"""
    action = callback.data.split(":", 1)[1]
    
    try:
        if action == "users":
            await show_user_management(callback, bot)
        elif action == "moderation":
            await show_moderation_panel(callback, bot)
        elif action == "analytics":
            await show_analytics_panel(callback, bot)
        elif action == "monitoring":
            await show_system_monitoring(callback, bot)
        elif action == "finance":
            await show_financial_management(callback, bot)
        elif action == "system_settings":
            await show_system_settings(callback, bot)
        elif action == "security":
            await show_security_panel(callback, bot)
        elif action == "quick_actions":
            await show_quick_actions(callback, bot)
        elif action == "webapp_dashboard":
            await open_webapp_dashboard(callback, bot)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"Error handling admin callback {action}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

async def show_user_management(callback: CallbackQuery, bot: Bot):
    """Show user management interface"""
    try:
        stats = await get_system_statistics()
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="admin:search_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="admin:user_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    callback_data="admin:active_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
                    callback_data="admin:blocked_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                    callback_data="admin:export_users"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = f"""
üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {stats['active_partners']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await get_today_new_users()}

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing user management: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

async def show_moderation_panel(callback: CallbackQuery, bot: Bot):
    """Show moderation panel"""
    try:
        stats = await get_system_statistics()
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìÑ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    callback_data="admin:moderation_queue"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
                    callback_data="admin:approved_cards"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ",
                    callback_data="admin:rejected_cards"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    callback_data="admin:moderation_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    callback_data="admin:moderation_settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = f"""
üõ°Ô∏è **–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_moderation']}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {await get_today_approved_cards()}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {await get_today_rejected_cards()}

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing moderation panel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def show_analytics_panel(callback: CallbackQuery, bot: Bot):
    """Show analytics panel"""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    callback_data="admin:general_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="admin:user_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    callback_data="admin:financial_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –û—Ç—á–µ—Ç—ã",
                    callback_data="admin:reports"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤",
                    callback_data="admin:export_reports"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = """
üìä **–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:**
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

üìà **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing analytics panel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

async def show_system_monitoring(callback: CallbackQuery, bot: Bot):
    """Show system monitoring panel"""
    try:
        system_health = await get_system_health()
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üíö –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                    callback_data="admin:system_status"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    callback_data="admin:performance"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîç –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã",
                    callback_data="admin:system_logs"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö® –ê–ª–µ—Ä—Ç—ã",
                    callback_data="admin:alerts"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        status_emoji = "üíö" if system_health["status"] == "healthy" else "‚ö†Ô∏è" if system_health["status"] == "warning" else "üî¥"
        
        text = f"""
üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã**

{status_emoji} **–°—Ç–∞—Ç—É—Å:** {system_health["status"].upper()}
‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {system_health["uptime"]}
üíæ **–ü–∞–º—è—Ç—å:** {system_health["memory_usage"]}%
üñ•Ô∏è **CPU:** {system_health["cpu_usage"]}%
üíø **–î–∏—Å–∫:** {system_health["disk_usage"]}%

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing system monitoring: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")

async def show_financial_management(callback: CallbackQuery, bot: Bot):
    """Show financial management panel"""
    try:
        stats = await get_system_statistics()
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
                    callback_data="admin:total_revenue"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                    callback_data="admin:transactions"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè™ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã",
                    callback_data="admin:partner_payouts"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    callback_data="admin:financial_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = f"""
üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç**

üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:,} ‚ÇΩ
‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['today_transactions']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {await get_average_transaction_amount():.2f} ‚ÇΩ

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing financial management: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—á–µ—Ç–∞")

async def show_quick_actions(callback: CallbackQuery, bot: Bot):
    """Show quick actions panel"""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="admin:refresh_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à",
                    callback_data="admin:clear_cache"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì§ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø",
                    callback_data="admin:create_backup"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
                    callback_data="admin:system_check"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = """
‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing quick actions: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")

async def open_webapp_dashboard(callback: CallbackQuery, bot: Bot):
    """Open WebApp admin dashboard"""
    try:
        webapp_url = f"{settings.webapp.base_url}/api/admin/dashboard-enhanced"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp",
                    url=webapp_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="admin:back"
                )
            ]
        ]
        
        text = f"""
üåê **WebApp –∞–¥–º–∏–Ω-–¥–∞—à–±–æ—Ä–¥**

üîó **–°—Å—ã–ª–∫–∞:** {webapp_url}

üì± **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ WebApp:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:
        """
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error opening WebApp dashboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp")

# Helper functions
async def get_today_new_users() -> int:
    """Get count of new users today"""
    try:
        with db_v2.get_session() as session:
            today = datetime.utcnow().date()
            return session.query(User).filter(
                User.created_at >= today
            ).count()
    except Exception:
        return 0

async def get_today_approved_cards() -> int:
    """Get count of approved cards today"""
    try:
        with db_v2.get_session() as session:
            today = datetime.utcnow().date()
            return session.query(ModerationLog).filter(
                ModerationLog.action == "approve",
                ModerationLog.created_at >= today
            ).count()
    except Exception:
        return 0

async def get_today_rejected_cards() -> int:
    """Get count of rejected cards today"""
    try:
        with db_v2.get_session() as session:
            today = datetime.utcnow().date()
            return session.query(ModerationLog).filter(
                ModerationLog.action == "reject",
                ModerationLog.created_at >= today
            ).count()
    except Exception:
        return 0

async def get_average_transaction_amount() -> float:
    """Get average transaction amount"""
    try:
        with db_v2.get_session() as session:
            transactions = session.query(Transaction.amount).all()
            if transactions:
                return sum(t.amount for t in transactions) / len(transactions)
            return 0.0
    except Exception:
        return 0.0

async def get_system_health() -> Dict[str, Any]:
    """Get system health status"""
    try:
        # Mock system health data
        return {
            "status": "healthy",
            "uptime": "99.9%",
            "memory_usage": 65.2,
            "cpu_usage": 23.8,
            "disk_usage": 45.7,
            "database_status": "healthy",
            "redis_status": "healthy"
        }
    except Exception:
        return {
            "status": "error",
            "uptime": "0%",
            "memory_usage": 0,
            "cpu_usage": 0,
            "disk_usage": 0,
            "database_status": "error",
            "redis_status": "error"
        }
