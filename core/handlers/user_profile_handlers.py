"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from typing import Dict, Any, List
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_db
from core.services.user_profile_service import user_profile_service
from core.services.loyalty_service import loyalty_service
from core.utils.locales import get_text
from core.keyboards.restaurant_keyboards import select_restoran
from core.logger import get_logger

logger = get_logger(__name__)
router = Router(name="user_profile_handlers")

@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_user_profile(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await user_profile_service.get_user_profile(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = get_text(lang, "user_profile_title") or "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        text += f"\n\nüëã –ü—Ä–∏–≤–µ—Ç, {profile['display_name']}!"
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        level_emoji = {
            "bronze": "ü•â",
            "silver": "ü•à", 
            "gold": "ü•á",
            "platinum": "üíé"
        }
        
        level_emoji_current = level_emoji.get(profile['level'], "ü•â")
        text += f"\n\n{level_emoji_current} –£—Ä–æ–≤–µ–Ω—å: {profile['level'].title()}"
        text += f"\nüìä –û—á–∫–∏: {profile['level_points']}"
        text += f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {profile['level_progress']:.1f}%"
        
        if profile['next_level']:
            text += f"\nüéØ –î–æ {profile['next_level'].title()}: {profile['level_points']} –æ—á–∫–æ–≤"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        text += f"\n‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: {profile['total_visits']}"
        text += f"\n‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: {profile['total_reviews']}"
        text += f"\n‚Ä¢ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {profile['total_qr_scans']}"
        text += f"\n‚Ä¢ –ü–æ–∫—É–ø–æ–∫: {profile['total_purchases']}"
        text += f"\n‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {profile['total_spent']:.2f} —Ä—É–±."
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"\n\nüë• –†–µ—Ñ–µ—Ä–∞–ª—ã:"
        text += f"\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {profile['total_referrals']}"
        text += f"\n‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {profile['referral_earnings']:.2f} —Ä—É–±."
        
        # –ë–∞–ª–∞–Ω—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        text += f"\n\nüí∞ –ë–∞–ª–∞–Ω—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:"
        text += f"\n‚Ä¢ –ë–∞–ª–ª—ã: {profile['loyalty_points']}"
        text += f"\n‚Ä¢ –†—É–±–ª–µ–π: {profile['loyalty_balance']:.2f}"
        
        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è
        benefits = profile['level_benefits']
        text += f"\n\nüéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è:"
        text += f"\n‚Ä¢ –°–∫–∏–¥–∫–∞: {benefits['discount']*100:.0f}%"
        text += f"\n‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤: {benefits['points_multiplier']}x"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "profile_settings") or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="profile_settings"
                ),
                InlineKeyboardButton(
                    text=get_text(lang, "profile_statistics") or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="profile_statistics"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "profile_achievements") or "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                    callback_data="profile_achievements"
                ),
                InlineKeyboardButton(
                    text=get_text(lang, "profile_qr_codes") or "üì± QR-–∫–æ–¥—ã",
                    callback_data="profile_qr_codes"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_main") or "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")

@router.callback_query(F.data == "profile_settings")
async def show_profile_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await user_profile_service.get_user_profile(user_id)
        
        text = get_text(lang, "profile_settings_title") or "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        text += f"\n\nüë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
        text += f"\n‚Ä¢ –ò–º—è: {profile['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        text += f"\n‚Ä¢ Username: @{profile['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        text += f"\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        text += f"\n‚Ä¢ Email: {profile['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        
        text += f"\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
        text += f"\n‚Ä¢ –û–±—â–∏–µ: {'‚úÖ' if profile['notifications_enabled'] else '‚ùå'}"
        text += f"\n‚Ä¢ Email: {'‚úÖ' if profile['email_notifications'] else '‚ùå'}"
        text += f"\n‚Ä¢ Push: {'‚úÖ' if profile['push_notifications'] else '‚ùå'}"
        
        text += f"\n\nüåê –Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω:"
        text += f"\n‚Ä¢ –Ø–∑—ã–∫: {profile['language'].upper()}"
        text += f"\n‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {profile['timezone']}"
        
        text += f"\n\nüîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:"
        text += f"\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {profile['privacy_level']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "edit_profile") or "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data="edit_profile"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "notification_settings") or "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="notification_settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_profile") or "‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "profile_statistics")
async def show_profile_statistics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 30 –¥–Ω–µ–π
        stats = await user_profile_service.get_user_statistics(user_id, days=30)
        
        text = get_text(lang, "profile_statistics_title") or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"
        text += f"\n\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {stats['period_days']} –¥–Ω–µ–π:"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if stats['activity_stats']:
            text += f"\n\nüéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:"
            for activity in stats['activity_stats']:
                text += f"\n‚Ä¢ {activity['type']}: {activity['count']} —Ä–∞–∑"
                if activity['points'] > 0:
                    text += f" (+{activity['points']} –æ—á–∫–æ–≤)"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if stats['transaction_stats']:
            text += f"\n\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
            for transaction in stats['transaction_stats']:
                text += f"\n‚Ä¢ {transaction['type']}: {transaction['count']} —Ä–∞–∑"
                if transaction['points'] > 0:
                    text += f" ({transaction['points']} –æ—á–∫–æ–≤)"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_profile") or "‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "profile_achievements")
async def show_profile_achievements(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
        profile = await user_profile_service.get_user_profile(user_id)
        
        text = get_text(lang, "profile_achievements_title") or "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        
        if profile['recent_achievements']:
            text += f"\n\nüéñÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:"
            for achievement in profile['recent_achievements']:
                text += f"\n\nüèÖ {achievement['name']}"
                if achievement['description']:
                    text += f"\n   {achievement['description']}"
                if achievement['points'] > 0:
                    text += f"\n   üí∞ +{achievement['points']} –æ—á–∫–æ–≤"
        else:
            text += f"\n\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
            text += f"\n\nüí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_profile") or "‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

@router.callback_query(F.data == "profile_qr_codes")
async def show_profile_qr_codes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ QR-–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await user_profile_service.get_user_profile(user_id)
        
        text = get_text(lang, "profile_qr_codes_title") or "üì± QR-–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏"
        text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤:"
        text += f"\n‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {profile['total_qr_scans']}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é
        benefits = profile['level_benefits']
        text += f"\n\nüé´ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏:"
        text += f"\n‚Ä¢ –°–∫–∏–¥–∫–∞ —É—Ä–æ–≤–Ω—è: {benefits['discount']*100:.0f}%"
        text += f"\n‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤: {benefits['points_multiplier']}x"
        
        text += f"\n\nüí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:"
        text += f"\n1. –ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏"
        text += f"\n2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
        text += f"\n3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –∏ –æ—á–∫–∏!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "scan_qr_code") or "üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR",
                    callback_data="scan_qr_code"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_profile") or "‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é",
                    callback_data="back_to_profile"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ QR-–∫–æ–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–æ–≤")

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await show_user_profile(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "scan_qr_code")
async def scan_qr_code(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
        profile = await user_profile_service.get_user_profile(user_id)
        
        text = get_text(lang, "qr_scan_instruction") or "üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞"
        text += f"\n\nüë§ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {profile['level'].title()}"
        text += f"\nüé´ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {profile['level_benefits']['discount']*100:.0f}%"
        text += f"\n‚≠ê –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤: {profile['level_benefits']['points_multiplier']}x"
        
        text += f"\n\nüìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:"
        text += f"\n1. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å WebApp'"
        text += f"\n2. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥"
        text += f"\n3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –∏ –æ—á–∫–∏!"
        
        text += f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:"
        text += f"\n‚Ä¢ QR-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ KARMABOT1"
        text += f"\n‚Ä¢ –û–¥–∏–Ω QR-–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
        text += f"\n‚Ä¢ –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "open_webapp") or "üåê –û—Ç–∫—Ä—ã—Ç—å WebApp",
                    web_app={"url": f"https://your-domain.com/api/qr/scanner"}
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "generate_qr") or "üé´ –°–æ–∑–¥–∞—Ç—å QR",
                    callback_data="generate_qr_code"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_qr_codes") or "‚óÄÔ∏è –ö QR-–∫–æ–¥–∞–º",
                    callback_data="profile_qr_codes"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ QR: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

@router.callback_query(F.data == "generate_qr_code")
async def generate_qr_code(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await user_profile_service.get_user_profile(user_id)
        
        text = get_text(lang, "generate_qr_title") or "üé´ –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"
        text += f"\n\nüë§ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {profile['level'].title()}"
        text += f"\nüéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è:"
        text += f"\n‚Ä¢ –°–∫–∏–¥–∫–∞: {profile['level_benefits']['discount']*100:.0f}%"
        text += f"\n‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤: {profile['level_benefits']['points_multiplier']}x"
        
        text += f"\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üíé 100 –æ—á–∫–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                    callback_data="qr_type_loyalty_points_100"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíé 200 –æ—á–∫–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                    callback_data="qr_type_loyalty_points_200"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ 5% —Å–∫–∏–¥–∫–∞",
                    callback_data="qr_type_percentage_5"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ 10% —Å–∫–∏–¥–∫–∞",
                    callback_data="qr_type_percentage_10"
                )
            ],
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_qr_codes") or "‚óÄÔ∏è –ö QR-–∫–æ–¥–∞–º",
                    callback_data="profile_qr_codes"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞")

@router.callback_query(F.data.startswith("qr_type_"))
async def process_qr_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ QR-–∫–æ–¥–∞"""
    try:
        user_id = callback.from_user.id
        lang = (await state.get_data()).get("lang", "ru")
        
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        data_parts = callback.data.split("_")
        discount_type = data_parts[2] + "_" + data_parts[3]  # loyalty_points –∏–ª–∏ percentage
        discount_value = int(data_parts[4])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è
        profile = await user_profile_service.get_user_profile(user_id)
        level_multiplier = profile['level_benefits']['points_multiplier']
        final_value = int(discount_value * level_multiplier)
        
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —á–µ—Ä–µ–∑ WebApp API
        from core.services.qr_code_service import QRCodeService
        from core.database import get_db
        
        async with get_db() as db:
            qr_service = QRCodeService(db)
            
            qr_result = await qr_service.generate_qr_code(
                user_id=user_id,
                discount_type=discount_type,
                discount_value=final_value,
                expires_in_hours=24,
                description=f"–°–∫–∏–¥–∫–∞ {final_value} {'–æ—á–∫–æ–≤' if discount_type == 'loyalty_points' else '%'}"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await user_profile_service.log_user_activity(
            user_id=user_id,
            activity_type="qr_generate",
            points_earned=5,
            activity_data={"qr_id": qr_result["qr_id"], "discount_type": discount_type}
        )
        
        text = get_text(lang, "qr_generated_success") or "‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
        text += f"\n\nüé´ –¢–∏–ø: {discount_type.replace('_', ' ').title()}"
        text += f"\nüí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: {final_value}"
        text += f"\n‚≠ê –° —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è: {level_multiplier}x"
        text += f"\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: 24 —á–∞—Å–∞"
        text += f"\n\nüì± ID QR-–∫–æ–¥–∞: `{qr_result['qr_id']}`"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text(lang, "back_to_qr_codes") or "‚óÄÔ∏è –ö QR-–∫–æ–¥–∞–º",
                    callback_data="profile_qr_codes"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ QR-—Ç–∏–ø–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞")
