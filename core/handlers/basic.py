from aiogram.types import Message, CallbackQuery 
from aiogram import Bot, Router
from aiogram.fsm.context import FSMContext

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç main_v2.py
router = Router(name="basic")

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
from core.utils.locales import translations, get_text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from core.keyboards.inline import select_restoran, regional_restoran, language_keyboard
from core.keyboards.reply_dynamic import get_return_to_main_menu, get_test_restoran, get_main_menu_reply  # –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# –¢–µ–∫—Å—Ç—ã
from core.windows.feedback import feedback_text
from core.windows.hiw import hiw_text
from core.windows.regional_rest import regional_restoran_text
from core.windows.Wrongtype import (
    get_hello_text,
    get_photo_text,
    get_photo_text_el,
    get_inline_text,
    get_location_text
)


async def main_menu(message: Message, bot: Bot, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = get_text(lang, "main_menu")
    
    # –ù–æ–≤—ã–π –∫–æ–¥ (reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É)
    keyboard = get_main_menu_reply(lang)
    
    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard)


async def get_start(message: Message, bot: Bot, state: FSMContext):
    await state.set_data({})  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(started=True)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ, –Ω–æ —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    await bot.send_message(
        chat_id=message.chat.id,
        text="üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:",
        reply_markup=language_keyboard
    )


async def language_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    lang = call.data.split("_")[1]  # lang_ru, lang_en, lang_ko
    await state.update_data(lang=lang)

    start_text = get_text(lang, "start")
    main_text = get_text(lang, "main_menu")
    keyboard = select_restoran  # inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é

    full_text = f"{start_text}\n\n{main_text}"

    try:
        await call.message.edit_text(full_text, reply_markup=keyboard)
    except Exception:
        await bot.send_message(chat_id=call.message.chat.id, text=full_text, reply_markup=keyboard)
    await call.answer()


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    data = call.data

    if data == "show_categories":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=None)  # –∑–∞–≥–ª—É—à–∫–∞
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ show_categories
    elif data == "rests_by_district":
        lang = (await state.get_data()).get("lang", "ru")
        text = get_text(lang, "choose_district") or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:"
        await call.message.edit_text(text, reply_markup=regional_restoran)
    elif data == "rest_near_me":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö ‚Äî –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
        await call.message.edit_text("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏...")
    elif data == "change_language":
        await call.message.edit_text(
            "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:",
            reply_markup=language_keyboard
        )
    elif data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ callback
        message = call.message
        await main_menu(message, bot, state)
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

    await call.answer()


async def hiw_user(message: Message, bot: Bot, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    keyboard = get_return_to_main_menu(lang)
    await bot.send_message(chat_id=message.chat.id, text=hiw_text, reply_markup=keyboard)


async def feedback_user(message: Message, bot: Bot, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    keyboard = get_return_to_main_menu(lang)
    await bot.send_message(chat_id=message.chat.id, text=feedback_text, reply_markup=keyboard)


async def get_inline(message: Message, bot: Bot, state: FSMContext):
    await bot.send_message(chat_id=message.chat.id, text=get_inline_text, reply_markup=select_restoran)


async def user_regional_rest(message: Message, bot: Bot, state: FSMContext):
    await bot.send_message(chat_id=message.chat.id, text=regional_restoran_text, reply_markup=regional_restoran)


async def get_hello(message: Message, bot: Bot, state: FSMContext):
    await message.answer(text=get_hello_text)
    await main_menu(message, bot, state)


async def get_photo(message: Message, bot: Bot, state: FSMContext):
    text = get_photo_text if message.photo else get_photo_text_el
    await message.answer(text=text)
    await main_menu(message, bot, state)


async def get_video(message: Message, bot: Bot, state: FSMContext):
    if message.video:
        await message.answer(text=get_photo_text)
    await main_menu(message, bot, state)


async def get_file(message: Message, bot: Bot, state: FSMContext):
    if message.animation:
        await message.answer(text=get_photo_text)
    await main_menu(message, bot, state)


async def get_location(message: Message, bot: Bot, state: FSMContext):
    await message.answer(text=get_location_text)
    await main_menu(message, bot, state)


async def on_language_select(callback_query, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    lang = callback_query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ callback_data
    await state.update_data(lang=lang)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
    await bot.answer_callback_query(
        callback_query.id,
        text=f"‚úÖ Language set to {lang.upper()}"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(
        message=callback_query.message,
        bot=bot,
        state=state
    )


async def open_cabinet(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    lang = user_data.get('lang', 'ru')
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = (
        f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üåê –Ø–∑—ã–∫: {lang.upper()}\n"
    )
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç.–¥.
    
    await message.answer(
        text=user_info,
        parse_mode='HTML'
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(message, bot, state)


async def ensure_policy_accepted(message: Message, bot: Bot, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–Ω—è—Ç—å –µ—ë.
    """
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫—É
    if not user_data.get('policy_accepted', False):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        policy_text = (
            "üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            "–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "1. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
            "3. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–Ω—è—Ç—å', –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            text=policy_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
        await state.set_state("waiting_for_policy_acceptance")
        return False
    
    return True
