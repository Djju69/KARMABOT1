from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from ..keyboards.inline_v2 import (
    get_language_inline,
    get_cities_inline,
    get_policy_inline,
)
from ..utils.locales_v2 import get_text
from ..settings import settings
from ..services.profile import profile_service

router = Router(name=__name__)

# Basic text handlers (minimal implementations)
async def _send_welcome_with_policy(message: Message):
    from ..keyboards.inline_v2 import get_policy_inline
    user_id = message.from_user.id
    lang = await profile_service.get_lang(user_id)
    welcome_text = get_text('welcome_message', lang).format(
        user_name=message.from_user.first_name
    )
    await message.answer(text=welcome_text, reply_markup=get_policy_inline(lang), parse_mode='HTML')


async def ensure_policy_accepted(message: Message) -> bool:
    """Return True if policy accepted. Otherwise send welcome and return False."""
    user_id = message.from_user.id
    if not await profile_service.is_policy_accepted(user_id):
        await _send_welcome_with_policy(message)
        return False
    return True
async def get_start(message: Message):
    from ..keyboards.reply_v2 import get_main_menu_reply
    from ..keyboards.inline_v2 import get_policy_inline
    
    user_id = message.from_user.id
    lang = await profile_service.get_lang(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫—É
    policy_accepted = await profile_service.is_policy_accepted(user_id)
    
    if not policy_accepted:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω —è–≤–Ω–æ ‚Äî —Å–ø–µ—Ä–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if not await profile_service.has_lang(user_id):
            await message.answer(
                get_text('choose_language', lang),
                reply_markup=get_language_inline(active=lang)
            )
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_text = get_text('welcome_message', lang).format(
            user_name=message.from_user.first_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            text=welcome_text,
            reply_markup=get_policy_inline(lang),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text=get_text('main_menu_title', lang),
            reply_markup=get_main_menu_reply(lang)
        )


async def main_menu(message: Message):
    from ..keyboards.reply_v2 import get_main_menu_reply
    if not await ensure_policy_accepted(message):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    await message.answer(get_text('main_menu_title', lang), reply_markup=get_main_menu_reply(lang))


# ==== Language & Help (Phase 1) ====


async def on_language_select(message: Message):
    if not await ensure_policy_accepted(message):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    await message.answer(
        get_text('choose_language', lang),
        reply_markup=get_language_inline(active=lang)
    )


@router.callback_query(F.data.regexp(r"^lang:set:(ru|en|vi|ko)$"))
async def on_language_set(callback: CallbackQuery):
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Redis/DB)
    _, _, lang = callback.data.split(":")
    await profile_service.set_lang(callback.from_user.id, lang)
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: –µ—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Å–æ–≥–ª–∞—Å–∏–µ–º
    if not await profile_service.is_policy_accepted(callback.from_user.id):
        try:
            await callback.message.delete()
        except Exception:
            pass
        welcome_text = get_text('welcome_message', lang).format(
            user_name=callback.from_user.first_name
        )
        await callback.message.answer(
            welcome_text,
            reply_markup=get_policy_inline(lang),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –∏–Ω–ª–∞–π–Ω-–≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        await callback.message.edit_text(
            get_text('choose_language', lang)
        )
        await callback.message.edit_reply_markup(reply_markup=get_language_inline(active=lang))
        await callback.answer(get_text('language_updated', lang))

# Backward-compatible alias expected by older imports
async def language_callback(callback: CallbackQuery):
    return await on_language_set(callback)


async def on_help(message: Message):
    if not await ensure_policy_accepted(message):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    help_text = get_text('help_main', lang)

    # Append docs/support if available
    pdf_user = getattr(settings, f'pdf_user_{lang}', '')
    pdf_partner = getattr(settings, f'pdf_partner_{lang}', '')
    support = getattr(settings, 'support_tg', '')

    extras = []
    if pdf_user:
        extras.append(f"üìÑ User PDF: {pdf_user}")
    if pdf_partner:
        extras.append(f"üìÑ Partner PDF: {pdf_partner}")
    if support:
        extras.append(f"üÜò Support: {support}")

    text = help_text + ("\n\n" + "\n".join(extras) if extras else "")
    await message.answer(text)


async def on_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —è–∑—ã–∫, –≥–æ—Ä–æ–¥, —Å—Ç–∞—Ç—É—Å –ø–æ–ª–∏—Ç–∏–∫–∏."""
    if not await ensure_policy_accepted(message):
        return
    user_id = message.from_user.id
    lang = await profile_service.get_lang(user_id)
    city_id = await profile_service.get_city_id(user_id)
    policy = await profile_service.is_policy_accepted(user_id)
    city_txt = str(city_id) if city_id is not None else "‚Äî"
    policy_txt = "‚úÖ" if policy else "‚ùå"
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {lang}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥ ID: {city_txt}\n"
        f"‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞: {policy_txt}"
    )
    await message.answer(text)


async def on_policy_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏: —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ /start –∏ inline-–∫–Ω–æ–ø–∫–∞
    if not await ensure_policy_accepted(message):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    url = get_text('policy_url', lang)
    await message.answer(f"üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n{url}")


async def on_add_partner(message: Message):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞. –ï—Å–ª–∏ FSM –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ /add_card."""
    if not await ensure_policy_accepted(message):
        return
    if getattr(settings.features, 'partner_fsm', False):
        await message.answer("üè™ –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_card")
    else:
        await message.answer("üöß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")


async def on_clear_cache(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    if not await ensure_policy_accepted(message):
        return
    if message.from_user.id != settings.bots.admin_id:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await profile_service.clear_cache()
    await message.answer("üßπ –ö—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—á–∏—â–µ–Ω.")


# ==== City selection & Policy acceptance (Phase 1) ====
async def on_city_menu(message: Message):
    if not await ensure_policy_accepted(message):
        return
    lang = await profile_service.get_lang(message.from_user.id)
    active = await profile_service.get_city_id(message.from_user.id)
    await message.answer(get_text('choose_city', lang), reply_markup=get_cities_inline(active_id=active))


@router.callback_query(F.data.regexp(r"^city:set:[0-9]+$"))
async def on_city_set(callback: CallbackQuery):
    lang = await profile_service.get_lang(callback.from_user.id)
    _, _, id_str = callback.data.split(":")
    active = int(id_str)
    await profile_service.set_city_id(callback.from_user.id, active)
    await callback.message.edit_text(get_text('city_selected', lang))
    await callback.message.edit_reply_markup(reply_markup=get_cities_inline(active_id=active))
    await callback.answer(get_text('city_updated', lang))


@router.callback_query(F.data == "policy:accept")
async def on_policy_accept(callback: CallbackQuery):
    from ..keyboards.reply_v2 import get_main_menu_reply
    user_id = callback.from_user.id
    lang = await profile_service.get_lang(user_id)

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
    await profile_service.set_policy_accepted(user_id, True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await callback.answer(get_text('policy_accepted', lang))

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.delete()
    await callback.message.answer(
        get_text('main_menu_title', lang),
        reply_markup=get_main_menu_reply(lang)
    )

# Register defaults to router to ensure availability
router.message.register(get_start, CommandStart())
router.message.register(main_menu, Command("menu"))
router.message.register(on_help, Command("help"))
router.message.register(on_profile, Command("profile"))
router.message.register(on_add_partner, Command("add_partner"))
router.message.register(on_city_menu, Command("city"))
router.message.register(on_policy_command, Command("policy"))
router.message.register(on_clear_cache, Command("clear_cache"))

# Fallback for any other text messages
@router.message(F.text)
async def on_unhandled_message(message: Message):
    lang = await profile_service.get_lang(message.from_user.id)
    await message.answer(get_text('unhandled_message', lang))

__all__ = [
    "router",
    "get_start", "main_menu",
    "on_language_select", "on_language_set", "language_callback", "on_help",
    "on_city_menu", "on_city_set", "on_policy_accept",
]
