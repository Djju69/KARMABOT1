from __future__ import annotations

import logging
from aiogram import Bot, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, Update

from core.settings import settings

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç main_v2.py
router = Router(name="basic")

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
from core.utils.locales import translations, get_text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from core.keyboards.restaurant_keyboards import select_restoran, regional_restoran, kitchen_keyboard
from core.keyboards.language_keyboard import language_keyboard
from core.keyboards.reply_v2 import get_main_menu_reply, get_reply_keyboard, get_return_to_main_menu, get_test_restoran
from core.keyboards.reply_v2 import get_return_to_categories

# –¢–µ–∫—Å—Ç—ã
from core.windows.feedback import feedback_text
from core.windows.hiw import hiw_text
from core.windows.regional_rest import regional_restoran_text
from core.windows.Wrongtype import (
    get_hello_text,
    get_photo_text,
    get_photo_text_el,
    get_inline_text,
    get_location_text
)


async def handle_card_binding_start(message: Message, bot: Bot, state: FSMContext):
    """Handle start command with card binding parameters."""
    logger = logging.getLogger(__name__)
    
    try:
        # Extract card ID from startapp parameters
        import re
        match = re.search(r'cid=([A-Za-z0-9_-]+)', message.text)
        if not match:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.",
                reply_markup=get_return_to_main_menu()
            )
            return
        
        card_id = match.group(1)
        user_id = message.from_user.id
        
        # Import plastic cards service
        from core.services.plastic_cards_service import plastic_cards_service
        
        # Try to bind the card (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞)
        result = await plastic_cards_service.bind_card_to_user(
            telegram_id=user_id,
            card_id=card_id,
            card_id_printable=card_id
        )
        
        if result['success']:
            await message.answer(
                f"‚úÖ {result['message']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏.",
                reply_markup=get_return_to_main_menu(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ùå {result['message']}\n\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_return_to_main_menu(),
                parse_mode='HTML'
            )
        
        # Set language to Russian for new users
        await state.update_data(lang='ru')
        
    except Exception as e:
        logger.error(f"Error in handle_card_binding_start: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_to_main_menu()
        )


async def main_menu(message: Message, bot: Bot, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = get_text(lang, "main_menu")
    
    # –ù–æ–≤—ã–π –∫–æ–¥ (reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É)
    keyboard = get_main_menu_reply(lang)
    
    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard)


async def get_start(message: Message, bot: Bot, state: FSMContext):
    logger = logging.getLogger(__name__)
    logger.info(f"[START] Starting get_start for user {message.from_user.id}")
    
    try:
        # Check for startapp parameters (for plastic cards binding)
        if message.text and 'startapp=bind' in message.text:
            await handle_card_binding_start(message, bot, state)
            return
        
        # Debug: Log feature flags
        logger.info(f"[DEBUG] Feature flags: new_menu={settings.features.new_menu}")
        
        # Get user state
        user_data = await state.get_data()
        current_lang = user_data.get('lang')
        
        logger.info(f"[DEBUG] Current language: {current_lang}")

        # Ensure policy consent first
        if not await ensure_policy_accepted(message, bot, state):
            return
            
        # If no language set, ask for language
        if not current_lang:
            from .language import build_language_inline_kb
            await message.answer(
                "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî / Ch·ªçn ng√¥n ng·ªØ:",
                reply_markup=build_language_inline_kb()
            )
            return

        # Build spec-compliant main menu (reply keyboard v4.1)
        logger.info("[DEBUG] Building spec-compliant menu (reply v4.1)...")
        
        # Check user role to determine appropriate menu
        from core.security.roles import get_user_role
        try:
            user_role = await get_user_role(message.from_user.id)
            role_name = getattr(user_role, "name", str(user_role)).lower()
            logger.info(f"[DEBUG] User role: {role_name}")
            
            # Show admin menu for admins and super admins
            if role_name in ("admin", "super_admin"):
                from core.keyboards.reply_v2 import get_main_menu_reply_admin
                is_superadmin = role_name == "super_admin"
                keyboard = get_main_menu_reply_admin(current_lang, is_superadmin)
                logger.info(f"[DEBUG] Showing admin menu for {role_name}")
            else:
                # Regular user menu
                user_ctx = {"role": "user", "lang": current_lang, "has_partner_cards": False}
                keyboard = get_reply_keyboard(user_ctx, screen="main")
                logger.info(f"[DEBUG] Showing regular user menu")
        except Exception as e:
            logger.error(f"[ERROR] Failed to get user role: {e}")
            # Fallback to regular user menu
            user_ctx = {"role": "user", "lang": current_lang, "has_partner_cards": False}
            keyboard = get_reply_keyboard(user_ctx, screen="main")
            logger.info(f"[DEBUG] Using fallback menu due to role error")
        
        if not keyboard:
            logger.error("[ERROR] Failed to generate menu: keyboard is None")
            # Fallback to simple keyboard
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="Test Button")]],
                resize_keyboard=True
            )
        
        logger.info(f"[DEBUG] Sending menu to user {message.from_user.id}")
        
        # Send welcome message with user name and menu
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        welcome_text = f"""{user_name} üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Karma System! 

‚ú® –ü–æ–ª—É—á–∞–π —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –≤ —É–¥–æ–±–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:  
üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ  
üßñ‚Äç‚ôÄÔ∏è SPA –∏ –º–∞—Å—Å–∞–∂  
üèçÔ∏è –ê—Ä–µ–Ω–¥–∞ –±–∞–π–∫–æ–≤  
üè® –û—Ç–µ–ª–∏  
üö∂‚Äç‚ôÇÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏
üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —É—Å–ª—É–≥–∏  

–ê –µ—Å–ª–∏ —Ç—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞ ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–π —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏! üöÄ  

–ù–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –≤—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∞–π —Å–≤–æ–∏ —Å–∫–∏–¥–∫–∏! 

–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

        await bot.send_message(
            chat_id=message.chat.id,
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

        # Mark started
        await state.update_data(started=True)
        
        logger.info("[SUCCESS] Menu sent successfully")
        
    except Exception as e:
        logger.error(f"[ERROR] get_start failed: {str(e)}", exc_info=True)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode='HTML'
            )
        except Exception as send_error:
            logger.critical(f"[CRITICAL] Failed to send error message: {str(send_error)}")


async def language_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    lang = call.data.split("_")[1]  # lang_ru, lang_en, lang_ko
    await state.update_data(lang=lang)

    start_text = get_text(lang, "start")
    main_text = get_text(lang, "main_menu")
    keyboard = select_restoran  # inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é

    full_text = f"{start_text}\n\n{main_text}"

    try:
        await call.message.edit_text(full_text, reply_markup=keyboard)
    except Exception:
        await bot.send_message(chat_id=call.message.chat.id, text=full_text, reply_markup=keyboard)
    await call.answer()


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(Command("test_menu"))
async def test_menu_command(message: Message, bot: Bot, state: FSMContext):
    """
    Test command to debug menu display.
    
    This command helps verify that the menu system is working correctly.
    It shows the current menu state and feature flags.
    """
    logger = logging.getLogger(__name__)
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    try:
        logger.info(f"[DEBUG] ===== MENU DEBUG START =====")
        logger.info(f"[DEBUG] User ID: {user_id}")
        logger.info(f"[DEBUG] Chat ID: {chat_id}")
        
        # Get current state and settings
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # Log all relevant info
        logger.info(f"[DEBUG] Current language: {lang}")
        logger.info(f"[DEBUG] Feature flags: {settings.features.dict()}")
        logger.info(f"[DEBUG] User data: {user_data}")
        
        # Force enable menu for testing
        logger.info("[DEBUG] Forcing menu generation...")
        keyboard = get_main_menu_reply(lang)
        
        if not keyboard:
            logger.error("[ERROR] Menu generation returned None!")
            # Create emergency keyboard
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="Test Button")]],
                resize_keyboard=True
            )
            await message.answer("‚ö†Ô∏è –ú–µ–Ω—é –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–∫–∞–∑–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        
        # Get the menu with error handling
        try:
            keyboard = get_main_menu_reply(lang)
            logger.info(f"[MENU_DEBUG] Menu generated successfully")
        except Exception as e:
            logger.error(f"[MENU_ERROR] Failed to generate menu: {str(e)}", exc_info=True)
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
            return
            
        # Send the menu with error handling
        try:
            await bot.send_message(
                chat_id=chat_id,
                text="üîß –¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é:",
                reply_markup=keyboard
            )
            logger.info(f"[MENU_DEBUG] Menu sent to user {user_id}")
            
            # Send debug info
            debug_info = (
                "‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                f"üåê –Ø–∑—ã–∫: {lang}\n"
                f"üö© –§–ª–∞–≥–∏: new_menu={settings.features.new_menu}"
            )
            await bot.send_message(chat_id, debug_info)
            
        except Exception as e:
            logger.error(f"[MENU_ERROR] Failed to send menu to {user_id}: {str(e)}", exc_info=True)
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é: {str(e)}"
            )
            
    except Exception as e:
        logger.error(f"[MENU_CRITICAL] Unhandled error in test_menu_command: {str(e)}", exc_info=True)
        try:
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
            )
        except:
            logger.error("[MENU_CRITICAL] Could not send error message to user")


async def main_menu_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    data = call.data

    if data == "show_categories":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=None)  # –∑–∞–≥–ª—É—à–∫–∞
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ show_categories
    elif data == "rests_by_district":
        lang = (await state.get_data()).get("lang", "ru")
        text = get_text(lang, "choose_district") or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:"
        await call.message.edit_text(text, reply_markup=regional_restoran)
    elif data == "rest_near_me":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö ‚Äî –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
        await call.message.edit_text("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏...")
    elif data == "change_language":
        await call.message.edit_text(
            "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:",
            reply_markup=language_keyboard
        )
    elif data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ callback
        message = call.message
        await main_menu(message, bot, state)
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

    await call.answer()


async def hiw_user(message: Message, bot: Bot, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = hiw_text(lang)
    await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="HTML", reply_markup=get_return_to_main_menu(lang))


async def feedback_user(message: Message, bot: Bot, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = feedback_text(lang)
    await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="HTML", reply_markup=get_return_to_main_menu(lang))


async def get_inline(message: Message, bot: Bot, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    await bot.send_message(chat_id=message.chat.id, text=get_inline_text(lang), reply_markup=select_restoran(lang))


async def user_regional_rest(message: Message, bot: Bot, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    await bot.send_message(
        chat_id=message.chat.id, 
        text=regional_restoran_text(lang), 
        reply_markup=regional_restoran(lang)
    )


async def get_hello(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = get_hello_text(lang)
    await message.answer(text=text, parse_mode="HTML")
    await main_menu(message, bot, state)


async def get_photo(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é."""
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")
    text = get_photo_text(lang)
    await bot.send_photo(
        chat_id=message.chat.id, 
        photo=open('media/photo.jpg', 'rb'), 
        caption=text, 
        parse_mode="HTML"
    )
    await main_menu(message, bot, state)


async def get_video(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ."""
    if message.video:
        user_data = await state.get_data()
        lang = user_data.get("lang", "ru")
        text = get_photo_text_el(lang)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
        await message.answer(text=text, parse_mode="HTML")
    await main_menu(message, bot, state)


async def get_file(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
    if message.document:
        user_data = await state.get_data()
        lang = user_data.get("lang", "ru")
        text = get_photo_text_el(lang)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
        await message.answer(text=text, parse_mode="HTML")
    await main_menu(message, bot, state)


async def get_location(message: Message, bot: Bot, state: FSMContext):
    await message.answer(text=get_location_text)
    await main_menu(message, bot, state)


async def on_language_select(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    try:
        user_id = callback_query.from_user.id
        lang = callback_query.data.split('_')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if lang not in translations:
            await callback_query.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(lang=lang)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
        welcome_text = translations[lang].get('welcome', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        await bot.send_message(chat_id=user_id, text=welcome_text, parse_mode="HTML")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(callback_query.message, bot, state)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        try:
            await bot.delete_message(
                chat_id=user_id,
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logger.warning(f"Could not delete language selection message: {e}")
            
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in on_language_select: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


async def open_cabinet(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–±–∏–Ω–µ—Ç–∞
        from core.handlers.cabinet_router import user_cabinet_handler
        await user_cabinet_handler(message, state)
    except Exception as e:
        logger.error(f"Error in open_cabinet: {e}", exc_info=True)
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # Fallback - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        user_info = (
            f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî ID: {message.from_user.id}\n"
            f"üë§ –ò–º—è: {message.from_user.full_name}\n"
            f"üåê –Ø–∑—ã–∫: {lang.upper()}\n"
        )
        
        await message.answer(
            text=user_info,
            parse_mode='HTML'
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(message, bot, state)


async def ensure_policy_accepted(message: Message, bot: Bot, state: FSMContext) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–Ω—è—Ç—å –µ—ë.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –∏–Ω–∞—á–µ False
    """
    try:
        # 1) –ü–æ–ª–Ω—ã–π –æ–±—Ö–æ–¥ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        try:
            from core.settings import settings as _settings
            if int(message.from_user.id) == int(getattr(_settings.bots, 'admin_id', 0)):
                return True
        except Exception:
            pass

        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –≤ FSM
        user_data = await state.get_data()
        if user_data.get('policy_accepted', False):
            return True

        # 3) –ï—Å–ª–∏ –≤ FSM –Ω–µ—Ç ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –ë–î –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ FSM
        import os
        database_url = os.getenv("DATABASE_URL", "").lower()
        try:
            if database_url.startswith("postgres"):
                import asyncpg
                conn_pg = await asyncpg.connect(os.getenv("DATABASE_URL"))
                try:
                    val = await conn_pg.fetchval(
                        "SELECT policy_accepted FROM users WHERE telegram_id = $1",
                        int(message.from_user.id),
                    )
                    if bool(val):
                        await state.update_data(policy_accepted=True)
                        return True
                finally:
                    await conn_pg.close()
            else:
                from core.database.db_v2 import db_v2
                conn = db_v2.get_connection()
                try:
                    cur = conn.execute(
                        "SELECT policy_accepted FROM users WHERE telegram_id = ?",
                        (int(message.from_user.id),),
                    )
                    row = cur.fetchone()
                    if row is not None and bool(row[0] if not isinstance(row, dict) else row.get('policy_accepted')):
                        await state.update_data(policy_accepted=True)
                        return True
                finally:
                    try:
                        conn.close()
                    except Exception:
                        pass
        except Exception:
            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑–æ–º –ø–æ–ª–∏—Ç–∏–∫–∏
            pass

        # 4) –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–∏
        lang = user_data.get('lang', 'ru')
        policy_text = translations.get(lang, {}).get(
            'privacy_policy', 
            'üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ –µ—ë, '
            '—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.'
        )

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=translations.get(lang, {}).get('accept_policy', '‚úÖ –ü—Ä–∏–Ω—è—Ç—å'),
                    callback_data="accept_policy"
                ),
                InlineKeyboardButton(
                    text=translations.get(lang, {}).get('decline_policy', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
                    callback_data="decline_policy"
                )
            ]
        ])

        await message.answer(
            text=policy_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await state.set_state("waiting_for_policy_acceptance")
        return False

    except Exception as e:
        logger.error(f"Error in ensure_policy_accepted: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        return True
    return True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@router.callback_query(lambda c: c.data == "accept_policy")
async def handle_accept_policy(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –ø–æ–ª–∏—Ç–∏–∫—É
        await state.update_data(policy_accepted=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î (SQLite), —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª—Å—è –º–µ–∂–¥—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏
        try:
            import os
            database_url = os.getenv("DATABASE_URL", "")
            if database_url and database_url.lower().startswith("postgres"):
                # PostgreSQL –ø—É—Ç—å (asyncpg)
                import asyncpg
                try:
                    conn_pg = await asyncpg.connect(database_url)
                    try:
                        await conn_pg.execute(
                            """
                            INSERT INTO users(telegram_id, username, first_name, last_name, language_code, policy_accepted)
                            VALUES($1,$2,$3,$4,$5, TRUE)
                            ON CONFLICT (telegram_id) DO UPDATE SET policy_accepted=EXCLUDED.policy_accepted, updated_at=NOW()
                            """,
                            int(callback.from_user.id),
                            (callback.from_user.username or None),
                            (callback.from_user.first_name or None),
                            (callback.from_user.last_name or None),
                            (getattr(callback.from_user, 'language_code', None) or 'ru'),
                        )
                    finally:
                        await conn_pg.close()
                except Exception:
                    # fallback –Ω–µ –ø–∞–¥–∞–µ–º
                    pass
            else:
                # SQLite –ø—É—Ç—å
                from core.database.db_v2 import db_v2
                conn = db_v2.get_connection()
                try:
                    conn.execute(
                        """
                        INSERT OR IGNORE INTO users(telegram_id, username, first_name, last_name, language_code, policy_accepted)
                        VALUES(?, ?, ?, ?, ?, 1)
                        """,
                        (
                            int(callback.from_user.id),
                            (callback.from_user.username or None),
                            (callback.from_user.first_name or None),
                            (callback.from_user.last_name or None),
                            (getattr(callback.from_user, 'language_code', None) or 'ru'),
                        ),
                    )
                    conn.execute(
                        "UPDATE users SET policy_accepted = 1, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = ?",
                        (int(callback.from_user.id),),
                    )
                    conn.commit()
                finally:
                    try:
                        conn.close()
                    except Exception:
                        pass
        except Exception:
            # –ù–µ –ª–æ–º–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
            pass
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
        await callback.message.delete()
        
        # –°–æ–æ–±—â–∞–µ–º –∏ –Ω–µ –¥–µ—Ä–≥–∞–µ–º get_start (—á—Ç–æ–±—ã –Ω–µ —Å–ø—É—Ç–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        await bot.send_message(callback.from_user.id, "‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.")
        
    except Exception as e:
        logger.error(f"Error handling policy acceptance: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@router.callback_query(lambda c: c.data == "decline_policy")
async def handle_decline_policy(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", show_alert=True)
        
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É
        
    except Exception as e:
        logger.error(f"Error handling policy decline: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
