"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import BaseStorage
import logging

from core.security.two_factor_auth import two_factor_auth
from core.security.roles import get_user_role, Role
from core.database import role_repository

logger = logging.getLogger(__name__)

class TwoFactorAuthMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2FA, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –µ–≥–æ —Ä–æ–ª–∏.
    """
    
    def __init__(self, storage: BaseStorage):
        super().__init__()
        self.storage = storage
        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –±–µ–∑ 2FA
        self.allowed_commands = {'start', 'help', 'cancel', 'auth'}
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if not (event.message or event.callback_query):
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
        message = event.message or event.callback_query.message
        user_id = event.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSMContext = data.get('state')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if self._is_auth_command(event):
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self._is_2fa_required(user_id):
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2FA
        state_data = await state.get_data()
        if state_data.get('2fa_verified', False):
            return await handler(event, data)
            
        # –ï—Å–ª–∏ 2FA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        logger.warning(f"User {user_id} tried to access protected resource without 2FA")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ 2FA
        await role_repository.log_audit_event(
            user_id=user_id,
            action="2FA_REQUIRED",
            entity_type="user",
            entity_id=user_id,
            ip_address=event.event.from_user.id if hasattr(event, 'event') else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–æ–π—Ç–∏ 2FA
        if hasattr(event, 'answer'):
            await event.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.")
        elif hasattr(message, 'answer'):
            await message.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.")
        
        return False
    
    async def verify_2fa_code(self, user_id: int, code: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ 2FA.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            code: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –∏–Ω–∞—á–µ False
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é TwoFactorAuth
            return await two_factor_auth.verify_code(user_id, code)
        except Exception as e:
            logger.error(f"Error verifying 2FA code: {e}")
            return False
    
    async def _is_2fa_required(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2FA."""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = await get_user_role(user_id)
        
        # 2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
        if user_role not in [Role.ADMIN, Role.SUPER_ADMIN]:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ 2FA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return await two_factor_auth.is_2fa_enabled(user_id)
    
    def _is_auth_command(self, event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        if hasattr(event, 'message') and event.message and event.message.text:
            text = event.message.text.lower()
            return any(text.startswith(f'/{cmd}') for cmd in self.allowed_commands)
        return False


def setup_2fa_middleware(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç 2FA middleware –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä."""
    two_factor_middleware = TwoFactorAuthMiddleware(dp.fsm.storage)
    dp.message.middleware(two_factor_middleware)
    dp.callback_query.middleware(two_factor_middleware)
    return dp
