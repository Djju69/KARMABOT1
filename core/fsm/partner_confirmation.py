"""
FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–¥ –≤ Telegram
"""
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from core.utils.locales_v2 import get_text
import logging
import random
import string

logger = logging.getLogger(__name__)

class PartnerConfirmation(StatesGroup):
    waiting_for_confirmation_code = State()
    waiting_for_telegram_confirmation = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
confirmation_codes = {}

def generate_confirmation_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ 6 —Ü–∏—Ñ—Ä"""
    return ''.join(random.choices(string.digits, k=6))

async def start_partner_confirmation(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        user_data = await state.get_data()
        lang = user_data.get('lang', 'ru')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_code = generate_confirmation_code()
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –≤ Redis)
        confirmation_codes[user_id] = {
            'code': confirmation_code,
            'partner_data': user_data.get('partner_data', {}),
            'created_at': message.date
        }
        
        await message.answer(
            f"üîê <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            f"üì± –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            f"üîë <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>{confirmation_code}</code>\n\n"
            f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É @KarmaBotSupport\n"
            f"3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'\n\n"
            f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n"
            f"üîÑ –ï—Å–ª–∏ –∫–æ–¥ –∏—Å—Ç–µ–∫, –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥'",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        
        await state.set_state(PartnerConfirmation.waiting_for_telegram_confirmation)
        
    except Exception as e:
        logger.error(f"Error in start_partner_confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_confirmation_response(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    try:
        user_id = message.from_user.id
        
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if user_id in confirmation_codes:
                code_data = confirmation_codes[user_id]
                
                if code_data.get('confirmed', False):
                    # –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    await complete_partner_registration(message, state, code_data['partner_data'])
                else:
                    await message.answer(
                        "‚è≥ –ö–æ–¥ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                        "üì± –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –≤ @KarmaBotSupport\n"
                        "‚è∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥"
                    )
            else:
                await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
                
        elif message.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
            await start_partner_confirmation(message, state)
            
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            # –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await cancel_partner_registration(message, state)
            
        else:
            await message.answer(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                "‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –µ—Å–ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
                "‚Ä¢ üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ - –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–¥\n"
                "‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
            )
            
    except Exception as e:
        logger.error(f"Error in handle_confirmation_response: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def complete_partner_registration(message: Message, state: FSMContext, partner_data: dict):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        from core.database.db_v2 import get_connection
        from core.keyboards.reply_v2 import get_user_cabinet_keyboard
        
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –ë–î
        with get_connection() as conn:
            cursor = conn.execute("""
                INSERT INTO partners (
                    code, title, status, base_discount_pct, contact_name, 
                    contact_telegram, contact_phone, contact_email, legal_info, 
                    created_at, approved_by, approved_at
                ) VALUES (?, ?, 'approved', ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                partner_data.get('business_name', '')[:50],  # code
                partner_data.get('business_name', ''),
                partner_data.get('base_discount_pct', 0.0),
                partner_data.get('contact_name', ''),
                user_id,
                partner_data.get('contact_phone', ''),
                partner_data.get('contact_email', ''),
                partner_data.get('legal_info', ''),
                message.date.isoformat(),
                user_id,  # approved_by (—Å–∞–º–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–¥)
                message.date.isoformat()
            ))
            
            partner_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(
                "UPDATE users SET partner_id = ?, role = 'partner' WHERE telegram_id = ?",
                (partner_id, user_id)
            )
            
            conn.commit()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in confirmation_codes:
            del confirmation_codes[user_id]
        
        await state.clear()
        
        await message.answer(
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {partner_data.get('business_name', '')}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {partner_data.get('contact_name', '')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {partner_data.get('contact_phone', '')}\n"
            f"üìß Email: {partner_data.get('contact_email', '')}\n\n"
            f"üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–±–∏–Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–∏–¥–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n\n"
            f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!",
            reply_markup=get_user_cabinet_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in complete_partner_registration: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

async def cancel_partner_registration(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        user_id = message.from_user.id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in confirmation_codes:
            del confirmation_codes[user_id]
        
        await state.clear()
        
        from core.keyboards.reply_v2 import get_user_cabinet_keyboard
        
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'",
            reply_markup=get_user_cabinet_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in cancel_partner_registration: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–≤
async def confirm_partner_code(admin_id: int, user_id: int, code: str) -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)"""
    try:
        if user_id in confirmation_codes:
            stored_code = confirmation_codes[user_id]['code']
            if stored_code == code:
                confirmation_codes[user_id]['confirmed'] = True
                confirmation_codes[user_id]['confirmed_by'] = admin_id
                return True
        return False
    except Exception as e:
        logger.error(f"Error in confirm_partner_code: {e}")
        return False
