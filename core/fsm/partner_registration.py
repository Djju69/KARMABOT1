"""
FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
–°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
"""
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import F
import logging

logger = logging.getLogger(__name__)

class PartnerRegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    waiting_for_business_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
    waiting_for_contact_name = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    waiting_for_contact_phone = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_contact_email = State() # –û–∂–∏–¥–∞–Ω–∏–µ email
    waiting_for_legal_info = State()    # –û–∂–∏–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    waiting_for_confirmation = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def start_partner_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    try:
        await state.set_state(PartnerRegistrationStates.waiting_for_business_name)
        await message.answer(
            "ü§ù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!\n\n"
            "üìù <b>–®–∞–≥ 1 –∏–∑ 6:</b> –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error starting partner registration: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_business_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
    try:
        business_name = message.text.strip()
        if len(business_name) < 2:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(business_name=business_name)
        await state.set_state(PartnerRegistrationStates.waiting_for_contact_name)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: <b>{business_name}</b>\n\n"
            "üìù <b>–®–∞–≥ 2 –∏–∑ 6:</b> –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error handling business name: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_contact_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    try:
        contact_name = message.text.strip()
        if len(contact_name) < 2:
            await message.answer("‚ùå –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(contact_name=contact_name)
        await state.set_state(PartnerRegistrationStates.waiting_for_contact_phone)
        
        await message.answer(
            f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: <b>{contact_name}</b>\n\n"
            "üìù <b>–®–∞–≥ 3 –∏–∑ 6:</b> –¢–µ–ª–µ—Ñ–æ–Ω\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123 45 67):",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error handling contact name: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_contact_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        phone = message.text.strip()
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(contact_phone=phone)
        await state.set_state(PartnerRegistrationStates.waiting_for_contact_email)
        
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
            "üìù <b>–®–∞–≥ 4 –∏–∑ 6:</b> Email\n\n"
            "–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: contact@company.com):",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error handling contact phone: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_contact_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
    try:
        email = message.text.strip()
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(contact_email=email)
        await state.set_state(PartnerRegistrationStates.waiting_for_legal_info)
        
        await message.answer(
            f"‚úÖ Email: <b>{email}</b>\n\n"
            "üìù <b>–®–∞–≥ 5 –∏–∑ 6:</b> –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ò–ù–ù, –∞–¥—Ä–µ—Å –∏ —Ç.–¥.):",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error handling contact email: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_legal_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        legal_info = message.text.strip()
        if len(legal_info) < 10:
            await message.answer("‚ùå –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(legal_info=legal_info)
        await state.set_state(PartnerRegistrationStates.waiting_for_confirmation)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await state.get_data()
        
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
            f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:</b> {data['business_name']}\n"
            f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {data['contact_name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['contact_phone']}\n"
            f"üìß <b>Email:</b> {data['contact_email']}\n"
            f"üìÑ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {data['legal_info']}\n\n"
            "üìù <b>–®–∞–≥ 6 –∏–∑ 6:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–î–ê</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <b>–ù–ï–¢</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error handling legal info: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        confirmation = message.text.strip().upper()
        
        if confirmation in ["–î–ê", "YES", "Y", "OK", "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            data = await state.get_data()
            success = await save_partner_data(message.from_user.id, data)
            
            if success:
                await message.answer(
                    "‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                    "üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                    "üìß –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É email –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.\n\n"
                    "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!",
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode='HTML'
                )
        elif confirmation in ["–ù–ï–¢", "NO", "N", "–û–¢–ú–ï–ù–ê", "CANCEL"]:
            await message.answer(
                "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–î–ê</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <b>–ù–ï–¢</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                parse_mode='HTML'
            )
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling confirmation: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def save_partner_data(user_id: int, data: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from core.database.db_v2 import get_connection
        from datetime import datetime
        
        with get_connection() as conn:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_code = f"PARTNER_{user_id}_{int(datetime.now().timestamp())}"
            
            conn.execute("""
                INSERT INTO partners (
                    code, title, status, contact_name, contact_telegram, 
                    contact_phone, contact_email, legal_info, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                partner_code,
                data['business_name'],
                'pending',
                data['contact_name'],
                user_id,
                data['contact_phone'],
                data['contact_email'],
                data['legal_info'],
                datetime.now().isoformat()
            ))
            conn.commit()
            return True
            
    except Exception as e:
        logger.error(f"Error saving partner data: {e}")
        return False
