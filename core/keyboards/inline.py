"""
InlineKeyboard —Å–∏—Å—Ç–µ–º–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó v4.1
–ö–∞–Ω–æ–Ω: –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –º–µ–Ω—é ‚ãÆ
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class InlineKeyboards:
    """–°–∏—Å—Ç–µ–º–∞ InlineKeyboard —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–∞–Ω–æ–Ω—É –¢–ó - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    
    def __init__(self, i18n_texts: Dict[str, str]):
        self.texts = i18n_texts
    
    def get_pagination_keyboard(self, current_page: int, total_pages: int, 
                              callback_prefix: str = "page") -> InlineKeyboardMarkup:
        """
        –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó 1.3
        –ü—Ä–∏–Ω—Ü–∏–ø: –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ—ç—Ç–æ–º—É Inline
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        page_buttons = []
        for page in range(1, min(total_pages + 1, 6)):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü
            if page == current_page:
                continue
            page_buttons.append(
                InlineKeyboardButton(
                    text=f"–°—Ç—Ä. {page}",
                    callback_data=f"{callback_prefix}:{page}"
                )
            )
        
        if page_buttons:
            keyboard.append(page_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        keyboard.append([
            InlineKeyboardButton(
                text=self.texts.get("inline.close", "–ó–∞–∫—Ä—ã—Ç—å"),
                callback_data="close"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_confirmation_keyboard(self, action: str, amount: str = None) -> InlineKeyboardMarkup:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó 1.4, 2.3
        –ü—Ä–∏–Ω—Ü–∏–ø: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=self.texts.get("inline.confirm", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                    callback_data=f"confirm:{action}"
                ),
                InlineKeyboardButton(
                    text=self.texts.get("inline.cancel", "–û—Ç–º–µ–Ω–∏—Ç—å"), 
                    callback_data=f"cancel:{action}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_establishment_actions(self, establishment_id: str) -> InlineKeyboardMarkup:
        """
        –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó 2.2
        –ü—Ä–∏–Ω—Ü–∏–ø: –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è",
                    callback_data=f"establishment:info:{establishment_id}"
                ),
                InlineKeyboardButton(
                    text="üó∫",
                    callback_data=f"establishment:map:{establishment_id}"
                ),
                InlineKeyboardButton(
                    text="üé´ QR",
                    callback_data=f"establishment:qr:{establishment_id}"
                ),
                InlineKeyboardButton(
                    text="‚ãÆ",
                    callback_data=f"establishment:more:{establishment_id}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_establishment_more_menu(self, establishment_id: str) -> InlineKeyboardMarkup:
        """
        –†–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–µ—Å—è –º–µ–Ω—é ‚ãÆ –ï—â—ë –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=self.texts.get("inline.hide", "–°–∫—Ä—ã—Ç—å"),
                    callback_data=f"establishment:hide:{establishment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=self.texts.get("inline.edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                    callback_data=f"establishment:edit:{establishment_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=self.texts.get("inline.back", "‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    callback_data=f"establishment:back:{establishment_id}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_admin_partner_actions(self, partner_id: str) -> InlineKeyboardMarkup:
        """
        –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó 3.1
        –ü—Ä–∏–Ω—Ü–∏–ø: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    text=self.texts.get("inline.block", "–ë–ª–æ–∫"),
                    callback_data=f"admin:block:{partner_id}"
                ),
                InlineKeyboardButton(
                    text=self.texts.get("inline.edit", "–ü—Ä–∞–≤–∫–∞"),
                    callback_data=f"admin:edit:{partner_id}"
                ),
                InlineKeyboardButton(
                    text=self.texts.get("inline.log", "–ñ—É—Ä–Ω–∞–ª"),
                    callback_data=f"admin:log:{partner_id}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_period_selector(self, current_period: str = "7d") -> InlineKeyboardMarkup:
        """
        –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
        –ü—Ä–∏–Ω—Ü–∏–ø: –í—ã–±–æ—Ä –æ–ø—Ü–∏–π ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        """
        periods = [
            ("1d", "1 –¥–µ–Ω—å"),
            ("7d", "7 –¥–Ω–µ–π"), 
            ("30d", "30 –¥–Ω–µ–π"),
            ("90d", "90 –¥–Ω–µ–π")
        ]
        
        keyboard = []
        for period_code, period_name in periods:
            text = f"‚úÖ {period_name}" if period_code == current_period else period_name
            keyboard.append([
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"period:{period_code}"
                )
            ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_inline_keyboard(action: str, **kwargs) -> Optional[InlineKeyboardMarkup]:
    """
    –§–∞–±—Ä–∏–∫–∞ InlineKeyboard —Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞–Ω–æ–Ω—É –¢–ó
    –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –º–µ–Ω—é ‚ãÆ
    """
    # i18n —Ç–µ–∫—Å—Ç—ã
    i18n_texts = {
        "inline.close": "–ó–∞–∫—Ä—ã—Ç—å",
        "inline.confirm": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
        "inline.cancel": "–û—Ç–º–µ–Ω–∏—Ç—å",
        "inline.hide": "–°–∫—Ä—ã—Ç—å",
        "inline.edit": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "inline.back": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        "inline.block": "–ë–ª–æ–∫",
        "inline.log": "–ñ—É—Ä–Ω–∞–ª"
    }
    
    keyboards = InlineKeyboards(i18n_texts)
    
    try:
        if action == "pagination":
            current_page = kwargs.get('current_page', 1)
            total_pages = kwargs.get('total_pages', 1)
            callback_prefix = kwargs.get('callback_prefix', 'page')
            return keyboards.get_pagination_keyboard(current_page, total_pages, callback_prefix)
        
        elif action == "confirmation":
            confirm_action = kwargs.get('confirm_action', 'default')
            amount = kwargs.get('amount')
            return keyboards.get_confirmation_keyboard(confirm_action, amount)
        
        elif action == "establishment_actions":
            establishment_id = kwargs.get('establishment_id')
            return keyboards.get_establishment_actions(establishment_id)
        
        elif action == "establishment_more":
            establishment_id = kwargs.get('establishment_id')
            return keyboards.get_establishment_more_menu(establishment_id)
        
        elif action == "admin_partner_actions":
            partner_id = kwargs.get('partner_id')
            return keyboards.get_admin_partner_actions(partner_id)
        
        elif action == "period_selector":
            current_period = kwargs.get('current_period', '7d')
            return keyboards.get_period_selector(current_period)
        
        else:
            logger.warning(f"Unknown inline keyboard action: {action}")
            return None
            
    except Exception as e:
        logger.error(f"Error creating inline keyboard: {e}")
        return None
#             KeyboardButton(text="üá¨üáß English"),
#             KeyboardButton(text="üá∞üá∑ ÌïúÍµ≠Ïñ¥")
#         ]
#     ],
#     resize_keyboard=True,
#     one_time_keyboard=True
# )
