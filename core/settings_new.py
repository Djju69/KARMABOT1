"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è KARMABOT1
–ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ /app/core/settings_new.py
"""
import os
from typing import Optional, List, Dict, Any
from pathlib import Path

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º pydantic-settings –¥–ª—è BaseSettings
try:
    from pydantic_settings import BaseSettings, SettingsConfigDict
    from pydantic import Field, validator, PostgresDsn, AnyUrl
    PYDANTIC_V2 = True
except ImportError:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π pydantic
    try:
        from pydantic import BaseSettings, Field, validator, PostgresDsn, AnyUrl
        PYDANTIC_V2 = False
    except ImportError:
        # –°–æ–≤—Å–µ–º –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ pydantic
        BaseSettings = object
        PYDANTIC_V2 = False
        
        def Field(*args, **kwargs):
            def decorator(func):
                return func
            return decorator
        
        def validator(*args, **kwargs):
            def decorator(func):
                return func
            return decorator


class Settings:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è KARMABOT1
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Pydantic v1, —Ç–∞–∫ –∏ v2
    """
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")
        self.ADMIN_ID: int = int(os.getenv("ADMIN_ID", "0"))
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ PostgreSQL –¥–ª—è Railway
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - SQLite
            database_url = "sqlite:///core/database/data.db"
        elif database_url.startswith('postgres://'):
            # Railway PostgreSQL - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç URL
            database_url = database_url.replace('postgres://', 'postgresql://')
        
        self.DATABASE_URL: str = database_url
        print(f"üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {database_url.split('@')[0] if '@' in database_url else database_url}...")
        
        # –§–∏—á–∞-—Ñ–ª–∞–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        self.FEATURE_PARTNER_FSM: bool = os.getenv("FEATURE_PARTNER_FSM", "false").lower() == "true"
        self.FEATURE_MODERATION: bool = os.getenv("FEATURE_MODERATION", "false").lower() == "true"
        self.FEATURE_NEW_MENU: bool = os.getenv("FEATURE_NEW_MENU", "false").lower() == "true"
        self.FEATURE_QR_WEBAPP: bool = os.getenv("FEATURE_QR_WEBAPP", "false").lower() == "true"
        self.FEATURE_LISTEN_NOTIFY: bool = os.getenv("FEATURE_LISTEN_NOTIFY", "false").lower() == "true"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
        self.ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
        self.DEBUG: bool = os.getenv("DEBUG", "false").lower() == "true"
        
        # WebApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.JWT_SECRET: str = os.getenv("JWT_SECRET", "your_jwt_secret_here_change_in_production")
        self.AUTH_WINDOW_SEC: int = int(os.getenv("AUTH_WINDOW_SEC", "300"))
        self.WEBAPP_QR_URL: str = os.getenv("WEBAPP_QR_URL", "")
        self.WEBAPP_ALLOWED_ORIGIN: str = os.getenv("WEBAPP_ALLOWED_ORIGIN", "*")
        self.CSP_ALLOWED_ORIGIN: str = os.getenv("CSP_ALLOWED_ORIGIN", "*")
        self.FASTAPI_ONLY: bool = os.getenv("FASTAPI_ONLY", "false").lower() == "true"
        
        # Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.REDIS_URL: str = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        self.REDIS_HOST: str = os.getenv("REDIS_HOST", "localhost")
        self.REDIS_PORT: int = int(os.getenv("REDIS_PORT", "6379"))
        self.REDIS_DB: int = int(os.getenv("REDIS_DB", "0"))
        
        # Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.WEBHOOK_HOST: str = os.getenv("WEBHOOK_HOST", "")
        self.WEBHOOK_PORT: int = int(os.getenv("WEBHOOK_PORT", "8080"))
        self.WEBHOOK_PATH: str = os.getenv("WEBHOOK_PATH", "/webhook")
        self.USE_WEBHOOK: bool = os.getenv("USE_WEBHOOK", "false").lower() == "true"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –≤ production
        if self.ENVIRONMENT == "production":
            self._validate_settings()
    
    def _validate_settings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.BOT_TOKEN:
            raise ValueError("BOT_TOKEN is required")
        if not self.ADMIN_ID:
            raise ValueError("ADMIN_ID is required")
    
    def get_feature_flags(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Ñ–∏—á–∞-—Ñ–ª–∞–≥–æ–≤"""
        return {
            "PARTNER_FSM": self.FEATURE_PARTNER_FSM,
            "MODERATION": self.FEATURE_MODERATION,
            "NEW_MENU": self.FEATURE_NEW_MENU,
            "QR_WEBAPP": self.FEATURE_QR_WEBAPP,
            "LISTEN_NOTIFY": self.FEATURE_LISTEN_NOTIFY,
        }
    
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return self.ENVIRONMENT.lower() in ["development", "dev", "local"]
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"""
        return self.ENVIRONMENT.lower() in ["production", "prod"]


# –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Pydantic, —Å–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
if BaseSettings != object and PYDANTIC_V2:
    class PydanticSettings(BaseSettings):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic v2
        """
        model_config = SettingsConfigDict(env_file=".env", case_sensitive=False)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        bot_token: str = Field("", description="Telegram Bot Token")
        admin_id: int = Field(0, description="Admin Telegram ID")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        database_url: str = Field("sqlite:///core/database/data.db", description="Database URL")
        
        # –§–∏—á–∞-—Ñ–ª–∞–≥–∏
        feature_partner_fsm: bool = Field(False, description="Enable Partner FSM")
        feature_moderation: bool = Field(False, description="Enable Moderation")
        feature_new_menu: bool = Field(False, description="Enable New Menu")
        feature_qr_webapp: bool = Field(False, description="Enable QR WebApp")
        feature_listen_notify: bool = Field(False, description="Enable Listen Notify")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        log_level: str = Field("INFO", description="Logging level")
        environment: str = Field("development", description="Environment")
        debug: bool = Field(False, description="Debug mode")
        
        # WebApp
        jwt_secret: str = Field("debug", description="JWT Secret")
        auth_window_sec: int = Field(300, description="Auth window in seconds")
        webapp_qr_url: str = Field("", description="WebApp QR URL")
        webapp_allowed_origin: str = Field("*", description="WebApp allowed origin")
        csp_allowed_origin: str = Field("*", description="CSP allowed origin")
        fastapi_only: bool = Field(False, description="FastAPI only mode")
        
        # Redis
        redis_url: str = Field("redis://localhost:6379/0", description="Redis URL")
        redis_host: str = Field("localhost", description="Redis host")
        redis_port: int = Field(6379, description="Redis port")
        redis_db: int = Field(0, description="Redis database")
        
        # Webhook
        webhook_host: str = Field("", description="Webhook host")
        webhook_port: int = Field(8080, description="Webhook port")
        webhook_path: str = Field("/webhook", description="Webhook path")
        use_webhook: bool = Field(False, description="Use webhook")

    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å Pydantic –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        pydantic_settings = PydanticSettings()
        settings = Settings()
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Pydantic –≤ –æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å
        for field_name, field_value in pydantic_settings.model_dump().items():
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º snake_case –≤ UPPER_CASE
            attr_name = field_name.upper()
            if hasattr(settings, attr_name):
                setattr(settings, attr_name, field_value)
                
    except Exception as e:
        print(f"Warning: Failed to load Pydantic settings, using fallback: {e}")
        settings = Settings()
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    settings = Settings()


def get_settings():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –∫–æ–¥–∞)"""
    return settings


def validate_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings._validate_settings()
        return True
    except ValueError as e:
        print(f"Settings validation failed: {e}")
        return False


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–ª—å–∫–æ –≤ production
if settings.ENVIRONMENT == "production":
    validate_settings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging

logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL, logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {settings.ENVIRONMENT}")
logger.info(f"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–ö–õ' if settings.DEBUG else '–í–´–ö–õ'}")
logger.info(f"Feature flags: PARTNER_FSM={settings.FEATURE_PARTNER_FSM}, "
           f"MODERATION={settings.FEATURE_MODERATION}, "
           f"QR_WEBAPP={settings.FEATURE_QR_WEBAPP}, "
           f"LISTEN_NOTIFY={settings.FEATURE_LISTEN_NOTIFY}")
