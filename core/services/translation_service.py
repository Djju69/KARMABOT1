"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é
"""
import logging
from typing import Dict, Any, Optional, List
import json
import os

logger = logging.getLogger(__name__)

class TranslationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    def __init__(self):
        self.supported_languages = {
            'ru': {'name': '–†—É—Å—Å–∫–∏–π', 'flag': 'üá∑üá∫', 'code': 'ru'},
            'en': {'name': 'English', 'flag': 'üá∫üá∏', 'code': 'en'},
            'vi': {'name': 'Ti·∫øng Vi·ªát', 'flag': 'üáªüá≥', 'code': 'vi'},
            'ko': {'name': 'ÌïúÍµ≠Ïñ¥', 'flag': 'üá∞üá∑', 'code': 'ko'}
        }
        self.default_language = 'ru'
        self.translations = {}
        self._load_translations()
    
    def _load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –ø–∞–ø–∫–∏ core/i18n/
            i18n_dir = os.path.join(os.path.dirname(__file__), '..', 'i18n')
            
            for lang_code in self.supported_languages.keys():
                file_path = os.path.join(i18n_dir, f'{lang_code}.json')
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.translations[lang_code] = json.load(f)
                        logger.info(f"Loaded translations for {lang_code}: {len(self.translations[lang_code])} keys")
                else:
                    logger.warning(f"Translation file not found: {file_path}")
                    self.translations[lang_code] = {}
                    
        except Exception as e:
            logger.error(f"Error loading translations: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º
            self.translations = {
                'ru': self._get_fallback_translations('ru'),
                'en': self._get_fallback_translations('en'),
                'vi': self._get_fallback_translations('vi'),
                'ko': self._get_fallback_translations('ko')
            }
    
    def _get_fallback_translations(self, lang_code: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞–∫ fallback"""
        fallbacks = {
            'ru': {
                'main_menu': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'profile': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                'catalog': 'üìã –ö–∞—Ç–∞–ª–æ–≥',
                'language': 'üåê –Ø–∑—ã–∫',
                'help': '‚ùì –ü–æ–º–æ—â—å',
                'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                'cancel': '‚ùå –û—Ç–º–µ–Ω–∞',
                'confirm': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                'error': '‚ùå –û—à–∏–±–∫–∞',
                'success': '‚úÖ –£—Å–ø–µ—à–Ω–æ',
                'loading': '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...',
                'not_found': '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                'access_denied': 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
                'invalid_data': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'try_again': 'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
            },
            'en': {
                'main_menu': 'üè† Main Menu',
                'profile': 'üë§ Profile',
                'catalog': 'üìã Catalog',
                'language': 'üåê Language',
                'help': '‚ùì Help',
                'settings': '‚öôÔ∏è Settings',
                'back': '‚¨ÖÔ∏è Back',
                'cancel': '‚ùå Cancel',
                'confirm': '‚úÖ Confirm',
                'error': '‚ùå Error',
                'success': '‚úÖ Success',
                'loading': '‚è≥ Loading...',
                'not_found': '‚ùå Not Found',
                'access_denied': 'üö´ Access Denied',
                'invalid_data': '‚ùå Invalid Data',
                'try_again': 'üîÑ Try Again'
            },
            'vi': {
                'main_menu': 'üè† Menu Ch√≠nh',
                'profile': 'üë§ H·ªì S∆°',
                'catalog': 'üìã Danh M·ª•c',
                'language': 'üåê Ng√¥n Ng·ªØ',
                'help': '‚ùì Tr·ª£ Gi√∫p',
                'settings': '‚öôÔ∏è C√†i ƒê·∫∑t',
                'back': '‚¨ÖÔ∏è Quay L·∫°i',
                'cancel': '‚ùå H·ªßy',
                'confirm': '‚úÖ X√°c Nh·∫≠n',
                'error': '‚ùå L·ªói',
                'success': '‚úÖ Th√†nh C√¥ng',
                'loading': '‚è≥ ƒêang T·∫£i...',
                'not_found': '‚ùå Kh√¥ng T√¨m Th·∫•y',
                'access_denied': 'üö´ T·ª´ Ch·ªëi Truy C·∫≠p',
                'invalid_data': '‚ùå D·ªØ Li·ªáu Kh√¥ng H·ª£p L·ªá',
                'try_again': 'üîÑ Th·ª≠ L·∫°i'
            },
            'ko': {
                'main_menu': 'üè† Î©îÏù∏ Î©îÎâ¥',
                'profile': 'üë§ ÌîÑÎ°úÌïÑ',
                'catalog': 'üìã Ïπ¥ÌÉàÎ°úÍ∑∏',
                'language': 'üåê Ïñ∏Ïñ¥',
                'help': '‚ùì ÎèÑÏõÄÎßê',
                'settings': '‚öôÔ∏è ÏÑ§Ï†ï',
                'back': '‚¨ÖÔ∏è Îí§Î°ú',
                'cancel': '‚ùå Ï∑®ÏÜå',
                'confirm': '‚úÖ ÌôïÏù∏',
                'error': '‚ùå Ïò§Î•ò',
                'success': '‚úÖ ÏÑ±Í≥µ',
                'loading': '‚è≥ Î°úÎî© Ï§ë...',
                'not_found': '‚ùå Ï∞æÏùÑ Ïàò ÏóÜÏùå',
                'access_denied': 'üö´ Ï†ëÍ∑º Í±∞Î∂Ä',
                'invalid_data': '‚ùå ÏûòÎ™ªÎêú Îç∞Ïù¥ÌÑ∞',
                'try_again': 'üîÑ Îã§Ïãú ÏãúÎèÑ'
            }
        }
        return fallbacks.get(lang_code, fallbacks['ru'])
    
    def get_text(self, key: str, lang_code: str = None, **kwargs) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        if lang_code is None:
            lang_code = self.default_language
        
        if lang_code not in self.supported_languages:
            lang_code = self.default_language
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
        translation = self.translations.get(lang_code, {}).get(key, '')
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º fallback
        if not translation:
            translation = self._get_fallback_translations(lang_code).get(key, '')
        
        # –ï—Å–ª–∏ –∏ fallback –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
        if not translation:
            translation = key
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
        try:
            if kwargs:
                translation = translation.format(**kwargs)
        except (KeyError, ValueError) as e:
            logger.warning(f"Error formatting translation for key '{key}': {e}")
        
        return translation
    
    def get_supported_languages(self) -> Dict[str, Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        return self.supported_languages
    
    def get_language_name(self, lang_code: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞"""
        lang_info = self.supported_languages.get(lang_code)
        if lang_info:
            return f"{lang_info['flag']} {lang_info['name']}"
        return lang_code
    
    def is_language_supported(self, lang_code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫"""
        return lang_code in self.supported_languages
    
    def get_user_language(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            from core.database.db_v2 import get_connection
            
            with get_connection() as conn:
                cursor = conn.execute("""
                    SELECT language FROM users WHERE telegram_id = ?
                """, (user_id,))
                result = cursor.fetchone()
                
                if result and result[0]:
                    lang_code = result[0]
                    if self.is_language_supported(lang_code):
                        return lang_code
                
                return self.default_language
                
        except Exception as e:
            logger.error(f"Error getting user language: {e}")
            return self.default_language
    
    def set_user_language(self, user_id: int, lang_code: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.is_language_supported(lang_code):
                return False
            
            from core.database.db_v2 import get_connection
            
            with get_connection() as conn:
                conn.execute("""
                    UPDATE users SET language = ? WHERE telegram_id = ?
                """, (lang_code, user_id))
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"Error setting user language: {e}")
            return False
    
    def get_translation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        stats = {}
        for lang_code, translations in self.translations.items():
            stats[lang_code] = {
                'total_keys': len(translations),
                'translated_keys': len([k for k, v in translations.items() if v]),
                'missing_keys': len([k for k, v in translations.items() if not v]),
                'coverage_percent': (len([k for k, v in translations.items() if v]) / len(translations) * 100) if translations else 0
            }
        return stats
    
    def get_missing_translations(self, lang_code: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if lang_code not in self.translations:
            return []
        
        missing = []
        for key, value in self.translations[lang_code].items():
            if not value or value.strip() == '':
                missing.append(key)
        
        return missing
    
    def add_translation(self, key: str, translations: Dict[str, str]) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥"""
        try:
            for lang_code, text in translations.items():
                if lang_code in self.supported_languages:
                    if lang_code not in self.translations:
                        self.translations[lang_code] = {}
                    self.translations[lang_code][key] = text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
            self._save_translations()
            return True
            
        except Exception as e:
            logger.error(f"Error adding translation: {e}")
            return False
    
    def _save_translations(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ–∞–π–ª—ã"""
        try:
            i18n_dir = os.path.join(os.path.dirname(__file__), '..', 'i18n')
            os.makedirs(i18n_dir, exist_ok=True)
            
            for lang_code, translations in self.translations.items():
                file_path = os.path.join(i18n_dir, f'{lang_code}.json')
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(translations, f, ensure_ascii=False, indent=2)
                    
        except Exception as e:
            logger.error(f"Error saving translations: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
translation_service = TranslationService()
