"""
–°–µ—Ä–≤–∏—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "–ö–∞—Ä–º–∞"
"""
import logging
from typing import Dict, Any, Optional
from core.services.user_service import get_user_role
from core.i18n import get_text

logger = logging.getLogger(__name__)


class SupportAIService:
    """AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.knowledge_base = self._load_knowledge_base()
    
    def _load_knowledge_base(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –¢–ó, –∫–æ–¥–∞ –∏ i18n"""
        return {
            "faq": {
                "qr_expired": "QR-–∫–æ–¥ –∏—Å—Ç—ë–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ QR-–∫–æ–¥—ã'",
                "qr_repeat": "QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ö–∞–∂–¥—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
                "no_balance": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã, —Å–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫–∏",
                "no_rights": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            },
            "reports": {
                "user": ["–ø–æ–∫—É–ø–∫–∏", "–±–∞–ª–ª—ã", "–∏—Å—Ç–æ—Ä–∏—è"],
                "partner": ["–∑–∞–≤–µ–¥–µ–Ω–∏—è", "–ø—Ä–æ–¥–∞–∂–∏", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                "admin": ["–≤—Å–µ_–¥–∞–Ω–Ω—ã–µ", "–ø–∞—Ä—Ç–Ω—ë—Ä—ã", "–≥–æ—Ä–æ–¥–∞", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"]
            }
        }
    
    async def answer(self, user_id: int, message: str, lang: str = "ru") -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role = await get_user_role(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            intent = self._classify_intent(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
            if intent == "qa":
                return await self._handle_qa(message, user_role, lang)
            elif intent == "report_make":
                return await self._handle_report_request(message, user_role, lang)
            elif intent == "report_help":
                return await self._handle_report_help(user_role, lang)
            elif intent == "notification_management":
                return await self._handle_notification_management(user_id, message, user_role, lang)
            elif intent == "error_help":
                return await self._handle_error_help(message, user_role, lang)
            else:
                return get_text("support_ai_general_help", lang)
                
        except Exception as e:
            logger.error(f"Error in AI answer: {e}")
            return get_text("support_ai_error", lang)
    
    def _classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–æ—Ç—á—ë—Ç", "–æ—Ç—á–µ—Ç", "report", "—Å–¥–µ–ª–∞–π", "—Å—Ñ–æ—Ä–º–∏—Ä—É–π"]):
            return "report_make"
        elif any(word in message_lower for word in ["–∫–∞–∫–∏–µ –æ—Ç—á—ë—Ç—ã", "—á—Ç–æ –≤—Ö–æ–¥–∏—Ç", "–æ—Ç—á—ë—Ç—ã"]):
            return "report_help"
        elif any(word in message_lower for word in ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"]):
            return "notification_management"
        elif any(word in message_lower for word in ["–æ—à–∏–±–∫–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è"]):
            return "error_help"
        else:
            return "qa"
    
    async def _handle_qa(self, message: str, user_role: str, lang: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FAQ
        if "qr" in message_lower and "–∏—Å—Ç—ë–∫" in message_lower:
            return get_text("support_ai_qr_expired", lang)
        elif "qr" in message_lower and ("–ø–æ–≤—Ç–æ—Ä" in message_lower or "—É–∂–µ" in message_lower):
            return get_text("support_ai_qr_repeat", lang)
        elif "–±–∞–ª–ª" in message_lower and ("–Ω–µ—Ç" in message_lower or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" in message_lower):
            return get_text("support_ai_no_balance", lang)
        elif "–ø—Ä–∞–≤–∞" in message_lower or "–¥–æ—Å—Ç—É–ø" in message_lower:
            return get_text("support_ai_no_rights", lang)
        else:
            return get_text("support_ai_general_help", lang)
    
    async def _handle_report_request(self, message: str, user_role: str, lang: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤"""
        return get_text("support_ai_report_ask_range", lang)
    
    async def _handle_report_help(self, user_role: str, lang: str) -> str:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ —Ä–æ–ª–∏"""
        if user_role == "user":
            return get_text("support_ai_reports_user", lang)
        elif user_role == "partner":
            return get_text("support_ai_reports_partner", lang)
        elif user_role in ["admin", "superadmin"]:
            return get_text("support_ai_reports_admin", lang)
        else:
            return get_text("support_ai_reports_user", lang)
    
    async def _handle_notification_management(self, user_id: int, message: str, user_role: str, lang: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É"""
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–æ–ª—è–º
        categories = self._get_notification_categories(user_role)
        
        if "–æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ" in message_lower or "–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ" in message_lower:
            return self._format_notification_response(
                "üîá –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                categories,
                user_role,
                lang
            )
        elif "–≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ" in message_lower or "–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" in message_lower:
            return self._format_notification_response(
                "üîî –í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.",
                categories,
                user_role,
                lang
            )
        elif "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å" in message_lower or "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in message_lower:
            return self._format_notification_response(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                categories,
                user_role,
                lang
            )
        elif "–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å" in message_lower or "—Ç–∏—Ö–∏–µ —á–∞—Å—ã" in message_lower:
            return self._format_quiet_hours_response(lang)
        else:
            return self._format_notification_response(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
                "–í–æ—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                categories,
                user_role,
                lang
            )
    
    def _get_notification_categories(self, user_role: str) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏"""
        if user_role == "user":
            return {
                "–Ω–æ–≤—ã–µ_–±–∞–ª–ª—ã": {"enabled": True, "priority": "NORMAL", "description": "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"},
                "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è_–æ_–≤–∏–∑–∏—Ç–∞—Ö": {"enabled": True, "priority": "LOW", "description": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è"},
                "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {"enabled": True, "priority": "HIGH", "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"},
                "–Ω–æ–≤–æ—Å—Ç–∏_—Å–∏—Å—Ç–µ–º—ã": {"enabled": True, "priority": "LOW", "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"},
                "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è": {"enabled": True, "priority": "NORMAL", "description": "–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã"}
            }
        elif user_role == "partner":
            return {
                "–Ω–æ–≤—ã–µ_–∑–∞–∫–∞–∑—ã": {"enabled": True, "priority": "HIGH", "description": "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É"},
                "–Ω–æ–≤—ã–µ_–æ—Ç–∑—ã–≤—ã": {"enabled": True, "priority": "NORMAL", "description": "–û—Ç–∑—ã–≤—ã –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏"},
                "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã": {"enabled": False, "priority": "LOW", "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–¥–∞–∂"},
                "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—Å–±–æ–∏": {"enabled": True, "priority": "CRITICAL", "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"},
                "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ_–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏": {"enabled": True, "priority": "LOW", "description": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é"}
            }
        elif user_role == "admin":
            return {
                "–Ω–æ–≤—ã–µ_–∂–∞–ª–æ–±—ã": {"enabled": True, "priority": "HIGH", "description": "–ñ–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
                "—Ç—Ä–µ–±—É–µ—Ç—Å—è_–º–æ–¥–µ—Ä–∞—Ü–∏—è": {"enabled": True, "priority": "NORMAL", "description": "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"},
                "–æ—à–∏–±–∫–∏_–≤_–∑–æ–Ω–µ_–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": {"enabled": True, "priority": "HIGH", "description": "–ü—Ä–æ–±–ª–µ–º—ã –≤ –∫—É—Ä–∏—Ä—É–µ–º—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö"},
                "–∞–Ω–æ–º–∞–ª—å–Ω–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": {"enabled": True, "priority": "CRITICAL", "description": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
            }
        elif user_role == "superadmin":
            return {
                "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ_—Å–±–æ–∏": {"enabled": True, "priority": "CRITICAL", "description": "–û—Ç–∫–∞–∑—ã —Å–∏—Å—Ç–µ–º—ã"},
                "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": {"enabled": True, "priority": "CRITICAL", "description": "–£–≥—Ä–æ–∑—ã –∏ –∞—Ç–∞–∫–∏"},
                "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": {"enabled": True, "priority": "HIGH", "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π"},
                "–±–∏–∑–Ω–µ—Å_–∞–Ω–æ–º–∞–ª–∏–∏": {"enabled": True, "priority": "HIGH", "description": "–ù–µ–æ–±—ã—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"}
            }
        else:
            return {}
    
    def _format_notification_response(self, title: str, description: str, categories: Dict[str, Dict[str, Any]], user_role: str, lang: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        response = f"ü§ñ **{title}**\n\n{description}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category, settings in categories.items():
            status = "‚úÖ" if settings["enabled"] else "‚ùå"
            priority = settings["priority"]
            desc = settings["description"]
            response += f"{status} **{category.replace('_', ' ').title()}** ({priority}) - {desc}\n"
        
        response += f"\nüîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        response += f"‚Ä¢ `/notifications` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        response += f"‚Ä¢ `–æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ` - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        response += f"‚Ä¢ `–≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ` - –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        response += f"‚Ä¢ `–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏` - –¥–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        response += f"‚Ä¢ `–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å` - —Ç–∏—Ö–∏–µ —á–∞—Å—ã\n"
        
        return response
    
    def _format_quiet_hours_response(self, lang: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤"""
        return """üåô **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤**

‚è∞ **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –í—Ä–µ–º—è: 22:00 - 08:00 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: —Ç–æ–ª—å–∫–æ CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîß **–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `1 —á–∞—Å` - –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å 1 —á–∞—Å
‚Ä¢ `–¥–µ–Ω—å` - –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞
‚Ä¢ `–Ω–µ–¥–µ–ª—è` - –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –Ω–µ–¥–µ–ª—é
‚Ä¢ `–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è` - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–∞—Å—ã

üí° **–°–æ–≤–µ—Ç:** CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""

    async def _handle_error_help(self, message: str, user_role: str, lang: str) -> str:
        """–ü–æ–º–æ–≥–∞–µ—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
        message_lower = message.lower()
        
        if "qr" in message_lower:
            return get_text("support_ai_qr_troubleshoot", lang)
        elif "–±–∞–ª–ª" in message_lower:
            return get_text("support_ai_points_troubleshoot", lang)
        else:
            return get_text("support_ai_general_troubleshoot", lang)
