"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
import json

logger = logging.getLogger(__name__)


@dataclass
class DashboardMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    name: str
    value: int
    change: int  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    status: str  # 'good', 'warning', 'error'
    last_updated: datetime
    description: str


@dataclass
class DashboardData:
    """–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    title: str
    metrics: List[DashboardMetric]
    last_updated: datetime
    auto_refresh_seconds: int


class LiveDashboardService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∂–∏–≤—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    
    def __init__(self):
        self.cache = {}
        self.cache_ttl = 30  # –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        self.refresh_tasks = {}
    
    async def get_moderation_dashboard(self) -> DashboardData:
        """–î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            from core.database.db_v2 import db_v2
            
            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            total_cards = db_v2.get_cards_count()
            pending_cards = db_v2.get_cards_count(status='pending')
            approved_cards = db_v2.get_cards_count(status='approved')
            rejected_cards = db_v2.get_cards_count(status='rejected')
            published_cards = db_v2.get_cards_count(status='published')
            
            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            recent_pending = db_v2.get_cards_count(status='pending', since=yesterday)
            recent_approved = db_v2.get_cards_count(status='approved', since=yesterday)
            recent_rejected = db_v2.get_cards_count(status='rejected', since=yesterday)
            
            # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metrics = [
                DashboardMetric(
                    name="üìù –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    value=pending_cards,
                    change=recent_pending,
                    status="warning" if pending_cards > 10 else "good",
                    last_updated=datetime.now(),
                    description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
                ),
                DashboardMetric(
                    name="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                    value=approved_cards,
                    change=recent_approved,
                    status="good",
                    last_updated=datetime.now(),
                    description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
                ),
                DashboardMetric(
                    name="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                    value=rejected_cards,
                    change=recent_rejected,
                    status="warning" if rejected_cards > 5 else "good",
                    last_updated=datetime.now(),
                    description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
                ),
                DashboardMetric(
                    name="üéâ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
                    value=published_cards,
                    change=0,  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    status="good",
                    last_updated=datetime.now(),
                    description="–ö–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                ),
                DashboardMetric(
                    name="üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫",
                    value=total_cards,
                    change=recent_pending + recent_approved + recent_rejected,
                    status="good",
                    last_updated=datetime.now(),
                    description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ"
                )
            ]
            
            return DashboardData(
                title="üìä –î–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                metrics=metrics,
                last_updated=datetime.now(),
                auto_refresh_seconds=60
            )
            
        except Exception as e:
            logger.error(f"Error getting moderation dashboard: {e}")
            return self._get_error_dashboard("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    async def get_notifications_dashboard(self) -> DashboardData:
        """–î–∞—à–±–æ—Ä–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            from core.database.db_v2 import db_v2
            
            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            total_notifications = db_v2.get_notifications_count()
            unread_notifications = db_v2.get_notifications_count(read=False)
            sms_queue = db_v2.get_sms_queue_count()
            failed_sms = db_v2.get_sms_failed_count()
            
            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            recent_notifications = db_v2.get_notifications_count(since=yesterday)
            recent_sms = db_v2.get_sms_sent_count(since=yesterday)
            
            # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metrics = [
                DashboardMetric(
                    name="üîî –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    value=total_notifications,
                    change=recent_notifications,
                    status="good",
                    last_updated=datetime.now(),
                    description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                ),
                DashboardMetric(
                    name="üì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
                    value=unread_notifications,
                    change=0,  # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    status="warning" if unread_notifications > 20 else "good",
                    last_updated=datetime.now(),
                    description="–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                ),
                DashboardMetric(
                    name="üì± SMS –≤ –æ—á–µ—Ä–µ–¥–∏",
                    value=sms_queue,
                    change=0,  # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    status="warning" if sms_queue > 50 else "good",
                    last_updated=datetime.now(),
                    description="SMS —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É"
                ),
                DashboardMetric(
                    name="‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ SMS",
                    value=failed_sms,
                    change=0,  # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    status="error" if failed_sms > 10 else "good",
                    last_updated=datetime.now(),
                    description="SMS —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"
                ),
                DashboardMetric(
                    name="üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS",
                    value=recent_sms,
                    change=recent_sms,
                    status="good",
                    last_updated=datetime.now(),
                    description="SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
                )
            ]
            
            return DashboardData(
                title="üîî –î–∞—à–±–æ—Ä–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                metrics=metrics,
                last_updated=datetime.now(),
                auto_refresh_seconds=30
            )
            
        except Exception as e:
            logger.error(f"Error getting notifications dashboard: {e}")
            return self._get_error_dashboard("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def get_system_dashboard(self) -> DashboardData:
        """–î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            db_status = await self._check_database_status()
            redis_status = await self._check_redis_status()
            odoo_status = await self._check_odoo_status()
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            active_connections = await self._get_active_connections()
            memory_usage = await self._get_memory_usage()
            disk_usage = await self._get_disk_usage()
            
            # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metrics = [
                DashboardMetric(
                    name="üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
                    value=1 if db_status else 0,
                    change=0,
                    status="good" if db_status else "error",
                    last_updated=datetime.now(),
                    description="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                ),
                DashboardMetric(
                    name="üî¥ Redis",
                    value=1 if redis_status else 0,
                    change=0,
                    status="good" if redis_status else "error",
                    last_updated=datetime.now(),
                    description="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"
                ),
                DashboardMetric(
                    name="üåê Odoo",
                    value=1 if odoo_status else 0,
                    change=0,
                    status="good" if odoo_status else "error",
                    last_updated=datetime.now(),
                    description="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Odoo"
                ),
                DashboardMetric(
                    name="üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                    value=active_connections,
                    change=0,
                    status="warning" if active_connections > 100 else "good",
                    last_updated=datetime.now(),
                    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
                ),
                DashboardMetric(
                    name="üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
                    value=memory_usage,
                    change=0,
                    status="warning" if memory_usage > 80 else "good",
                    last_updated=datetime.now(),
                    description="–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"
                ),
                DashboardMetric(
                    name="üíø –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞",
                    value=disk_usage,
                    change=0,
                    status="warning" if disk_usage > 80 else "good",
                    last_updated=datetime.now(),
                    description="–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"
                )
            ]
            
            return DashboardData(
                title="‚öôÔ∏è –î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã",
                metrics=metrics,
                last_updated=datetime.now(),
                auto_refresh_seconds=120
            )
            
        except Exception as e:
            logger.error(f"Error getting system dashboard: {e}")
            return self._get_error_dashboard("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    async def _check_database_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from core.database.db_v2 import db_v2
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            db_v2.get_cards_count()
            return True
        except Exception as e:
            logger.error(f"Database status check failed: {e}")
            return False
    
    async def _check_redis_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Redis"""
        try:
            import redis.asyncio as aioredis
            redis_url = os.getenv('REDIS_URL')
            if not redis_url:
                return False
            
            redis_client = aioredis.from_url(redis_url)
            await redis_client.ping()
            await redis_client.close()
            return True
        except Exception as e:
            logger.error(f"Redis status check failed: {e}")
            return False
    
    async def _check_odoo_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Odoo"""
        try:
            from core.services.odoo_api import odoo_api
            if not odoo_api.is_configured:
                return False
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await odoo_api.get_partner_count()
            return True
        except Exception as e:
            logger.error(f"Odoo status check failed: {e}")
            return False
    
    async def _get_active_connections(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return 45
        except Exception as e:
            logger.error(f"Error getting active connections: {e}")
            return 0
    
    async def _get_memory_usage(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        try:
            import psutil
            return int(psutil.virtual_memory().percent)
        except Exception as e:
            logger.error(f"Error getting memory usage: {e}")
            return 0
    
    async def _get_disk_usage(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        try:
            import psutil
            return int(psutil.disk_usage('/').percent)
        except Exception as e:
            logger.error(f"Error getting disk usage: {e}")
            return 0
    
    def _get_error_dashboard(self, error_message: str) -> DashboardData:
        """–°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ —Å –æ—à–∏–±–∫–æ–π"""
        return DashboardData(
            title="‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞",
            metrics=[
                DashboardMetric(
                    name="‚ùå –û—à–∏–±–∫–∞",
                    value=0,
                    change=0,
                    status="error",
                    last_updated=datetime.now(),
                    description=error_message
                )
            ],
            last_updated=datetime.now(),
            auto_refresh_seconds=60
        )
    
    def format_dashboard_message(self, dashboard: DashboardData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message = f"{dashboard.title}\n\n"
            
            for metric in dashboard.metrics:
                # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    "good": "‚úÖ",
                    "warning": "‚ö†Ô∏è",
                    "error": "‚ùå"
                }.get(metric.status, "‚ùì")
                
                # –ó–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                change_sign = "+" if metric.change > 0 else "" if metric.change == 0 else ""
                change_text = f" ({change_sign}{metric.change})" if metric.change != 0 else ""
                
                message += f"{status_emoji} {metric.name}: <b>{metric.value}</b>{change_text}\n"
                message += f"   <i>{metric.description}</i>\n\n"
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message += f"üïê <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {dashboard.last_updated.strftime('%H:%M:%S')}</i>\n"
            message += f"üîÑ <i>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {dashboard.auto_refresh_seconds} —Å–µ–∫</i>"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting dashboard message: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"
    
    async def start_auto_refresh(self, dashboard_type: str, callback_func, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            if dashboard_type in self.refresh_tasks:
                await self.stop_auto_refresh(dashboard_type)
            
            async def refresh_loop():
                while True:
                    try:
                        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
                        if dashboard_type == "moderation":
                            dashboard = await self.get_moderation_dashboard()
                        elif dashboard_type == "notifications":
                            dashboard = await self.get_notifications_dashboard()
                        elif dashboard_type == "system":
                            dashboard = await self.get_system_dashboard()
                        else:
                            break
                        
                        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = self.format_dashboard_message(dashboard)
                        await callback_func(user_id, message)
                        
                        # –ñ–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        await asyncio.sleep(dashboard.auto_refresh_seconds)
                        
                    except Exception as e:
                        logger.error(f"Error in refresh loop: {e}")
                        await asyncio.sleep(60)  # –ñ–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
            task = asyncio.create_task(refresh_loop())
            self.refresh_tasks[dashboard_type] = task
            
            logger.info(f"Auto-refresh started for {dashboard_type} dashboard")
            
        except Exception as e:
            logger.error(f"Error starting auto-refresh: {e}")
    
    async def stop_auto_refresh(self, dashboard_type: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            if dashboard_type in self.refresh_tasks:
                task = self.refresh_tasks[dashboard_type]
                task.cancel()
                del self.refresh_tasks[dashboard_type]
                logger.info(f"Auto-refresh stopped for {dashboard_type} dashboard")
        except Exception as e:
            logger.error(f"Error stopping auto-refresh: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
live_dashboard = LiveDashboardService()


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def get_moderation_dashboard() -> DashboardData:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    return await live_dashboard.get_moderation_dashboard()

async def get_notifications_dashboard() -> DashboardData:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return await live_dashboard.get_notifications_dashboard()

async def get_system_dashboard() -> DashboardData:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã"""
    return await live_dashboard.get_system_dashboard()

def format_dashboard(dashboard: DashboardData) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return live_dashboard.format_dashboard_message(dashboard)
