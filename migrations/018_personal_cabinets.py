"""
–ú–∏–≥—Ä–∞—Ü–∏—è 018: –°–∏—Å—Ç–µ–º–∞ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
–î–æ–ø–æ–ª–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""
import sqlite3
from datetime import datetime

async def upgrade_018(conn):
    """–î–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        print("üîß Creating/updating users table...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username VARCHAR(255),
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                language_code VARCHAR(10) DEFAULT 'ru',
                karma_points INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        print("‚úÖ Created users table")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ role
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN role VARCHAR(20) DEFAULT 'user'
            """)
            print("‚úÖ Added role column to users table")
        except:
            print("‚ö†Ô∏è role column already exists")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ reputation_score
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN reputation_score INTEGER DEFAULT 0
            """)
            print("‚úÖ Added reputation_score column to users table")
        except:
            print("‚ö†Ô∏è reputation_score column already exists")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ level
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN level INTEGER DEFAULT 1
            """)
            print("‚úÖ Added level column to users table")
        except:
            print("‚ö†Ô∏è level column already exists")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –±–∞–Ω–∞
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN is_banned BOOLEAN DEFAULT FALSE
            """)
            print("‚úÖ Added is_banned column to users table")
        except:
            print("‚ö†Ô∏è is_banned column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN ban_reason TEXT
            """)
            print("‚úÖ Added ban_reason column to users table")
        except:
            print("‚ö†Ô∏è ban_reason column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN banned_by BIGINT
            """)
            print("‚úÖ Added banned_by column to users table")
        except:
            print("‚ö†Ô∏è banned_by column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN banned_at TIMESTAMP
            """)
            print("‚úÖ Added banned_at column to users table")
        except:
            print("‚ö†Ô∏è banned_at column already exists")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ last_activity
        try:
            await conn.execute("""
                ALTER TABLE users ADD COLUMN last_activity TIMESTAMP
            """)
            print("‚úÖ Added last_activity column to users table")
        except:
            print("‚ö†Ô∏è last_activity column already exists")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_notifications —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        print("üîß Creating user_notifications table...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_notifications (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message TEXT NOT NULL,
                is_read BOOLEAN DEFAULT FALSE,
                notification_type VARCHAR(50), -- 'karma_change', 'card_bound', 'level_up', 'system'
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Created user_notifications table")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_achievements —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        print("üîß Creating user_achievements table...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_achievements (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                achievement_type VARCHAR(50), -- 'first_card', 'karma_milestone', 'level_up'
                achievement_data JSON,
                earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Created user_achievements table")
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É admin_logs —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        print("üîß Updating admin_logs table...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ admin_logs
        try:
            await conn.execute("""
                ALTER TABLE admin_logs ADD COLUMN target_user_id BIGINT
            """)
            print("‚úÖ Added target_user_id column to admin_logs table")
        except:
            print("‚ö†Ô∏è target_user_id column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE admin_logs ADD COLUMN target_card_id VARCHAR(20)
            """)
            print("‚úÖ Added target_card_id column to admin_logs table")
        except:
            print("‚ö†Ô∏è target_card_id column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE admin_logs ADD COLUMN details TEXT
            """)
            print("‚úÖ Added details column to admin_logs table")
        except:
            print("‚ö†Ô∏è details column already exists")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ reason –≤ details –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            await conn.execute("""
                ALTER TABLE admin_logs RENAME COLUMN reason TO details
            """)
            print("‚úÖ Renamed reason to details in admin_logs table")
        except:
            print("‚ö†Ô∏è reason column already renamed or doesn't exist")
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É cards_generated —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        print("üîß Updating cards_generated table...")
        
        try:
            await conn.execute("""
                ALTER TABLE cards_generated ADD COLUMN block_reason TEXT
            """)
            print("‚úÖ Added block_reason column to cards_generated table")
        except:
            print("‚ö†Ô∏è block_reason column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE cards_generated ADD COLUMN blocked_by BIGINT
            """)
            print("‚úÖ Added blocked_by column to cards_generated table")
        except:
            print("‚ö†Ô∏è blocked_by column already exists")
        
        try:
            await conn.execute("""
                ALTER TABLE cards_generated ADD COLUMN blocked_at TIMESTAMP
            """)
            print("‚úÖ Added blocked_at column to cards_generated table")
        except:
            print("‚ö†Ô∏è blocked_at column already exists")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        print("üîß Creating indexes...")
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_notifications_user_id 
            ON user_notifications(user_id)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_notifications_type 
            ON user_notifications(notification_type)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_notifications_is_read 
            ON user_notifications(is_read)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_achievements_user_id 
            ON user_achievements(user_id)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_achievements_type 
            ON user_achievements(achievement_type)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_role 
            ON users(role)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_is_banned 
            ON users(is_banned)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_level 
            ON users(level)
        """)
        
        print("‚úÖ Created indexes for personal cabinets tables")
        
        await conn.commit()
        print("üîó Migration 018: Personal cabinets schema updated successfully")
        
    except Exception as e:
        print(f"‚ùå Error in migration 018: {e}")
        raise

async def downgrade_018(conn):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.execute("DROP TABLE IF EXISTS user_achievements")
        await conn.execute("DROP TABLE IF EXISTS user_notifications")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await conn.execute("DROP INDEX IF EXISTS idx_user_notifications_user_id")
        await conn.execute("DROP INDEX IF EXISTS idx_user_notifications_type")
        await conn.execute("DROP INDEX IF EXISTS idx_user_notifications_is_read")
        await conn.execute("DROP INDEX IF EXISTS idx_user_achievements_user_id")
        await conn.execute("DROP INDEX IF EXISTS idx_user_achievements_type")
        await conn.execute("DROP INDEX IF EXISTS idx_users_role")
        await conn.execute("DROP INDEX IF EXISTS idx_users_is_banned")
        await conn.execute("DROP INDEX IF EXISTS idx_users_level")
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í PostgreSQL –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ
        # –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        
        await conn.commit()
        print("‚úÖ Rolled back personal cabinets schema changes")
    except Exception as e:
        print(f"‚ùå Error rolling back personal cabinets schema: {e}")
        raise
