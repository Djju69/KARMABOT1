#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_postgresql_structure():
    """–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ PostgreSQL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–ó"""
    print("\nüß™ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PostgreSQL –ë–î")
    print("-" * 50)
    
    try:
        from core.database.postgresql_service import PostgreSQLService
        
        db = PostgreSQLService()
        await db.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É card_photos
        query = """
            SELECT column_name, data_type, column_default, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'card_photos'
            ORDER BY ordinal_position;
        """
        
        columns = await db.fetch_all(query)
        
        required_columns = {
            'position': 'integer',
            'is_main': 'boolean', 
            'photo_url': 'text',
            'photo_file_id': 'text',
            'file_id': 'text'  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
        
        print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ card_photos:")
        for col in columns:
            print(f"   - {col['column_name']}: {col['data_type']}")
        
        for col_name, col_type in required_columns.items():
            found = any(col['column_name'] == col_name for col in columns)
            if found:
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ {col_name} –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                raise AssertionError(f"–ö–æ–ª–æ–Ω–∫–∞ {col_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ card_photos")
        
        print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–®–ï–õ: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ PostgreSQL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def test_sample_data_insertion():
    """–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 50)
    
    try:
        from core.database.postgresql_service import PostgreSQLService
        from core.database.migrations import add_sample_cards
        
        db = PostgreSQLService()
        await db.initialize()
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        cards_query = "SELECT COUNT(*) FROM cards_v2"
        cards_before = await db.fetch_one(cards_query)
        cards_before = cards_before[0] if cards_before else 0
        
        photos_query = "SELECT COUNT(*) FROM card_photos"
        photos_before = await db.fetch_one(photos_query)
        photos_before = photos_before[0] if photos_before else 0
        
        print(f"üìä –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {cards_before} –∫–∞—Ä—Ç–æ—á–µ–∫, {photos_before} —Ñ–æ—Ç–æ")
        
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        try:
            add_sample_cards()
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è add_sample_cards() –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            raise
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è  
        cards_after = await db.fetch_one(cards_query)
        cards_after = cards_after[0] if cards_after else 0
        
        photos_after = await db.fetch_one(photos_query)
        photos_after = photos_after[0] if photos_after else 0
        
        print(f"üìä –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {cards_after} –∫–∞—Ä—Ç–æ—á–µ–∫, {photos_after} —Ñ–æ—Ç–æ")
        
        if cards_after <= cards_before:
            raise AssertionError(f"–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å: –±—ã–ª–æ {cards_before}, —Å—Ç–∞–ª–æ {cards_after}")
        
        if photos_after <= photos_before:
            raise AssertionError(f"–§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å: –±—ã–ª–æ {photos_before}, —Å—Ç–∞–ª–æ {photos_after}")
        
        print(f"‚úÖ –¢–ï–°–¢ 2 –ü–†–û–®–ï–õ: –î–æ–±–∞–≤–ª–µ–Ω–æ {cards_after - cards_before} –∫–∞—Ä—Ç–æ—á–µ–∫, {photos_after - photos_before} —Ñ–æ—Ç–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def test_catalog_functionality():
    """–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏"""
    print("\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞")
    print("-" * 50)
    
    try:
        from core.database.postgresql_service import PostgreSQLService
        
        db = PostgreSQLService()
        await db.initialize()
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_query = "SELECT id, slug FROM categories_v2"
        categories = await db.fetch_all(categories_query)
        
        total_cards = 0
        categories_with_cards = 0
        
        for cat in categories:
            cat_id = cat['id']
            slug = cat['slug']
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cards_query = "SELECT COUNT(*) FROM cards_v2 WHERE category_id = %s AND status = 'published'"
            card_count = await db.fetch_one(cards_query, (cat_id,))
            card_count = card_count[0] if card_count else 0
            
            if card_count > 0:
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {slug}: {card_count} –∫–∞—Ä—Ç–æ—á–µ–∫")
                categories_with_cards += 1
                total_cards += card_count
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É –∫–∞—Ä—Ç–æ—á–µ–∫ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                photos_query = """
                    SELECT COUNT(*) FROM card_photos cp
                    JOIN cards_v2 c ON cp.card_id = c.id  
                    WHERE c.category_id = %s
                """
                photo_count = await db.fetch_one(photos_query, (cat_id,))
                photo_count = photo_count[0] if photo_count else 0
                print(f"   üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}")
            else:
                print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {slug}: –ë–ï–ó –ö–ê–†–¢–û–ß–ï–ö")
        
        print(f"\nüìä –ò–¢–û–ì–û: {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ {categories_with_cards} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        
        if total_cards == 0:
            raise AssertionError("–í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!")
        
        print("‚úÖ –¢–ï–°–¢ 3 –ó–ê–í–ï–†–®–ï–ù: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def test_database_adapter():
    """–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–¥–∞–ø—Ç–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("\nüß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ –ë–î")
    print("-" * 50)
    
    try:
        from core.database.postgresql_service import PostgreSQLService
        from core.database.db_adapter import DatabaseAdapter
        
        db = PostgreSQLService()
        await db.initialize()
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        test_card_query = """
            INSERT INTO cards_v2 (partner_id, category_id, title, status) 
            VALUES (1, 1, 'Test Card', 'published') RETURNING id
        """
        test_card_result = await db.fetch_one(test_card_query)
        test_card_id = test_card_result[0] if test_card_result else None
        
        if not test_card_id:
            raise AssertionError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É")
        
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ID: {test_card_id}")
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        test_photo_query = """
            INSERT INTO card_photos (card_id, photo_url, photo_file_id, position, is_main, file_id)
            VALUES (%s, 'test_url', 'test_file_id', 1, true, 'test_file_id')
        """
        await db.execute(test_photo_query, (test_card_id,))
        print("üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
        adapter = DatabaseAdapter()
        photos = adapter.get_card_photos(test_card_id)
        
        if len(photos) == 0:
            raise AssertionError("–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        
        print(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –≤–µ—Ä–Ω—É–ª {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        photo = photos[0]
        required_fields = ['card_id', 'photo_url', 'photo_file_id', 'position', 'is_main']
        
        for field in required_fields:
            if field not in photo:
                raise AssertionError(f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞")
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db.execute("DELETE FROM card_photos WHERE card_id = %s", (test_card_id,))
        await db.execute("DELETE FROM cards_v2 WHERE id = %s", (test_card_id,))
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        print("‚úÖ –¢–ï–°–¢ 4 –ü–†–û–®–ï–õ: –ê–¥–∞–ø—Ç–µ—Ä –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –ë–î")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é
    print("üîß –ó–∞–ø—É—Å–∫ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    try:
        from core.database.migrations import unify_database_structure
        unify_database_structure()
        print("‚úÖ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_postgresql_structure,
        test_sample_data_insertion, 
        test_catalog_functionality,
        test_database_adapter
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            result = await test_func()
            if result:
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("=" * 60)
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return True
    else:
        print(f"‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨: {passed_tests}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("üö® –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(run_all_tests())
        sys.exit(0 if result else 1)
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)
