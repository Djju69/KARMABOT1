#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ svtotgesqufeazjkztlv
"""
import os
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞
SUPABASE_PROJECT_URL = "https://svtotgesqufeazjkztlv.supabase.co"
SUPABASE_PROJECT_REF = "svtotgesqufeazjkztlv"
SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2dG90Z2VzcXVmZWF6amt6dGx2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxOTc3NTEsImV4cCI6MjA3Mzc3Mzc1MX0.SzPMTuCokyTuoYLmP7tKBLDmsa_YklvA2DW6yhaRYro"

def create_env_file():
    """–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Supabase"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Supabase...")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Supabase –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("(–ü–∞—Ä–æ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞)")
    db_password = input("Password: ").strip()
    
    if not db_password:
        logger.error("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return False
    
    # –°–æ–∑–¥–∞–µ–º DATABASE_URL
    database_url = f"postgresql://postgres:{db_password}@db.{SUPABASE_PROJECT_REF}.supabase.co:5432/postgres"
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    env_content = f"""# Supabase Configuration
DATABASE_URL={database_url}
APPLY_MIGRATIONS=1

# Supabase API
SUPABASE_URL={SUPABASE_PROJECT_URL}
SUPABASE_KEY={SUPABASE_API_KEY}

# Bot Configuration (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–∞–º–∏)
BOT_TOKEN=your_bot_token_here
REDIS_URL=redis://localhost:6379/0

# Environment
ENVIRONMENT=development
LOG_LEVEL=INFO
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        logger.info("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!")
        logger.info(f"üìä DATABASE_URL: {database_url[:50]}...")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return False

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    
    try:
        import asyncpg
        
        db_url = os.getenv("DATABASE_URL")
        if not db_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª")
            return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        version = await conn.fetchval("SELECT version()")
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –í–µ—Ä—Å–∏—è PostgreSQL: {version[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        if tables:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables[:5]:
                logger.info(f"  üìã {table['table_name']}")
            if len(tables) > 5:
                logger.info(f"  ... –∏ –µ—â–µ {len(tables) - 5} —Ç–∞–±–ª–∏—Ü")
        else:
            logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
            logger.info("üí° –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥—É—Ç –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        
        await conn.close()
        return True
        
    except ImportError:
        logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è")
        return False

def show_railway_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Railway"""
    logger.info("\nüöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø RAILWAY:")
    logger.info("="*50)
    
    db_url = os.getenv("DATABASE_URL")
    if db_url:
        logger.info("1. –ó–∞–π—Ç–∏ –≤ Railway Dashboard")
        logger.info("2. –ü–µ—Ä–µ–π—Ç–∏ –≤ Variables")
        logger.info("3. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        logger.info(f"   DATABASE_URL={db_url}")
        logger.info("   APPLY_MIGRATIONS=1")
        logger.info("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    else:
        logger.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    logger.info(f"üìä –ü—Ä–æ–µ–∫—Ç: {SUPABASE_PROJECT_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        logger.info("‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        choice = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ").strip().lower()
        if choice != 'y':
            logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª")
        else:
            if not create_env_file():
                return False
    else:
        if not create_env_file():
            return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
    except ImportError:
        logger.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        result = asyncio.run(test_connection())
        if result:
            logger.info("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã")
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å")
            
            show_railway_instructions()
        else:
            logger.error("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú")
            logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ .env —Ñ–∞–π–ª–µ")
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    return True

if __name__ == "__main__":
    main()
