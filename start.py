#!/usr/bin/env python3
import os
import asyncio
import logging
import uvicorn
from web.main import app

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.handlers.RotatingFileHandler(
            'app.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5
        )
    ]
)
logger = logging.getLogger(__name__)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    try:
        # –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –ë–û–¢–ê - –û–°–ù–û–í–ù–û–ô –ü–£–¢–¨
        from bot.bot import bot
        logger.info("‚úÖ –ë–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
        await bot.start()
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å): {e}")
        
        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨ 1
        try:
            from bot import bot
            logger.info("‚úÖ –ë–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å 1)")
            await bot.start()
            
        except ImportError:
            # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨ 2 - –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü
            try:
                import sys
                sys.path.append('/app')
                from bot.bot import bot
                logger.info("‚úÖ –ë–æ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)")
                await bot.start()
                
            except ImportError as e2:
                logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e2}")
                raise

async def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.getenv("PORT", 8080))
    config = uvicorn.Config(app, host="0.0.0.0", port=port)
    server = uvicorn.Server(config)
    logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    await server.serve()

async def main():
    """–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bot_task = asyncio.create_task(run_bot())
    web_task = asyncio.create_task(run_web_server())
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –±–æ—Ç–∞, –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
