#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 019 –¥–ª—è PostgreSQL
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É "—É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞" –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É users
"""
import asyncio
import asyncpg
import os
import sys

async def force_migration_019():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é 019 –¥–ª—è PostgreSQL"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not database_url.startswith("postgresql"):
        print("‚ùå –≠—Ç–æ –Ω–µ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    print(f"üîß –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL: {database_url[:50]}...")
    
    try:
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...")
        
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username VARCHAR(255),
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                language_code VARCHAR(10) DEFAULT 'ru',
                karma_points INTEGER DEFAULT 0,
                role VARCHAR(20) DEFAULT 'user',
                reputation_score INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                is_banned BOOLEAN DEFAULT FALSE,
                ban_reason TEXT,
                banned_by BIGINT,
                banned_at TIMESTAMP,
                last_activity TIMESTAMP DEFAULT NOW(),
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_notifications
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_notifications (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message TEXT NOT NULL,
                is_read BOOLEAN DEFAULT FALSE,
                notification_type VARCHAR(50),
                created_at TIMESTAMP DEFAULT NOW()
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_notifications —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_achievements
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_achievements (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                achievement_type VARCHAR(50) NOT NULL,
                achievement_data TEXT,
                earned_at TIMESTAMP DEFAULT NOW()
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_achievements —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = await conn.fetchval("SELECT COUNT(*) FROM users")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–¥–µ—Ä–∂–∏—Ç {result} –∑–∞–ø–∏—Å–µ–π")
        
        await conn.close()
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è 019 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 019 –¥–ª—è PostgreSQL")
    success = asyncio.run(force_migration_019())
    if success:
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)
